package dev.fritz2.lens

import com.tschuchort.compiletesting.*
import org.assertj.core.api.Assertions.assertThat
import org.jetbrains.kotlin.compiler.plugin.ExperimentalCompilerApi
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.assertAll
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.Arguments
import org.junit.jupiter.params.provider.Arguments.arguments
import org.junit.jupiter.params.provider.MethodSource
import java.io.File
import java.nio.charset.StandardCharsets
import kotlin.io.path.ExperimentalPathApi
import kotlin.io.path.createTempDirectory
import kotlin.test.Test

@OptIn(ExperimentalCompilerApi::class)
class LensesProcessorTests {

    @ExperimentalPathApi
    private fun compileSource(vararg source: SourceFile) = KotlinCompilation().apply {
        configureKsp(useKsp2 = true) {
            jvmTarget = "17"
            languageVersion = "2.1"
            sources = source.toList()
            symbolProcessorProviders += LensesProcessorProvider()
            workingDir = createTempDirectory("fritz2-tests").toFile()
            inheritClassPath = true
            verbose = false
        }
    }.compile()

    // workaround inspired by https://github.com/tschuchortdev/kotlin-compile-testing/issues/129#issuecomment-804390310
    private val CompilationResult.kspGeneratedSources: List<File>
        get() {
            val kspWorkingDir = outputDirectory.parentFile!!.resolve("ksp")
            val kspGeneratedDir = kspWorkingDir.resolve("sources")
            val kotlinGeneratedDir = kspGeneratedDir.resolve("kotlin")
            val javaGeneratedDir = kspGeneratedDir.resolve("java")
            return kotlinGeneratedDir.walkTopDown().toList() +
                    javaGeneratedDir.walkTopDown()
        }

    @ExperimentalPathApi
    @Suppress("UNUSED_PARAMETER")
    @DisplayName("validate lenses generation works on")
    @ParameterizedTest(name = "{index}: {0}")
    @MethodSource("createValidGeneratedLenses")
    fun validateLensesGenerationWorks(description: String, kotlinSource: SourceFile, expectedCode: String) {
        val compilationResult = compileSource(kotlinSource)

        assertAll(
            { assertThat(compilationResult.exitCode).isEqualTo(KotlinCompilation.ExitCode.OK) },
            {
                assertThat(compilationResult.kspGeneratedSources.find { it.name == "FrameworkLenses.kt" })
                    .usingCharset(StandardCharsets.UTF_8)
                    .hasContent(expectedCode)
            }
        )
    }

    @ExperimentalPathApi
    @Test
    fun `lenses can handle multiple classes`() {
        val kotlinSource = SourceFile.kotlin(
            "dataClassesForLensesTests.kt", """
                package dev.fritz2.lenstest

                import dev.fritz2.core.Lenses

                // lenses will appear in `FooLenses.kt`
                @Lenses
                data class Foo(val bar: Int) {
                    companion object
                }

                // lenses will appear in `BarLenses.kt`
                @Lenses
                sealed class Bar {
                    val bar: Int
                    companion object
                }

                data class BarImpl(
                    override val bar: Int,
                ) : Bar
            """
        )

        val compilationResult = compileSource(kotlinSource)

        assertAll(
            { assertThat(compilationResult.exitCode).isEqualTo(KotlinCompilation.ExitCode.OK) },
            {
                assertThat(compilationResult.kspGeneratedSources.find { it.name == "FooLenses.kt" })
                    .usingCharset(StandardCharsets.UTF_8).hasContent(
                        """
                        |// GENERATED by fritz2 - NEVER CHANGE CONTENT MANUALLY!
                        |package dev.fritz2.lenstest
                        |
                        |import dev.fritz2.core.Lens
                        |import dev.fritz2.core.lensOf
                        |import kotlin.Int
                        |
                        |public fun Foo.Companion.bar(): Lens<Foo, Int> = lensOf(
                        |    "bar",
                        |    { it.bar },
                        |    { p, v -> p.copy(bar = v)}
                        |  )
                        |
                        |public fun <PARENT> Lens<PARENT, Foo>.bar(): Lens<PARENT, Int> = this + Foo.bar()
                        """.trimMargin()
                    )
            },
            {
                assertThat(compilationResult.kspGeneratedSources.find { it.name == "BarLenses.kt" })
                    .usingCharset(StandardCharsets.UTF_8).hasContent(
                        """
                        |// GENERATED by fritz2 - NEVER CHANGE CONTENT MANUALLY!
                        |package dev.fritz2.lenstest
                        |
                        |import dev.fritz2.core.Lens
                        |import dev.fritz2.core.lensForUpcasting
                        |import dev.fritz2.core.lensOf
                        |import kotlin.Int
                        |
                        |public fun Bar.Companion.bar(): Lens<Bar, Int> = lensOf(
                        |    "bar",
                        |    { parent ->
                        |        when(parent) {
                        |            is BarImpl -> parent.bar
                        |        }
                        |    },
                        |    { parent, value ->
                        |        when(parent) {
                        |            is BarImpl -> parent.copy(bar = value)
                        |        }
                        |    }
                        |)
                        |
                        |public fun <PARENT> Lens<PARENT, Bar>.bar(): Lens<PARENT, Int> = this + Bar.bar()
                        |
                        |public fun Bar.Companion.barImpl(): Lens<Bar, BarImpl> = lensForUpcasting<Bar,BarImpl>()
                        """.trimMargin()
                    )
            }
        )
    }

    @ExperimentalPathApi
    @Suppress("UNUSED_PARAMETER")
    @DisplayName("validate down-typing lens is generated for sealed parents")
    @ParameterizedTest(name = "{index}: {0}")
    @MethodSource("createValidGeneratedTypingLenses")
    fun validateDownTypingLensIsGenerated(description: String, kotlinSource: SourceFile, expectedCode: String) {
        val compilationResult = compileSource(kotlinSource)

        assertAll(
            { assertThat(compilationResult.exitCode).isEqualTo(KotlinCompilation.ExitCode.OK) },
            {
                assertThat(compilationResult.kspGeneratedSources.find { it.name == "Fritz2Lenses.kt" })
                    .usingCharset(StandardCharsets.UTF_8)
                    .hasContent(expectedCode)
            }
        )
    }

    @ExperimentalPathApi
    @Test
    fun `lenses can cope with named companion objects`() {
        val kotlinSource = SourceFile.kotlin(
            "dataClassesForLensesTests.kt", """
                package dev.fritz2.lenstest

                import dev.fritz2.core.Lenses

                @Lenses
                data class Foo(val bar: Int) {
                    companion object MySpecialCompanion
                }
            """
        )

        val compilationResult = compileSource(kotlinSource)

        assertAll(
            { assertThat(compilationResult.exitCode).isEqualTo(KotlinCompilation.ExitCode.OK) },
            {
                assertThat(compilationResult.kspGeneratedSources.find { it.name == "FooLenses.kt" })
                    .usingCharset(StandardCharsets.UTF_8).hasContent(
                        """
                        |// GENERATED by fritz2 - NEVER CHANGE CONTENT MANUALLY!
                        |package dev.fritz2.lenstest
                        |
                        |import dev.fritz2.core.Lens
                        |import dev.fritz2.core.lensOf
                        |import kotlin.Int
                        |
                        |public fun Foo.MySpecialCompanion.bar(): Lens<Foo, Int> = lensOf(
                        |    "bar",
                        |    { it.bar },
                        |    { p, v -> p.copy(bar = v)}
                        |  )
                        |
                        |public fun <PARENT> Lens<PARENT, Foo>.bar(): Lens<PARENT, Int> = this + Foo.bar()
                        """.trimMargin()
                    )
            }
        )
    }


    @ExperimentalPathApi
    @Test
    fun `data classes with no public property value in ctor will not generate anything`() {
        val kotlinSource = SourceFile.kotlin(
            "dataClassesForLensesTests.kt", """
                package dev.fritz2.lenstest

                import dev.fritz2.core.Lenses

                @Lenses
                data class Foo(private val foo: Int, param: String) { // no public property defined in ctor!
                    companion object
                    val someNoneCtorProp: Int = foo + 1
                }
            """
        )

        val compilationResult = compileSource(kotlinSource)

        assertAll(
            { assertThat(compilationResult.exitCode).isEqualTo(KotlinCompilation.ExitCode.OK) },
            { assertThat(compilationResult.kspGeneratedSources.find { it.name == "FooLenses.kt" }).isNull() },
            { assertThat(compilationResult.messages).contains("can not create any lenses though") },
        )
    }

    @ExperimentalPathApi
    @Suppress("UNUSED_PARAMETER")
    @DisplayName("sealed types with no public property will at least generate up-casting-lenses for base types")
    @ParameterizedTest(name = "{index}: {0}")
    @MethodSource("createEmptySealedTypes")
    fun `sealed types with no public property will at least generate up-casting-lenses for base types`(
        description: String,
        kotlinSource: SourceFile,
        expectedCode: String
    ) {
        val compilationResult = compileSource(kotlinSource)

        assertAll(
            { assertThat(compilationResult.exitCode).isEqualTo(KotlinCompilation.ExitCode.OK) },
            {
                assertThat(compilationResult.kspGeneratedSources.find { it.name == "FooLenses.kt" })
                    .usingCharset(StandardCharsets.UTF_8)
                    .hasContent(expectedCode)
            }
        )
    }

    @ExperimentalPathApi
    @Test
    fun `lenses on sealed interface with no public property values will not generate anything`() {
        val kotlinSource = SourceFile.kotlin(
            "sealedInterfacesForLensesTests.kt", """
                package dev.fritz2.lenstest

                import dev.fritz2.core.Lenses

                @Lenses
                sealed interface Foo {
                    companion object
                }
            """
        )

        val compilationResult = compileSource(kotlinSource)

        assertAll(
            { assertThat(compilationResult.exitCode).isEqualTo(KotlinCompilation.ExitCode.OK) },
            { assertThat(compilationResult.kspGeneratedSources.find { it.name == "FooLenses.kt" }).isNull() },
            { assertThat(compilationResult.messages).contains("can not create any lenses though") }
        )
    }

    @ExperimentalPathApi
    @ParameterizedTest(name = "{0}")
    @MethodSource("getFalseAnnotatedEntities")
    fun `lenses will throw error if not applied to allowed types`(kotlinSource: SourceFile) {
        val compilationResult = compileSource(kotlinSource)

        assertAll(
            { assertThat(compilationResult.exitCode).isEqualTo(KotlinCompilation.ExitCode.COMPILATION_ERROR) },
            {
                assertThat(compilationResult.messages)
                    .contains("Foo is not a data class, sealed class or sealed interface!")
            }
        )
    }

    @ExperimentalPathApi
    @Suppress("UNUSED_PARAMETER")
    @DisplayName("lenses will throw error if companion object is missing")
    @ParameterizedTest(name = "{index}: {0}")
    @MethodSource("createCodeWithoutCompanion")
    fun `lenses will throw error if companion object is missing`(description: String, kotlinSource: SourceFile) {
        val compilationResult = compileSource(kotlinSource)

        assertAll(
            { assertThat(compilationResult.exitCode).isEqualTo(KotlinCompilation.ExitCode.COMPILATION_ERROR) },
            { assertThat(compilationResult.messages).contains("The companion object for Foo is missing!") }
        )
    }

    @ExperimentalPathApi
    @Suppress("UNUSED_PARAMETER")
    @ParameterizedTest(name = "{index}: {0} blocks generation")
    @MethodSource("getNameBlockingDataClasses")
    fun `lenses will throw error if lens fun's name is already in use`(
        description: String,
        objectName: String,
        kotlinSource: SourceFile
    ) {
        val compilationResult = compileSource(kotlinSource)

        assertAll(
            { assertThat(compilationResult.exitCode).isEqualTo(KotlinCompilation.ExitCode.COMPILATION_ERROR) },
            {
                assertThat(compilationResult.messages)
                    .contains("The companion object of $objectName already defines the following functions / properties")
            }
        )
    }

    @ExperimentalPathApi
    @Test
    fun `lenses ignore none ctor or private ctor properties, other annotations, delegated none ctor properties and functions in companion`() {
        val kotlinSource = SourceFile.kotlin(
            "dataClassesForLensesTests.kt", """
                package dev.fritz2.lenstest

                import dev.fritz2.core.Lenses
                // should not disturb
                import kotlinx.serialization.Serializable
                import kotlinx.serialization.json.Json

                @Lenses
                @Serializable // should not disturb
                data class Foo(val bar: Int, private val ignoredProp: Int) {
                //                           ^^^^^^^
                //                           private field -> no lens possible!
                    companion object {
                        // should not disturb
                        fun toJson(foo: Foo) = Json.decodeFromString(serializer(), foo)
                    }
                    val ignored = bar + 1 // must not appear in lens!
                    val ignoredDelegated by lazy { bar + 1 } // must not appear in lens!
                }
            """
        )

        val compilationResult = compileSource(kotlinSource)

        assertAll(
            { assertThat(compilationResult.exitCode).isEqualTo(KotlinCompilation.ExitCode.OK) },
            {
                assertThat(compilationResult.kspGeneratedSources.find { it.name == "FooLenses.kt" })
                    .usingCharset(StandardCharsets.UTF_8).hasContent(
                        """
                        |// GENERATED by fritz2 - NEVER CHANGE CONTENT MANUALLY!
                        |package dev.fritz2.lenstest
                        |
                        |import dev.fritz2.core.Lens
                        |import dev.fritz2.core.lensOf
                        |import kotlin.Int
                        |
                        |public fun Foo.Companion.bar(): Lens<Foo, Int> = lensOf(
                        |    "bar",
                        |    { it.bar },
                        |    { p, v -> p.copy(bar = v)}
                        |  )
                        |
                        |public fun <PARENT> Lens<PARENT, Foo>.bar(): Lens<PARENT, Int> = this + Foo.bar()
                        """.trimMargin()
                    )
            }
        )
    }

    @ExperimentalPathApi
    @Test
    fun `lenses can handle generic data classes`() {
        val kotlinSource = SourceFile.kotlin(
            "dataClassesForLensesTests.kt", """
                package dev.fritz2.lenstest

                import dev.fritz2.core.Lenses

                @Lenses
                data class Foo<T>(val bar: T, val baz: String) {
                    companion object
                }

                @Lenses
                data class Bar<T, E>(val foo: T, val fooBar: E) {
                    companion object
                }
            """
        )

        val compilationResult = compileSource(kotlinSource)

        assertAll(
            { assertThat(compilationResult.exitCode).isEqualTo(KotlinCompilation.ExitCode.OK) },
            {
                assertThat(compilationResult.kspGeneratedSources.find { it.name == "FooLenses.kt" })
                    .usingCharset(StandardCharsets.UTF_8).hasContent(
                        """
                        |// GENERATED by fritz2 - NEVER CHANGE CONTENT MANUALLY!
                        |package dev.fritz2.lenstest
                        |
                        |import dev.fritz2.core.Lens
                        |import dev.fritz2.core.lensOf
                        |import kotlin.String
                        |
                        |public fun <T> Foo.Companion.bar(): Lens<Foo<T>, T> = lensOf(
                        |    "bar",
                        |    { it.bar },
                        |    { p, v -> p.copy(bar = v)}
                        |  )
                        |
                        |public fun <PARENT, T> Lens<PARENT, Foo<T>>.bar(): Lens<PARENT, T> = this + Foo.bar()
                        |
                        |public fun <T> Foo.Companion.baz(): Lens<Foo<T>, String> = lensOf(
                        |    "baz",
                        |    { it.baz },
                        |    { p, v -> p.copy(baz = v)}
                        |  )
                        |
                        |public fun <PARENT, T> Lens<PARENT, Foo<T>>.baz(): Lens<PARENT, String> = this + Foo.baz()
                        """.trimMargin()
                    )
            },
            {
                assertThat(compilationResult.kspGeneratedSources.find { it.name == "BarLenses.kt" })
                    .usingCharset(StandardCharsets.UTF_8).hasContent(
                        """
                        |// GENERATED by fritz2 - NEVER CHANGE CONTENT MANUALLY!
                        |package dev.fritz2.lenstest
                        |
                        |import dev.fritz2.core.Lens
                        |import dev.fritz2.core.lensOf
                        |
                        |public fun <T, E> Bar.Companion.foo(): Lens<Bar<T, E>, T> = lensOf(
                        |    "foo",
                        |    { it.foo },
                        |    { p, v -> p.copy(foo = v)}
                        |  )
                        |
                        |public fun <PARENT, T, E> Lens<PARENT, Bar<T, E>>.foo(): Lens<PARENT, T> = this + Bar.foo()
                        |
                        |public fun <T, E> Bar.Companion.fooBar(): Lens<Bar<T, E>, E> = lensOf(
                        |    "fooBar",
                        |    { it.fooBar },
                        |    { p, v -> p.copy(fooBar = v)}
                        |  )
                        |
                        |public fun <PARENT, T, E> Lens<PARENT, Bar<T, E>>.fooBar(): Lens<PARENT, E> = this + Bar.fooBar()
                        """.trimMargin()
                    )
            }
        )
    }

    /**
     * See use case: https://github.com/jwstegemann/fritz2/issues/480
     */
    @ExperimentalPathApi
    @Test
    fun `lenses with nullable generic property works`() {
        val kotlinSource = SourceFile.kotlin(
            "dataClassesForLensesTests.kt", """
                package dev.fritz2.lenstest

                import dev.fritz2.core.Lenses

                @Lenses
                data class Data<T> (val item : T? = null) {
                    companion object
                }
            """
        )

        val compilationResult = compileSource(kotlinSource)

        assertAll(
            { assertThat(compilationResult.exitCode).isEqualTo(KotlinCompilation.ExitCode.OK) },
            {
                assertThat(compilationResult.kspGeneratedSources.find { it.name == "DataLenses.kt" })
                    .usingCharset(StandardCharsets.UTF_8).hasContent(
                        """
                        |// GENERATED by fritz2 - NEVER CHANGE CONTENT MANUALLY!
                        |package dev.fritz2.lenstest
                        |
                        |import dev.fritz2.core.Lens
                        |import dev.fritz2.core.lensOf
                        |
                        |public fun <T> Data.Companion.item(): Lens<Data<T>, T?> = lensOf(
                        |    "item",
                        |    { it.item },
                        |    { p, v -> p.copy(item = v)}
                        |  )
                        |
                        |public fun <PARENT, T> Lens<PARENT, Data<T>>.item(): Lens<PARENT, T?> = this + Data.item()
                        """.trimMargin()
                    )
            }
        )
    }

    @ExperimentalPathApi
    @Suppress("UNUSED_PARAMETER")
    @ParameterizedTest(name = "{index}: {0}")
    @MethodSource("getNoneImplementingSealedTypes")
    fun `warning occurs if there are no implementing children of a sealed base type`(
        description: String,
        kotlinSource: SourceFile
    ) {
        val compilationResult = compileSource(kotlinSource)

        assertAll(
            { assertThat(compilationResult.exitCode).isEqualTo(KotlinCompilation.ExitCode.OK) },
            { assertThat(compilationResult.messages).contains("There are no subclasses for") }
        )
    }

    @ExperimentalPathApi
    @Suppress("UNUSED_PARAMETER")
    @ParameterizedTest(name = "{index}: {0}")
    @MethodSource("getFalsyImplementingSealedChildren")
    fun `error occurs if not all implementing children of a sealed base type are data classes`(
        description: String,
        kotlinSource: SourceFile
    ) {
        val compilationResult = compileSource(kotlinSource)

        assertAll(
            { assertThat(compilationResult.exitCode).isEqualTo(KotlinCompilation.ExitCode.COMPILATION_ERROR) },
            { assertThat(compilationResult.messages).contains("The following children are no data classes") }
        )
    }

    @ExperimentalPathApi
    @Suppress("UNUSED_PARAMETER")
    @DisplayName("validate NoLens annotation in sealed base class or interface will not create lens for annotated properties")
    @ParameterizedTest(name = "{index}: {0}")
    @MethodSource("createNoLensAnnotatedClasses")
    fun validateNoLensAnnotationWorks(description: String, kotlinSource: SourceFile, expectedCode: String) {
        val compilationResult = compileSource(kotlinSource)

        assertAll(
            { assertThat(compilationResult.exitCode).isEqualTo(KotlinCompilation.ExitCode.OK) },
            {
                assertThat(compilationResult.kspGeneratedSources.find { it.name == "FrameworkLenses.kt" })
                    .usingCharset(StandardCharsets.UTF_8)
                    .hasContent(expectedCode)
            }
        )
    }

    companion object {
        private val validCodeForSealedHierarchies = """
            |// GENERATED by fritz2 - NEVER CHANGE CONTENT MANUALLY!
            |package dev.fritz2.lenstest
            |
            |import dev.fritz2.core.Lens
            |import dev.fritz2.core.lensForUpcasting
            |import dev.fritz2.core.lensOf
            |import kotlin.Int
            |import kotlin.String
            |
            |public fun Framework.Companion.bar(): Lens<Framework, Int> = lensOf(
            |    "bar",
            |    { parent ->
            |        when(parent) {
            |            is Fritz2 -> parent.bar
            |            is Spring -> parent.bar
            |        }
            |    },
            |    { parent, value ->
            |        when(parent) {
            |            is Fritz2 -> parent.copy(bar = value)
            |            is Spring -> parent.copy(bar = value)
            |        }
            |    }
            |)
            |
            |public fun <PARENT> Lens<PARENT, Framework>.bar(): Lens<PARENT, Int> = this + Framework.bar()
            |
            |public fun Framework.Companion.foo(): Lens<Framework, String> = lensOf(
            |    "foo",
            |    { parent ->
            |        when(parent) {
            |            is Fritz2 -> parent.foo
            |            is Spring -> parent.foo
            |        }
            |    },
            |    { parent, value ->
            |        when(parent) {
            |            is Fritz2 -> parent.copy(foo = value)
            |            is Spring -> parent.copy(foo = value)
            |        }
            |    }
            |)
            |
            |public fun <PARENT> Lens<PARENT, Framework>.foo(): Lens<PARENT, String> = this + Framework.foo()
            |
            |public fun Framework.Companion.fooBar(): Lens<Framework, MyType> = lensOf(
            |    "fooBar",
            |    { parent ->
            |        when(parent) {
            |            is Fritz2 -> parent.fooBar
            |            is Spring -> parent.fooBar
            |        }
            |    },
            |    { parent, value ->
            |        when(parent) {
            |            is Fritz2 -> parent.copy(fooBar = value)
            |            is Spring -> parent.copy(fooBar = value)
            |        }
            |    }
            |)
            |
            |public fun <PARENT> Lens<PARENT, Framework>.fooBar(): Lens<PARENT, MyType> = this + Framework.fooBar()
            |
            |public fun Framework.Companion.baz(): Lens<Framework, MyGenericType<Int>> = lensOf(
            |    "baz",
            |    { parent ->
            |        when(parent) {
            |            is Fritz2 -> parent.baz
            |            is Spring -> parent.baz
            |        }
            |    },
            |    { parent, value ->
            |        when(parent) {
            |            is Fritz2 -> parent.copy(baz = value)
            |            is Spring -> parent.copy(baz = value)
            |        }
            |    }
            |)
            |
            |public fun <PARENT> Lens<PARENT, Framework>.baz(): Lens<PARENT, MyGenericType<Int>> = this + Framework.baz()
            |
            |public fun Framework.Companion.fritz2(): Lens<Framework, Fritz2> = lensForUpcasting<Framework,Fritz2>()
            |
            |public fun Framework.Companion.spring(): Lens<Framework, Spring> = lensForUpcasting<Framework,Spring>()
            """.trimMargin()

        @JvmStatic
        fun createValidGeneratedLenses() = listOf(
            arguments(
                "data class",
                SourceFile.kotlin(
                    "dataClassesForLensesTests.kt",
                    """
                        package dev.fritz2.lenstest
        
                        import dev.fritz2.core.Lenses
        
                        class MyType
                        class MyGenericType<T>
        
                        @Lenses
                        data class Framework(
                            val bar: Int,
                            val foo: String,
                            val fooBar: MyType,
                            val baz: MyGenericType<Int>
                        ) {
                            companion object
                        }
                    """
                ),
                """
                |// GENERATED by fritz2 - NEVER CHANGE CONTENT MANUALLY!
                |package dev.fritz2.lenstest
                |
                |import dev.fritz2.core.Lens
                |import dev.fritz2.core.lensOf
                |import kotlin.Int
                |import kotlin.String
                |
                |public fun Framework.Companion.bar(): Lens<Framework, Int> = lensOf(
                |    "bar",
                |    { it.bar },
                |    { p, v -> p.copy(bar = v)}
                |  )
                |
                |public fun <PARENT> Lens<PARENT, Framework>.bar(): Lens<PARENT, Int> = this + Framework.bar()
                |
                |public fun Framework.Companion.foo(): Lens<Framework, String> = lensOf(
                |    "foo",
                |    { it.foo },
                |    { p, v -> p.copy(foo = v)}
                |  )
                |
                |public fun <PARENT> Lens<PARENT, Framework>.foo(): Lens<PARENT, String> = this + Framework.foo()
                |
                |public fun Framework.Companion.fooBar(): Lens<Framework, MyType> = lensOf(
                |    "fooBar",
                |    { it.fooBar },
                |    { p, v -> p.copy(fooBar = v)}
                |  )
                |
                |public fun <PARENT> Lens<PARENT, Framework>.fooBar(): Lens<PARENT, MyType> = this + Framework.fooBar()
                |
                |public fun Framework.Companion.baz(): Lens<Framework, MyGenericType<Int>> = lensOf(
                |    "baz",
                |    { it.baz },
                |    { p, v -> p.copy(baz = v)}
                |  )
                |
                |public fun <PARENT> Lens<PARENT, Framework>.baz(): Lens<PARENT, MyGenericType<Int>> = this + Framework.baz()
                """.trimMargin()
            ),
            arguments(
                "sealed class",
                SourceFile.kotlin(
                    "sealedClassesForLensesTests.kt",
                    """
                            package dev.fritz2.lenstest
            
                            import dev.fritz2.core.Lenses
            
                            class MyType
                            class MyGenericType<T>
            
                            @Lenses
                            sealed class Framework(
                                val bar: Int,
                                val foo: String
                            ) {
                                abstract val fooBar: MyType
                                abstract val baz: MyGenericType<Int>
                                companion object
                            }
    
                            data class Fritz2 (
                                override val bar: Int,
                                override val foo: String,
                                override val fooBar: MyType,
                                override val baz: MyGenericType<Int>,
                                val usesFlows: Boolean,
                            ) : Framework()
    
                            data class Spring (
                                override val bar: Int,
                                override val foo: String,
                                override val fooBar: MyType,
                                override val baz: MyGenericType<Int>,
                                val someOtherAspect: Any,
                            ) : Framework()
                        """
                ),
                validCodeForSealedHierarchies
            ),
            arguments(
                "sealed interface",
                SourceFile.kotlin(
                    "sealedInterfacesForLensesTests.kt",
                    """
                            package dev.fritz2.lenstest
            
                            import dev.fritz2.core.Lenses
            
                            class MyType
                            class MyGenericType<T>
            
                            @Lenses
                            sealed interface Framework {
                                val bar: Int
                                val foo: String
                                val fooBar: MyType
                                val baz: MyGenericType<Int>
                                
                                companion object
                            }

                            data class Fritz2 (
                                override val bar: Int,
                                override val foo: String,
                                override val fooBar: MyType,
                                override val baz: MyGenericType<Int>,
                                val usesFlows: Boolean,
                            ) : Framework
    
                            data class Spring (
                                override val bar: Int,
                                override val foo: String,
                                override val fooBar: MyType,
                                override val baz: MyGenericType<Int>,
                                val someOtherAspect: Any,
                            ) : Framework
                        """
                ),
                validCodeForSealedHierarchies
            )
        )

        @JvmStatic
        fun createValidGeneratedTypingLenses() = listOf(
            arguments(
                "data class as child of sealed class",
                SourceFile.kotlin(
                    "dataClassesWithSealedParentForLensesTests.kt",
                    """
                        package dev.fritz2.lenstest
        
                        import dev.fritz2.core.Lenses

                        sealed class Framework {
                            abstract val bar: Int
                        }

                        @Lenses
                        data class Fritz2 (
                            override val bar: Int,
                        ) : Framework() {
                            companion object
                        }
                    """
                ),
                """
                |// GENERATED by fritz2 - NEVER CHANGE CONTENT MANUALLY!
                |package dev.fritz2.lenstest
                |
                |import dev.fritz2.core.Lens
                |import dev.fritz2.core.lensOf
                |import kotlin.Int
                |
                |public fun Fritz2.Companion.bar(): Lens<Fritz2, Int> = lensOf(
                |    "bar",
                |    { it.bar },
                |    { p, v -> p.copy(bar = v)}
                |  )
                |
                |public fun <PARENT> Lens<PARENT, Fritz2>.bar(): Lens<PARENT, Int> = this + Fritz2.bar()
                |
                |public fun Fritz2.Companion.framework(): Lens<Fritz2, Framework> = lensOf(
                |    "",
                |    { it },
                |    { _, v -> v as Fritz2 }
                |)
                """.trimMargin()
            ),
            arguments(
                "data class as child of sealed interface",
                SourceFile.kotlin(
                    "dataClassesWithSealedParentForLensesTests.kt",
                    """
                        package dev.fritz2.lenstest
        
                        import dev.fritz2.core.Lenses

                        sealed interface Framework {
                            val bar: Int
                        }

                        @Lenses
                        data class Fritz2 (
                            override val bar: Int,
                        ) : Framework {
                            companion object
                        }
                    """
                ),
                """
                |// GENERATED by fritz2 - NEVER CHANGE CONTENT MANUALLY!
                |package dev.fritz2.lenstest
                |
                |import dev.fritz2.core.Lens
                |import dev.fritz2.core.lensOf
                |import kotlin.Int
                |
                |public fun Fritz2.Companion.bar(): Lens<Fritz2, Int> = lensOf(
                |    "bar",
                |    { it.bar },
                |    { p, v -> p.copy(bar = v)}
                |  )
                |
                |public fun <PARENT> Lens<PARENT, Fritz2>.bar(): Lens<PARENT, Int> = this + Fritz2.bar()
                |
                |public fun Fritz2.Companion.framework(): Lens<Fritz2, Framework> = lensOf(
                |    "",
                |    { it },
                |    { _, v -> v as Fritz2 }
                |)
                """.trimMargin()
            ),
        )

        @JvmStatic
        fun getFalseAnnotatedEntities(): List<Arguments> {
            val resultForSimpleClass = Arguments.of(
                SourceFile.kotlin(
                    "SimpleClass.kt", """
                package dev.fritz2.lenstest

                import dev.fritz2.core.Lenses

                @Lenses
                class Foo
            """
                )
            )

            val resultForInterface = Arguments.of(
                SourceFile.kotlin(
                    "Interface.kt", """
                package dev.fritz2.lenstest

                import dev.fritz2.core.Lenses

                @Lenses
                interface Foo
            """
                )
            )

            val resultForObject = Arguments.of(
                SourceFile.kotlin(
                    "Object.kt", """
                package dev.fritz2.lenstest

                import dev.fritz2.core.Lenses

                @Lenses
                object Foo
            """
                )
            )

            return listOf(resultForSimpleClass, resultForInterface, resultForObject)
        }

        @JvmStatic
        fun createEmptySealedTypes() = listOf(
            arguments(
                "empty sealed class",
                SourceFile.kotlin(
                    "emptySealedTypes.kt",
                    """
                        package dev.fritz2.lenstest
        
                        import dev.fritz2.core.Lenses
                        import dev.fritz2.core.Lens
                        import dev.fritz2.core.NoLens
        
                        @Lenses
                        sealed class Foo(
                            @NoLens val alsoIgnored: String,
                            protected val ignored: Int
                        ) {
                            companion object
                        }

                        @Lens
                        data class FooImpl (
                            val something: String
                        ) : Foo {
                            companion object
                        }
                    """
                ),
                """
                |// GENERATED by fritz2 - NEVER CHANGE CONTENT MANUALLY!
                |package dev.fritz2.lenstest
                |
                |import dev.fritz2.core.Lens
                |import dev.fritz2.core.lensForUpcasting
                |
                |public fun Foo.Companion.fooImpl(): Lens<Foo, FooImpl> = lensForUpcasting<Foo,FooImpl>()
                """.trimMargin()
            ),
            arguments(
                "empty sealed interface",
                SourceFile.kotlin(
                    "emptySealedTypes.kt",
                    """
                        package dev.fritz2.lenstest
        
                        import dev.fritz2.core.Lenses
                        import dev.fritz2.core.Lens
                        import dev.fritz2.core.NoLens
        
                        @Lenses
                        sealed interface Foo {
                            protected val ignored: Int
                            
                            @NoLens
                            val alsoIgnored: String
                            
                            companion object
                        }

                        @Lens
                        data class FooImpl (
                            val something: String
                        ) : Foo {
                            companion object
                        }
                    """
                ),
                """
                |// GENERATED by fritz2 - NEVER CHANGE CONTENT MANUALLY!
                |package dev.fritz2.lenstest
                |
                |import dev.fritz2.core.Lens
                |import dev.fritz2.core.lensForUpcasting
                |
                |public fun Foo.Companion.fooImpl(): Lens<Foo, FooImpl> = lensForUpcasting<Foo,FooImpl>()
                """.trimMargin()
            ),
        )

        @JvmStatic
        fun createCodeWithoutCompanion() = listOf(
            arguments(
                "data class",
                SourceFile.kotlin(
                    "dataClassesForLensesTests.kt",
                    """
                        package dev.fritz2.lenstest
        
                        import dev.fritz2.core.Lenses
        
                        @Lenses
                        data class Foo(val bar: Int)
                        // no companion declared 
                    """
                )
            ),
            arguments(
                "sealed class",
                SourceFile.kotlin(
                    "dataClassesForLensesTests.kt",
                    """
                        package dev.fritz2.lenstest
        
                        import dev.fritz2.core.Lenses
        
                        @Lenses
                        sealed class Foo(val bar: Int)
                        // no companion declared 
                    """
                )
            ),
            arguments(
                "sealed interface",
                SourceFile.kotlin(
                    "dataClassesForLensesTests.kt",
                    """
                        package dev.fritz2.lenstest
        
                        import dev.fritz2.core.Lenses
        
                        @Lenses
                        sealed interface Foo {
                            val bar: Int
                            // no companion declared 
                        }
                    """
                )
            )
        )

        @JvmStatic
        fun getNameBlockingDataClasses() = listOf(
            arguments(
                "property in data class",
                "Foo",
                SourceFile.kotlin(
                    "dataClassesForLensesTests.kt",
                    """
                            package dev.fritz2.lenstest
            
                            import dev.fritz2.core.Lenses
            
                            @Lenses
                            data class Foo(val bar: Int, val foo: Int) {
                                companion object {
                                    val bar = 42 // block name for lens creation!
                                    // foo() is available though
                                }
                            }
                        """
                )
            ),
            arguments(
                "function in data class",
                "Foo",
                SourceFile.kotlin(
                    "dataClassesForLensesTests.kt",
                    """
                            package dev.fritz2.lenstest
            
                            import dev.fritz2.core.Lenses
            
                            @Lenses
                            data class Foo(val bar: Int, val foo: Int) {
                                companion object {
                                    fun bar() = 42 // block name for lens creation!
                                    // foo() is available though
                                }
                            }
                        """
                )
            ),
            arguments(
                "function and properties in base sealed class",
                "Foo",
                SourceFile.kotlin(
                    "dataClassesForLensesTests.kt",
                    """
                            package dev.fritz2.lenstest
            
                            import dev.fritz2.core.Lenses
            
                            @Lenses
                            sealed class Foo {
                                val bar: Int
                                val foo: Int
                                companion object {
                                    fun fooImpl() = 42 // blocks up-typing lens
                                    val fooOther = 42 // blocks up-typing lens
                                }
                            }

                            data class FooImpl(
                                override val bar: Int,
                                override val foo: Int
                            ) : Foo()

                            data class FooOther(
                                override val bar: Int,
                                override val foo: Int
                            ) : Foo()
                        """
                )
            ),
            arguments(
                "function and properties in base sealed interface",
                "Foo",
                SourceFile.kotlin(
                    "dataClassesForLensesTests.kt",
                    """
                            package dev.fritz2.lenstest
            
                            import dev.fritz2.core.Lenses
            
                            @Lenses
                            sealed interface Foo {
                                val bar: Int
                                val foo: Int
                                companion object {
                                    fun fooImpl() = 42 // blocks up-typing lens
                                    val fooOther = 42 // blocks up-typing lens
                                }
                            }

                            data class FooImpl(
                                override val bar: Int,
                                override val foo: Int
                            ) : Foo

                            data class FooOther(
                                override val bar: Int,
                                override val foo: Int
                            ) : Foo
                        """
                )
            ),
            arguments(
                "function and properties in derived class from sealed base",
                "FooImpl", // FooOther will appear too, but one is enough to check!
                SourceFile.kotlin(
                    "dataClassesForLensesTests.kt",
                    """
                            package dev.fritz2.lenstest
            
                            import dev.fritz2.core.Lenses
            
                            sealed interface Foo {
                                val bar: Int
                            }

                            @Lenses
                            data class FooImpl(
                                override val bar: Int,
                            ) : Foo {
                                companion object {
                                    fun foo() = 42 // blocks down-typing lens
                                }
                            }

                            @Lenses
                            data class FooOther(
                                override val bar: Int,
                            ) : Foo {
                                companion object {
                                    val foo = 42 // blocks down-typing lens
                                }
                            }
                        """
                )
            ),
        )

        @JvmStatic
        fun getFalsyImplementingSealedChildren() = listOf(
            arguments(
                "sealed class",
                SourceFile.kotlin(
                    "dataClassesForLensesTests.kt",
                    """
                            package dev.fritz2.lenstest
            
                            import dev.fritz2.core.Lenses
            
                            class MyType
                            class MyGenericType<T>
            
                            @Lenses
                            sealed class Framework {
                                abstract val bar: Int
                                companion object
                            }
    
                            // no data class!!!
                            class Fritz2 (
                                override val bar: Int,
                                val usesFlows: Boolean,
                            ) : Framework()
    
                            data class Spring (
                                override val bar: Int,
                                val someOtherAspect: Any,
                            ) : Framework()
                        """
                )
            ),
            arguments(
                "sealed interface",
                SourceFile.kotlin(
                    "dataClassesForLensesTests.kt",
                    """
                            package dev.fritz2.lenstest
            
                            import dev.fritz2.core.Lenses
            
                            class MyType
                            class MyGenericType<T>
            
                            @Lenses
                            sealed interface Framework {
                                val bar: Int
                                
                                companion object
                            }

                            // no data class!!!
                            class Fritz2 (
                                override val bar: Int,
                                val usesFlows: Boolean,
                            ) : Framework
    
                            data class Spring (
                                override val bar: Int,
                                val someOtherAspect: Any,
                            ) : Framework
                        """
                )
            )
        )

        @JvmStatic
        fun getNoneImplementingSealedTypes() = listOf(
            arguments(
                "sealed class",
                SourceFile.kotlin(
                    "dataClassesForLensesTests.kt",
                    """
                            package dev.fritz2.lenstest
            
                            import dev.fritz2.core.Lenses
            
                            class MyType
                            class MyGenericType<T>
            
                            @Lenses
                            sealed class Framework {
                                abstract val bar: Int
                                companion object
                            }
                        """
                )
            ),
            arguments(
                "sealed interface",
                SourceFile.kotlin(
                    "dataClassesForLensesTests.kt",
                    """
                            package dev.fritz2.lenstest
            
                            import dev.fritz2.core.Lenses
            
                            class MyType
                            class MyGenericType<T>
            
                            @Lenses
                            sealed interface Framework {
                                val bar: Int
                                
                                companion object
                            }
                        """
                )
            )
        )

        private val validCodeForNoLensResult = """
            |// GENERATED by fritz2 - NEVER CHANGE CONTENT MANUALLY!
            |package dev.fritz2.lenstest
            |
            |import dev.fritz2.core.Lens
            |import dev.fritz2.core.lensForUpcasting
            |import dev.fritz2.core.lensOf
            |import kotlin.String
            |
            |public fun Framework.Companion.foo(): Lens<Framework, String> = lensOf(
            |    "foo",
            |    { parent ->
            |        when(parent) {
            |            is Fritz2 -> parent.foo
            |            is Spring -> parent.foo
            |        }
            |    },
            |    { parent, value ->
            |        when(parent) {
            |            is Fritz2 -> parent.copy(foo = value)
            |            is Spring -> parent.copy(foo = value)
            |        }
            |    }
            |)
            |
            |public fun <PARENT> Lens<PARENT, Framework>.foo(): Lens<PARENT, String> = this + Framework.foo()
            |
            |public fun Framework.Companion.fritz2(): Lens<Framework, Fritz2> =
            |    lensForUpcasting<Framework,Fritz2>()
            |
            |public fun Framework.Companion.spring(): Lens<Framework, Spring> =
            |    lensForUpcasting<Framework,Spring>()
            """.trimMargin()


        @JvmStatic
        fun createNoLensAnnotatedClasses() = listOf(
            arguments(
                "sealed class",
                SourceFile.kotlin(
                    "sealedClassesForNoLensesTests.kt",
                    """
                            package dev.fritz2.lenstest
            
                            import dev.fritz2.core.Lenses
            
                            @Lenses
                            sealed class Framework(
                                @NoLens val ignore: String
                            ) {
                                @NoLens
                                val alsoIgnore: String
                                abstract val foo: String
                                companion object
                            }
    
                            data class Fritz2 (
                                override val foo: String,
                            ) : Framework {
                                override val ignore: String = "Fritz2"
                                override val alsoIgnore: String = "Fritz2"
                            }
    
                            data class Spring (
                                override val foo: String,
                            ) : Framework {
                                override val ignore: String = "Spring"
                                override val alsoIgnore: String = "Fritz2"
                            }
                        """
                ),
                validCodeForNoLensResult
            ),
            arguments(
                "sealed interface",
                SourceFile.kotlin(
                    "sealedInterfacesForNoLensesTests.kt",
                    """
                            package dev.fritz2.lenstest
            
                            import dev.fritz2.core.Lenses
            
                            @Lenses
                            sealed interface Framework {
                                @NoLens
                                val ignore: String
                                val foo: String
                                
                                companion object
                            }

                            data class Fritz2 (
                                override val foo: String,
                            ) : Framework {
                                override val ignore: String = "Fritz2"
                            }
    
                            data class Spring (
                                override val foo: String,
                            ) : Framework {
                                override val ignore: String = "Spring"
                            }
                        """
                ),
                validCodeForNoLensResult
            )
        )
    }
}