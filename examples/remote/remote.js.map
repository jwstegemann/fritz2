{"version":3,"file":"remote.js","mappings":"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","sources":["webpack://remote/webpack/universalModuleDefinition","webpack://remote/../../../../core/src/jsMain/kotlin/dev/fritz2/core/RenderContext.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/util/Standard.kt","webpack://remote/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Tags.kt","webpack://remote/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Mount.kt","webpack://remote/../../../../core/src/commonMain/kotlin/dev/fritz2/core/Id.kt","webpack://remote/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Events.kt","webpack://remote/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Foundation.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/common/src/generated/_Arrays.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/text/Strings.kt","webpack://remote/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Handlers.kt","webpack://remote/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Job.kt","webpack://remote/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Listener.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/Collections.kt","webpack://remote/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Scope.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/Maps.kt","webpack://remote/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Store.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/operators/Merge.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/builtins/Library.kt","webpack://remote/../../../../core/src/jsMain/kotlin/dev/fritz2/remote/Http.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/libraries/stdlib/js/src/org.w3c/org.w3c.fetch.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/text/StringBuilder.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/common/src/generated/_Maps.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/internal/SafeCollector.common.kt","webpack://remote/../../../../core/src/jsMain/kotlin/dev/fritz2/core/Attributes.kt","webpack://remote/../../../../examples/remote/src/jsMain/kotlin/dev/fritz2/examples/remote/Remote.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/js/math.polyfills.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/globalThis.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/math.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/ArrayBuffer.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/js.arrays/fill.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/coroutines/CoroutineContext.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/src/js-builtin-sources/libraries/stdlib/jvm/builtins/Number.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/common/src/generated/_Collections.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/common/src/generated/_Ranges.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/common/src/generated/_Strings.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/util/Preconditions.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/text/stringJs.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/builtins/Char.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/builtins/Enum.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/builtins/Primitives.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/BitMask.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/arrays.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/bitUtils.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/charSequenceJs.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/CharCode.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/numberConversion.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/unsigned/src/kotlin/UShort.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/collectionsHacks.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/compareTo.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/coreRuntime.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/typeCheckUtils.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/hacks.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/longJs.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/NumbersJs.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/metadataUtils.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/generated/_ArraysJs.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/kotlin.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/generated/_DigitChars.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/Unit.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collectionJs.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/HashMap.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/AbstractMutableCollection.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/AbstractMutableList.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/AbstractMutableMap.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/AbstractMutableSet.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/ArrayFunctions.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/ArrayList.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/InternalHashMap.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/HashMapEntry.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/HashSet.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/LinkedHashMap.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/LinkedHashSet.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/coroutines/CoroutineImpl.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/coroutines/InterceptedCoroutine.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/coroutines/cancellation/CancellationException.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/coroutines/intrinsics/IntrinsicsJs.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/exceptions.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/random/PlatformRandom.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/math.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/random/Random.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/random/XorWowRandom.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/reflect/KClassImpl.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/reflect/primitives.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/reflect/reflection.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/text/StringBuilderJs.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/text/charJs.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/generated/_WhitespaceChars.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/text/numberConversions.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/generated/_ComparisonsJs.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/AbstractCollection.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/AbstractList.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/AbstractMap.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/AbstractSet.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/ArrayDeque.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/IndexedValue.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/Sets.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/coroutines/ContinuationInterceptor.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/coroutines/CoroutineContextImpl.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/coroutines/intrinsics/Intrinsics.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/text/Appendable.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/text/Indent.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/util/Lazy.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/util/Result.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/util/Tuples.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/util/HashCode.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/coroutines/Continuation.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/InternalMap.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/coroutineInternalJS.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/MutableCollections.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/generated/_CollectionsJs.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/noPackageHacks.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/text/StringNumberConversions.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/common/src/generated/_Sequences.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/Sequences.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/Iterables.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/throwableExtensions.kt","webpack://remote/../../../../../examples/remote/build/compileSync/js/main/productionExecutable/kotlin/libraries/stdlib/js/src/kotlinx/dom/Mutations.kt","webpack://remote/../../../../../../../../../opt/buildAgent/work/711ef0d9c7c28b00/atomicfu/src/commonMain/kotlin/kotlinx/atomicfu/AtomicFU.common.kt","webpack://remote/../../../../../../../../../opt/buildAgent/work/711ef0d9c7c28b00/atomicfu/src/commonMain/kotlin/kotlinx/atomicfu/Trace.common.kt","webpack://remote/../../../../../../../../../opt/buildAgent/work/711ef0d9c7c28b00/atomicfu/src/jsAndWasmSharedMain/kotlin/kotlinx/atomicfu/AtomicFU.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/Job.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/channels/Channel.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/AbstractCoroutine.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/Builders.common.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/CancellableContinuation.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/CancellableContinuationImpl.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/internal/DispatchedTask.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/CompletionState.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/CoroutineDispatcher.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/CoroutineExceptionHandler.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/CoroutineScope.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/CoroutineStart.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/EventLoop.common.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/internal/ThreadLocal.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/Exceptions.common.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/JobSupport.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/internal/Concurrent.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/internal/LinkedList.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/internal/Synchronized.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/MainCoroutineDispatcher.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/NonCancellable.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/Supervisor.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/Unconfined.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/Yield.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/internal/DispatchedContinuation.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/channels/BufferOverflow.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/channels/BufferedChannel.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/internal/ConcurrentLinkedList.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/internal/InlineList.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/channels/ChannelCoroutine.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/channels/Channels.common.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/channels/ConflatedBufferedChannel.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/channels/Produce.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/Builders.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/Channels.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/Flow.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/StateFlow.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/internal/AbstractSharedFlow.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/internal/ChannelFlow.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/internal/ThreadContext.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/internal/Combine.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/internal/FlowCoroutine.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/internal/Merge.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/internal/NopCollector.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/internal/NullSurrogate.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/internal/SendingCollector.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/operators/Distinct.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/operators/Emitters.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/operators/Errors.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/operators/Share.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/operators/Transform.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/flow/terminal/Collect.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/internal/Concurrent.common.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/internal/CoroutineExceptionHandlerImpl.common.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/internal/CoroutineExceptionHandlerImpl.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/internal/OnUndeliveredElement.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/internal/Scopes.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/internal/Symbol.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/internal/SystemProps.common.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/internal/SystemProps.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/intrinsics/Cancellable.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/intrinsics/Undispatched.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/selects/Select.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/sync/Mutex.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/common/src/sync/Semaphore.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/js/src/CoroutineContext.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/js/src/Window.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/js/src/Debug.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/js/src/JSDispatcher.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/js/src/internal/CoroutineExceptionHandlerImpl.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmJsShared/src/EventLoop.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmJsShared/src/internal/JSDispatcher.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/CoroutineContext.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/Dispatchers.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/Exceptions.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/SchedulerTask.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/flow/internal/FlowExceptions.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/flow/internal/SafeCollector.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/internal/LocalAtomics.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/jsAndWasmShared/src/internal/StackTraceRecovery.kt","webpack://remote/../../../../../../../../../mnt/agent/work/44ec6e850d5c63f0/kotlinx-coroutines-core/js/src/Promise.kt","webpack://remote/webpack/bootstrap","webpack://remote/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"remote\"] = factory();\n\telse\n\t\troot[\"remote\"] = factory();\n})(globalThis, () => {\nreturn ","@file:Suppress(\"unused\")\n\npackage dev.fritz2.core\n\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.cancelChildren\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.scan\nimport kotlinx.dom.clear\nimport org.w3c.dom.*\nimport kotlin.reflect.KClass\n\n/**\n * Context for rendering static and dynamical content\n */\ninterface RenderContext : WithJob, WithScope {\n\n    /**\n     * Renders the data of a [Flow] as [Tag]s to the DOM.\n     *\n     * @receiver [Flow] containing the data\n     * @param into target to mount content to. If not set a child div is added to the [Tag] this method is called on\n     * @param content [RenderContext] for rendering the data to the DOM\n     */\n    fun <V> Flow<V>.render(into: Tag<HTMLElement>? = null, content: Tag<*>.(V) -> Unit) {\n        val target = into?.apply(SET_MOUNT_POINT_DATA_ATTRIBUTE)\n            ?: div(MOUNT_POINT_STYLE_CLASS, content = SET_MOUNT_POINT_DATA_ATTRIBUTE)\n\n        val mountContext = MountContext(Job(job), target)\n\n        mountSimple(job, this) {\n            mountContext.runBeforeUnmounts()\n            mountContext.job.cancelChildren()\n            target.domNode.clear()\n            content(mountContext, it)\n            mountContext.runAfterMounts()\n        }\n    }\n\n    /**\n     * Renders the data of a [Flow] only if the given [predicate] is true.\n     *\n     * Example:\n     * ```kotlin\n     * data class Delivery(\n     *     val state: String,\n     *     val isVisible: Boolean\n     * )\n     *\n     * val storedDelivery = storeOf(Delivery(\"in production\", true))\n     *\n     * storedDelivery.data.renderIf(Delivery::isVisible) { delivery ->\n     *     // This whole block might be re-rendered if the state is changed! (read on)\n     *     p { +\"The state of your delivery is ${delivery.state}\" }\n     * }\n     * ```\n     *\n     * Beware that the data value [V] and its changes are still handled reactively inside the [content] expression!\n     *\n     * So while the [predicate] may remain stably `true`, some other aspect of the model [V] may change in between.\n     * As a result, the whole [content]-block would be re-rendered accordingly of course!\n     *\n     * Example:\n     * ```kotlin\n     * val storedDelivery = object : Store<Delivery> by storeOf(Delivery(\"in production\", true)) {\n     *     val proceed = handle<String> { delivery, newState ->\n     *         // we dont change the visibility, so the condition will remain the same, while the state changes!\n     *         delivery.copy(state = newState)\n     *     }\n     * }\n     *\n     * button {\n     *     +\"Proceed to conveyed\"\n     *     clicks.map { \"conveyed\" } handledBy storedDelivery.proceed\n     * }\n     *\n     * storedDelivery.data.renderIf(Delivery::isVisible) { delivery ->\n     *     // This whole block will re re-rendered on button click above!\n     *     p { +\"The state of your delivery is ${delivery.state}\" }\n     * }\n     * ```\n     *\n     * If you want the content to only change once if the condition changes (i.e. switches from true to false or back)\n     * you need to rely on an appropriate [Flow]-function like\n     * [distinctUntilChangedBy](https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/distinct-until-changed-by.html)\n     *\n     * Example:\n     * ```kotlin\n     * storedDelivery.data.distinctUntilChangedBy(Delivery::isVisible).renderIf(Delivery::isVisible) { delivery ->\n     *     // This wont be re-rendered if `Delivery.state` changes!\n     *     // The whole block will disappear on `Delivery.isVisible` changes to `false`,\n     *     // and appear again on `Delivery.isVisible == true`. Then with the current `state` at that moment of course!\n     *     p { +\"The state of your delivery is ${delivery.state}\" }\n     * }\n     * ```\n     *\n     * But in most cases, that is not what you really want! Strive for solutions, where the UI portions really adopt\n     * reactively. The above is a strange hybrid case, where not all state changes are reflected by the UI.\n     *\n     * @see renderTrue\n     * @see renderFalse\n     * @see renderIs\n     * @see renderNotNull\n     *\n     * @receiver [Flow] containing the data\n     * @param predicate must be true for the value to be rendered\n     * @param into target to mount content to. If not set a child div is added to the [Tag] this method is called on\n     * @param content [RenderContext] for rendering the data to the DOM\n     */\n    fun <V> Flow<V>.renderIf(\n        predicate: (V) -> Boolean,\n        into: Tag<HTMLElement>? = null,\n        content: Tag<*>.(V) -> Unit\n    ) {\n        render(into) {\n            if (predicate(it)) {\n                content(it)\n            }\n        }\n    }\n\n    /**\n     * Renders the data of a boolean [Flow] only if its value is `true`.\n     *\n     * @receiver [Flow] containing the data\n     * @param into target to mount content to. If not set a child div is added to the [Tag] this method is called on\n     * @param content [RenderContext] for rendering the data to the DOM\n     *\n     * @see renderIf\n     * @see renderFalse\n     * @see renderIs\n     * @see renderNotNull\n     */\n    fun Flow<Boolean>.renderTrue(\n        into: Tag<HTMLElement>? = null,\n        content: Tag<*>.() -> Unit\n    ) {\n        renderIf(predicate = { it }, into) { _ ->\n            content()\n        }\n    }\n\n    /**\n     * Renders the data of a boolean [Flow] only if its value is `false`.\n     *\n     * @receiver [Flow] containing the data\n     * @param into target to mount content to. If not set a child div is added to the [Tag] this method is called on\n     * @param content [RenderContext] for rendering the data to the DOM\n     *\n     * @see renderIf\n     * @see renderTrue\n     * @see renderIs\n     * @see renderNotNull\n     */\n    fun Flow<Boolean>.renderFalse(\n        into: Tag<HTMLElement>? = null,\n        content: Tag<*>.() -> Unit\n    ) {\n        renderIf(predicate = { !it }, into) { _ ->\n            content()\n        }\n    }\n\n    /**\n     * Renders the non-null data of a [Flow].\n     *\n     * @see renderIf\n     * @see renderTrue\n     * @see renderFalse\n     * @see renderIs\n     *\n     * @receiver [Flow] containing the data\n     * @param into target to mount content to. If not set a child div is added to the [Tag] this method is called on\n     * @param content [RenderContext] for rendering the data to the DOM\n     */\n    fun <V> Flow<V?>.renderNotNull(\n        into: Tag<HTMLElement>? = null,\n        content: Tag<*>.(V) -> Unit\n    ) {\n        render(into) {\n            if (it != null) {\n                content(it)\n            }\n        }\n    }\n\n    /**\n     * Renders the data of a [Flow] of type [W].\n     *\n     * @see renderIf\n     * @see renderTrue\n     * @see renderFalse\n     * @see renderNotNull\n     *\n     * @receiver [Flow] containing the data\n     * @param klass reference to the type we want to check\n     * @param into target to mount content to. If not set a child div is added to the [Tag] this method is called on\n     * @param content [RenderContext] for rendering the data to the DOM\n     */\n    @Suppress(\"UNCHECKED_CAST\")\n    fun <W : Any> Flow<*>.renderIs(\n        klass: KClass<W>,\n        into: Tag<HTMLElement>? = null,\n        content: Tag<*>.(W) -> Unit\n    ) {\n        render(into) {\n            if (klass.isInstance(it)) {\n                content(it as W)\n            }\n        }\n    }\n\n    /**\n     * Renders each element of a [Flow]s content.\n     * Internally the [Patch]es are determined using Myer's diff-algorithm.\n     * This allows the detection of moves. Keep in mind, that no [Patch] is derived,\n     * when an element stays the same, but changes its internal values.\n     *\n     * @param idProvider function to identify a unique entity in the list\n     * @param into target to mount content to. If not set a child div is added to the [Tag] this method is called on\n     * @param batch hide [into] while rendering patches. Useful to avoid flickering when you make many changes (like sorting)\n     * @param content [RenderContext] for rendering the data to the DOM\n     */\n    fun <V> Flow<List<V>>.renderEach(\n        idProvider: IdProvider<V, *>? = null,\n        into: Tag<HTMLElement>? = null,\n        batch: Boolean = false,\n        content: RenderContext.(V) -> Tag<HTMLElement>\n    ) {\n        mountPatches(into, this, batch) { upstreamValues, mountPoints ->\n            upstreamValues.scan(Pair(emptyList(), emptyList())) { acc: Pair<List<V>, List<V>>, new ->\n                Pair(acc.second, new)\n            }.map { (old, new) ->\n                Myer.diff(old, new, idProvider).map { patch ->\n                    patch.map(job) { value, newJob ->\n                        val mountPoint = BuildContext(newJob, this, scope)\n                        content(mountPoint, value).also {\n                            mountPoints[it.domNode] = mountPoint\n                        }\n                    }\n                }\n            }\n        }\n\n\n    }\n\n    /**\n     * Renders each element of a [Store]s [List] content.\n     * Internally the [Patch]es are determined using Myer's diff-algorithm.\n     * This allows the detection of moves. Keep in mind, that no [Patch] is derived,\n     * when an element stays the same, but changes its internal values.\n     *\n     * @param idProvider function to identify a unique entity in the list\n     * @param into target to mount content to. If not set a child div is added to the [Tag] this method is called on\n     * @param content [RenderContext] for rendering the data to the DOM\n     */\n    fun <V> Store<List<V>>.renderEach(\n        idProvider: IdProvider<V, *>,\n        into: Tag<HTMLElement>? = null,\n        content: RenderContext.(Store<V>) -> HtmlTag<HTMLElement>\n    ) {\n        val store = this\n        data.renderEach(idProvider, into) { value ->\n            content(store.mapByElement(value, idProvider))\n        }\n    }\n\n    /**\n     * Converts the content of a [Flow] to [String] by using [toString] method.\n     *\n     * @receiver [Flow] with content\n     * @return [Flow] with content as [String]\n     */\n    fun <T> Flow<T>.asString(): Flow<String> = this.map { it.toString() }\n\n    fun <N : Node, W : WithDomNode<N>> register(element: W, content: (W) -> Unit): W\n\n    /**\n     * Evaluates the scope context and initializes a [ScopeContext]\n     * for setting new entries to the scope.\n     *\n     * @param context to evaluate\n     */\n    private inline fun evalScope(context: (ScopeContext.() -> Unit)): Scope {\n        return ScopeContext(this@RenderContext.scope).apply(context).scope\n    }\n\n    /**\n     * Creates a custom [HtmlTag] with the provided [content].\n     *\n     * @param tagName Name of the [HtmlTag] in DOM\n     * @param content content scope for inner [HtmlTag]s\n     * @return custom [HtmlTag]\n     */\n    fun custom(\n        tagName: String,\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<Element>.() -> Unit\n    ): HtmlTag<Element> =\n        register(HtmlTag(tagName, id, baseClass, job, evalScope(scope)), content)\n\n    fun a(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLAnchorElement>.() -> Unit\n    ): HtmlTag<HTMLAnchorElement> =\n        register(HtmlTag(\"a\", id, baseClass, job, evalScope(scope)), content)\n\n    fun area(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLAreaElement>.() -> Unit\n    ): HtmlTag<HTMLAreaElement> =\n        register(HtmlTag(\"area\", id, baseClass, job, evalScope(scope)), content)\n\n    fun br(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLBRElement>.() -> Unit\n    ): HtmlTag<HTMLBRElement> =\n        register(HtmlTag(\"br\", id, baseClass, job, evalScope(scope)), content)\n\n    fun button(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLButtonElement>.() -> Unit\n    ): HtmlTag<HTMLButtonElement> =\n        register(HtmlTag(\"button\", id, baseClass, job, evalScope(scope)), content)\n\n    fun canvas(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLCanvasElement>.() -> Unit\n    ): HtmlTag<HTMLCanvasElement> =\n        register(HtmlTag(\"canvas\", id, baseClass, job, evalScope(scope)), content)\n\n    fun dl(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLDListElement>.() -> Unit\n    ): HtmlTag<HTMLDListElement> =\n        register(HtmlTag(\"dl\", id, baseClass, job, evalScope(scope)), content)\n\n    fun dt(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLSpanElement>.() -> Unit\n    ): HtmlTag<HTMLSpanElement> =\n        register(HtmlTag(\"dt\", id, baseClass, job, evalScope(scope)), content)\n\n    fun dd(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLSpanElement>.() -> Unit\n    ): HtmlTag<HTMLSpanElement> =\n        register(HtmlTag(\"dd\", id, baseClass, job, evalScope(scope)), content)\n\n    fun data(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLDataElement>.() -> Unit\n    ): HtmlTag<HTMLDataElement> =\n        register(HtmlTag(\"data\", id, baseClass, job, evalScope(scope)), content)\n\n    fun datalist(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLDataListElement>.() -> Unit\n    ): HtmlTag<HTMLDataListElement> =\n        register(HtmlTag(\"datalist\", id, baseClass, job, evalScope(scope)), content)\n\n    fun details(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLDetailsElement>.() -> Unit\n    ): HtmlTag<HTMLDetailsElement> =\n        register(HtmlTag(\"details\", id, baseClass, job, evalScope(scope)), content)\n\n    fun dialog(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLDialogElement>.() -> Unit\n    ): HtmlTag<HTMLDialogElement> =\n        register(HtmlTag(\"dialog\", id, baseClass, job, evalScope(scope)), content)\n\n    fun div(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLDivElement>.() -> Unit\n    ): HtmlTag<HTMLDivElement> =\n        register(HtmlTag(\"div\", id, baseClass, job, evalScope(scope)), content)\n\n    fun embed(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLEmbedElement>.() -> Unit\n    ): HtmlTag<HTMLEmbedElement> =\n        register(HtmlTag(\"embed\", id, baseClass, job, evalScope(scope)), content)\n\n    fun fieldset(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLFieldSetElement>.() -> Unit\n    ): HtmlTag<HTMLFieldSetElement> =\n        register(HtmlTag(\"fieldset\", id, baseClass, job, evalScope(scope)), content)\n\n    fun form(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLFormElement>.() -> Unit\n    ): HtmlTag<HTMLFormElement> =\n        register(HtmlTag(\"form\", id, baseClass, job, evalScope(scope)), content)\n\n    fun hr(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLHRElement>.() -> Unit\n    ): HtmlTag<HTMLHRElement> =\n        register(HtmlTag(\"hr\", id, baseClass, job, evalScope(scope)), content)\n\n    fun h1(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLHeadingElement>.() -> Unit\n    ): HtmlTag<HTMLHeadingElement> =\n        register(HtmlTag(\"h1\", id, baseClass, job, evalScope(scope)), content)\n\n    fun h2(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLHeadingElement>.() -> Unit\n    ): HtmlTag<HTMLHeadingElement> =\n        register(HtmlTag(\"h2\", id, baseClass, job, evalScope(scope)), content)\n\n    fun h3(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLHeadingElement>.() -> Unit\n    ): HtmlTag<HTMLHeadingElement> =\n        register(HtmlTag(\"h3\", id, baseClass, job, evalScope(scope)), content)\n\n    fun h4(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLHeadingElement>.() -> Unit\n    ): HtmlTag<HTMLHeadingElement> =\n        register(HtmlTag(\"h4\", id, baseClass, job, evalScope(scope)), content)\n\n    fun h5(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLHeadingElement>.() -> Unit\n    ): HtmlTag<HTMLHeadingElement> =\n        register(HtmlTag(\"h5\", id, baseClass, job, evalScope(scope)), content)\n\n    fun h6(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLHeadingElement>.() -> Unit\n    ): HtmlTag<HTMLHeadingElement> =\n        register(HtmlTag(\"h6\", id, baseClass, job, evalScope(scope)), content)\n\n    fun iframe(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLIFrameElement>.() -> Unit\n    ): HtmlTag<HTMLIFrameElement> =\n        register(HtmlTag(\"iframe\", id, baseClass, job, evalScope(scope)), content)\n\n    fun img(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLImageElement>.() -> Unit\n    ): HtmlTag<HTMLImageElement> =\n        register(HtmlTag(\"img\", id, baseClass, job, evalScope(scope)), content)\n\n    fun input(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLInputElement>.() -> Unit\n    ): HtmlTag<HTMLInputElement> =\n        register(HtmlTag(\"input\", id, baseClass, job, evalScope(scope)), content)\n\n    fun li(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLLIElement>.() -> Unit\n    ): HtmlTag<HTMLLIElement> =\n        register(HtmlTag(\"li\", id, baseClass, job, evalScope(scope)), content)\n\n    fun label(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLLabelElement>.() -> Unit\n    ): HtmlTag<HTMLLabelElement> =\n        register(HtmlTag(\"label\", id, baseClass, job, evalScope(scope)), content)\n\n    fun legend(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLLegendElement>.() -> Unit\n    ): HtmlTag<HTMLLegendElement> =\n        register(HtmlTag(\"legend\", id, baseClass, job, evalScope(scope)), content)\n\n    fun map(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLMapElement>.() -> Unit\n    ): HtmlTag<HTMLMapElement> =\n        register(HtmlTag(\"map\", id, baseClass, job, evalScope(scope)), content)\n\n    fun audio(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLAudioElement>.() -> Unit\n    ): HtmlTag<HTMLAudioElement> =\n        register(HtmlTag(\"audio\", id, baseClass, job, evalScope(scope)), content)\n\n    fun video(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLVideoElement>.() -> Unit\n    ): HtmlTag<HTMLVideoElement> =\n        register(HtmlTag(\"video\", id, baseClass, job, evalScope(scope)), content)\n\n    fun meter(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLMeterElement>.() -> Unit\n    ): HtmlTag<HTMLMeterElement> =\n        register(HtmlTag(\"meter\", id, baseClass, job, evalScope(scope)), content)\n\n    fun ins(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLModElement>.() -> Unit\n    ): HtmlTag<HTMLModElement> =\n        register(HtmlTag(\"ins\", id, baseClass, job, evalScope(scope)), content)\n\n    fun del(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLModElement>.() -> Unit\n    ): HtmlTag<HTMLModElement> =\n        register(HtmlTag(\"del\", id, baseClass, job, evalScope(scope)), content)\n\n    fun ol(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLOListElement>.() -> Unit\n    ): HtmlTag<HTMLOListElement> =\n        register(HtmlTag(\"ol\", id, baseClass, job, evalScope(scope)), content)\n\n    fun `object`(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLObjectElement>.() -> Unit\n    ): HtmlTag<HTMLObjectElement> =\n        register(HtmlTag(\"object\", id, baseClass, job, evalScope(scope)), content)\n\n    fun optgroup(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLOptGroupElement>.() -> Unit\n    ): HtmlTag<HTMLOptGroupElement> =\n        register(HtmlTag(\"optgroup\", id, baseClass, job, evalScope(scope)), content)\n\n    fun option(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLOptionElement>.() -> Unit\n    ): HtmlTag<HTMLOptionElement> =\n        register(HtmlTag(\"option\", id, baseClass, job, evalScope(scope)), content)\n\n    fun output(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLOutputElement>.() -> Unit\n    ): HtmlTag<HTMLOutputElement> =\n        register(HtmlTag(\"output\", id, baseClass, job, evalScope(scope)), content)\n\n    fun p(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLParagraphElement>.() -> Unit\n    ): HtmlTag<HTMLParagraphElement> =\n        register(HtmlTag(\"p\", id, baseClass, job, evalScope(scope)), content)\n\n    fun param(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLParamElement>.() -> Unit\n    ): HtmlTag<HTMLParamElement> =\n        register(HtmlTag(\"param\", id, baseClass, job, evalScope(scope)), content)\n\n    fun picture(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLPictureElement>.() -> Unit\n    ): HtmlTag<HTMLPictureElement> =\n        register(HtmlTag(\"picture\", id, baseClass, job, evalScope(scope)), content)\n\n    fun pre(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLPreElement>.() -> Unit\n    ): HtmlTag<HTMLPreElement> =\n        register(HtmlTag(\"pre\", id, baseClass, job, evalScope(scope)), content)\n\n    fun progress(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLProgressElement>.() -> Unit\n    ): HtmlTag<HTMLProgressElement> =\n        register(HtmlTag(\"progress\", id, baseClass, job, evalScope(scope)), content)\n\n    fun quote(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLQuoteElement>.() -> Unit\n    ): HtmlTag<HTMLQuoteElement> =\n        register(HtmlTag(\"quote\", id, baseClass, job, evalScope(scope)), content)\n\n    fun script(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLScriptElement>.() -> Unit\n    ): HtmlTag<HTMLScriptElement> =\n        register(HtmlTag(\"script\", id, baseClass, job, evalScope(scope)), content)\n\n    fun select(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLSelectElement>.() -> Unit\n    ): HtmlTag<HTMLSelectElement> =\n        register(HtmlTag(\"select\", id, baseClass, job, evalScope(scope)), content)\n\n    fun span(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLSpanElement>.() -> Unit\n    ): HtmlTag<HTMLSpanElement> =\n        register(HtmlTag(\"span\", id, baseClass, job, evalScope(scope)), content)\n\n    fun caption(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableCaptionElement>.() -> Unit\n    ): HtmlTag<HTMLTableCaptionElement> =\n        register(HtmlTag(\"caption\", id, baseClass, job, evalScope(scope)), content)\n\n    fun th(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableCellElement>.() -> Unit\n    ): HtmlTag<HTMLTableCellElement> =\n        register(HtmlTag(\"th\", id, baseClass, job, evalScope(scope)), content)\n\n    fun td(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableCellElement>.() -> Unit\n    ): HtmlTag<HTMLTableCellElement> =\n        register(HtmlTag(\"td\", id, baseClass, job, evalScope(scope)), content)\n\n    fun col(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableColElement>.() -> Unit\n    ): HtmlTag<HTMLTableColElement> =\n        register(HtmlTag(\"col\", id, baseClass, job, evalScope(scope)), content)\n\n    fun colgroup(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableColElement>.() -> Unit\n    ): HtmlTag<HTMLTableColElement> =\n        register(HtmlTag(\"colgroup\", id, baseClass, job, evalScope(scope)), content)\n\n    fun table(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableElement>.() -> Unit\n    ): HtmlTag<HTMLTableElement> =\n        register(HtmlTag(\"table\", id, baseClass, job, evalScope(scope)), content)\n\n    fun tr(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableRowElement>.() -> Unit\n    ): HtmlTag<HTMLTableRowElement> =\n        register(HtmlTag(\"tr\", id, baseClass, job, evalScope(scope)), content)\n\n    fun tfoot(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableSectionElement>.() -> Unit\n    ): HtmlTag<HTMLTableSectionElement> =\n        register(HtmlTag(\"tfoot\", id, baseClass, job, evalScope(scope)), content)\n\n    fun thead(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableSectionElement>.() -> Unit\n    ): HtmlTag<HTMLTableSectionElement> =\n        register(HtmlTag(\"thead\", id, baseClass, job, evalScope(scope)), content)\n\n    fun tbody(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTableSectionElement>.() -> Unit\n    ): HtmlTag<HTMLTableSectionElement> =\n        register(HtmlTag(\"tbody\", id, baseClass, job, evalScope(scope)), content)\n\n    fun textarea(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTextAreaElement>.() -> Unit\n    ): HtmlTag<HTMLTextAreaElement> =\n        register(HtmlTag(\"textarea\", id, baseClass, job, evalScope(scope)), content)\n\n    fun time(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTimeElement>.() -> Unit\n    ): HtmlTag<HTMLTimeElement> =\n        register(HtmlTag(\"time\", id, baseClass, job, evalScope(scope)), content)\n\n    fun track(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLTrackElement>.() -> Unit\n    ): HtmlTag<HTMLTrackElement> =\n        register(HtmlTag(\"track\", id, baseClass, job, evalScope(scope)), content)\n\n    fun ul(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLUListElement>.() -> Unit\n    ): HtmlTag<HTMLUListElement> =\n        register(HtmlTag(\"ul\", id, baseClass, job, evalScope(scope)), content)\n\n    fun address(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"address\", id, baseClass, job, evalScope(scope)), content)\n\n    fun article(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"article\", id, baseClass, job, evalScope(scope)), content)\n\n    fun aside(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"aside\", id, baseClass, job, evalScope(scope)), content)\n\n    fun bdi(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"bdi\", id, baseClass, job, evalScope(scope)), content)\n\n    fun figcaption(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"figcaption\", id, baseClass, job, evalScope(scope)), content)\n\n    fun figure(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"figure\", id, baseClass, job, evalScope(scope)), content)\n\n    fun footer(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"footer\", id, baseClass, job, evalScope(scope)), content)\n\n    fun header(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"header\", id, baseClass, job, evalScope(scope)), content)\n\n    fun main(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"main\", id, baseClass, job, evalScope(scope)), content)\n\n    fun mark(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"mark\", id, baseClass, job, evalScope(scope)), content)\n\n    fun nav(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"nav\", id, baseClass, job, evalScope(scope)), content)\n\n    fun noscript(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"noscript\", id, baseClass, job, evalScope(scope)), content)\n\n    fun rp(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"rp\", id, baseClass, job, evalScope(scope)), content)\n\n    fun rt(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"rt\", id, baseClass, job, evalScope(scope)), content)\n\n    fun ruby(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"ruby\", id, baseClass, job, evalScope(scope)), content)\n\n    fun section(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"section\", id, baseClass, job, evalScope(scope)), content)\n\n    fun summary(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"summary\", id, baseClass, job, evalScope(scope)), content)\n\n    fun wbr(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"wbr\", id, baseClass, job, evalScope(scope)), content)\n\n    fun blockquote(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLQuoteElement>.() -> Unit\n    ): HtmlTag<HTMLQuoteElement> =\n        register(HtmlTag(\"blockquote\", id, baseClass, job, evalScope(scope)), content)\n\n    fun em(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"em\", id, baseClass, job, evalScope(scope)), content)\n\n    fun strong(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"strong\", id, baseClass, job, evalScope(scope)), content)\n\n    fun s(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"s\", id, baseClass, job, evalScope(scope)), content)\n\n    fun cite(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"cite\", id, baseClass, job, evalScope(scope)), content)\n\n    fun q(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLQuoteElement>.() -> Unit\n    ): HtmlTag<HTMLQuoteElement> =\n        register(HtmlTag(\"q\", id, baseClass, job, evalScope(scope)), content)\n\n    fun dfn(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"dfn\", id, baseClass, job, evalScope(scope)), content)\n\n    fun abbr(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"abbr\", id, baseClass, job, evalScope(scope)), content)\n\n    fun code(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"code\", id, baseClass, job, evalScope(scope)), content)\n\n    fun `var`(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"var\", id, baseClass, job, evalScope(scope)), content)\n\n    fun samp(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"samp\", id, baseClass, job, evalScope(scope)), content)\n\n    fun kbd(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"kbd\", id, baseClass, job, evalScope(scope)), content)\n\n    fun sub(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"sub\", id, baseClass, job, evalScope(scope)), content)\n\n    fun sup(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"sup\", id, baseClass, job, evalScope(scope)), content)\n\n    fun i(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"i\", id, baseClass, job, evalScope(scope)), content)\n\n    fun b(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"b\", id, baseClass, job, evalScope(scope)), content)\n\n    fun u(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"u\", id, baseClass, job, evalScope(scope)), content)\n\n    fun bdo(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"bdo\", id, baseClass, job, evalScope(scope)), content)\n\n    fun command(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: HtmlTag<HTMLElement>.() -> Unit\n    ): HtmlTag<HTMLElement> =\n        register(HtmlTag(\"command\", id, baseClass, job, evalScope(scope)), content)\n\n    fun svg(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: SvgTag.() -> Unit\n    ): SvgTag =\n        register(SvgTag(\"svg\", id, baseClass, job = job, evalScope(scope)), content)\n\n    fun path(\n        baseClass: String? = null,\n        id: String? = null,\n        scope: (ScopeContext.() -> Unit) = {},\n        content: SvgTag.() -> Unit\n    ): SvgTag =\n        register(SvgTag(\"path\", id, baseClass, job = job, evalScope(scope)), content)\n}\n",null,"package dev.fritz2.core\n\nimport kotlinx.browser.document\nimport kotlinx.browser.window\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.MainScope\nimport kotlinx.coroutines.flow.*\nimport kotlinx.coroutines.plus\nimport kotlinx.dom.clear\nimport org.w3c.dom.Element\nimport org.w3c.dom.Node\nimport org.w3c.dom.events.Event\nimport org.w3c.dom.svg.SVGElement\n\n/**\n * A marker to separate the layers of calls in the type-safe-builder pattern.\n */\n@DslMarker\nannotation class HtmlTagMarker\n\n/**\n * Represents a tag.\n * Sorry for the name, but we needed to delimit it from the [Element] it is wrapping.\n */\ninterface Tag<out E : Element> : RenderContext, WithDomNode<E>, WithEvents<E> {\n\n    /**\n     * id of this [Tag]\n     */\n    val id: String?\n\n    /**\n     * constant css-classes of this [Tag]\n     */\n    val baseClass: String?\n\n    /**\n     * Sets an attribute.\n     *\n     * @param name to use\n     * @param value to use\n     */\n    fun attr(name: String, value: String) {\n        domNode.setAttribute(name, value)\n    }\n\n    /**\n     * Sets an attribute only if its [value] is not null.\n     *\n     * @param name to use\n     * @param value to use\n     */\n    fun attr(name: String, value: String?) {\n        if (value != null) domNode.setAttribute(name, value)\n        else domNode.removeAttribute(name)\n    }\n\n    /**\n     * Sets an attribute.\n     *\n     * @param name to use\n     * @param value to use\n     */\n    fun attr(name: String, value: Flow<String>) {\n        mountSimple(job, value) { v -> attr(name, v) }\n    }\n\n    /**\n     * Sets an attribute only for all none null values of the flow.\n     *\n     * @param name to use\n     * @param value to use\n     */\n    fun attr(name: String, value: Flow<String?>) {\n        mountSimple(job, value) { v -> attr(name, v) }\n    }\n\n    /**\n     * Sets an attribute.\n     *\n     * @param name to use\n     * @param value to use\n     */\n    fun <T> attr(name: String, value: T) {\n        attr(name, value?.toString())\n    }\n\n    /**\n     * Sets an attribute.\n     *\n     * @param name to use\n     * @param value to use\n     */\n    fun <T> attr(name: String, value: Flow<T>) {\n        mountSimple(job, value.map { it?.toString() }) { v -> attr(name, v) }\n    }\n\n    /**\n     * Sets an attribute when [value] is true otherwise removes it.\n     *\n     * @param name to use\n     * @param value for decision\n     * @param trueValue value to use if attribute is set (default \"\")\n     */\n    fun attr(name: String, value: Boolean, trueValue: String = \"\") {\n        if (value) domNode.setAttribute(name, trueValue)\n        else domNode.removeAttribute(name)\n    }\n\n    /**\n     * Sets an attribute when [value] is true otherwise removes it.\n     *\n     * @param name to use\n     * @param value for decision\n     * @param trueValue value to use if attribute is set (default \"\")\n     */\n    fun attr(name: String, value: Boolean?, trueValue: String = \"\") {\n        if (value != null && value) domNode.setAttribute(name, trueValue)\n        else domNode.removeAttribute(name)\n    }\n\n    /**\n     * Sets an attribute when [value] is true otherwise removes it.\n     *\n     * @param name to use\n     * @param value for decision\n     * @param trueValue value to use if attribute is set (default \"\")\n     */\n    fun attr(name: String, value: Flow<Boolean>, trueValue: String = \"\") {\n        mountSimple(job, value) { v -> attr(name, v, trueValue) }\n    }\n\n    /**\n     * Sets an attribute when [value] is true otherwise removes it.\n     *\n     * @param name to use\n     * @param value for decision\n     * @param trueValue value to use if attribute is set (default \"\")\n     */\n    fun attr(name: String, value: Flow<Boolean?>, trueValue: String = \"\") {\n        mountSimple(job, value) { v -> attr(name, v, trueValue) }\n    }\n\n    /**\n     * Adds a [String] of class names to the classes attribute of this [Tag]\n     *\n     * @param value as [String]\n     */\n    fun className(value: String)\n\n    /**\n     * Adds a [Flow] of class names to the classes attribute of this [Tag]\n     *\n     * @param value [Flow] with [String]\n     */\n    fun className(value: Flow<String>, initial: String = \"\")\n\n    /**\n     * Uses a [Flow] of [T] to create some class names by a [transform] lambda expression and add them to the classes\n     * attribute of the [Tag].\n     *\n     * In order to set some classes immediately, you must provide an initial [T] which is used to create the\n     * initial classes value with the [transform] lambda.\n     *\n     * Use this function to avoid flickering effects on reactively based styling!\n     *\n     * @param value a [Flow] of [T] that provides the parameter for the [transform] lambda\n     * @param initial a [T] to be used as initial state in order to generate and add class names\n     * immediately without waiting for the first value of the [Flow]\n     * @param transform a lambda expression which finally creates class names by passing one [T]\n     */\n    fun <T> className(value: Flow<T>, initial: T, transform: (T) -> String) {\n        className(value.map(transform), transform(initial))\n    }\n\n    /**\n     * Sets the *class* attribute from a [List] of [String]s.\n     *\n     * @param values as [List] of [String]s\n     */\n    fun classList(values: List<String>) {\n        className(values.joinToString(\" \"))\n    }\n\n    /**\n     * Sets the *class* attribute from a [List] of [String]s.\n     *\n     * @param values [Flow] with [List] of [String]s\n     */\n    fun classList(values: Flow<List<String>>) {\n        className(values.map { it.joinToString(\" \") })\n    }\n\n    /**\n     * Sets the *class* attribute from a [Map] of [String] to [Boolean].\n     * If the value of the [Map]-entry is true, the key will be used inside the resulting [String].\n     *\n     * @param values as [Map] with key to set and corresponding values to decide\n     */\n    fun classMap(values: Map<String, Boolean>) {\n        className(values.filter { it.value }.keys.joinToString(\" \"))\n    }\n\n    /**\n     * Sets the *class* attribute from a [Map] of [String] to [Boolean].\n     * If the value of the [Map]-entry is true, the key will be used inside the resulting [String].\n     *\n     * @param values [Flow] of [Map] with key to set and corresponding values to decide\n     */\n    fun classMap(values: Flow<Map<String, Boolean>>) {\n        className(values.map { map -> map.filter { it.value }.keys.joinToString(\" \") })\n    }\n\n    /**\n     * Sets the *style* attribute.\n     *\n     * @param value [String] to set\n     */\n    fun inlineStyle(value: String) {\n        attr(\"style\", value)\n    }\n\n    /**\n     * Sets the *style* attribute.\n     *\n     * @param value [Flow] with [String]\n     */\n    fun inlineStyle(value: Flow<String>) {\n        attr(\"style\", value)\n    }\n\n    /**\n     * Sets all scope-entries as data-attributes to the element.\n     */\n    fun Scope.asDataAttr() {\n        for ((k, v) in this) {\n            attr(\"data-${k.name}\", v.toString())\n        }\n    }\n\n    override fun <X : Event> subscribe(eventName: String, capture: Boolean, selector: X.() -> Boolean): Listener<X, E> =\n        Listener(domNode.subscribe(eventName, capture, selector))\n\n    /**\n     * Adds text-content of a [Flow] at this position\n     *\n     * @param into target to render text-content to\n     * @receiver text-content\n     */\n    fun Flow<String>.renderText(into: Tag<*>? = null) {\n        val target = into?.apply(SET_MOUNT_POINT_DATA_ATTRIBUTE) ?: span(content = SET_MOUNT_POINT_DATA_ATTRIBUTE)\n\n        mountSimple(job, this) { content ->\n            target.domNode.clear()\n            target.domNode.appendChild(window.document.createTextNode(content))\n        }\n    }\n\n    /**\n     * Adds text-content of a [Flow] at this position\n     *\n     * @param into target to render text-content to\n     * @receiver text-content\n     */\n    fun <T> Flow<T>.renderText(into: Tag<*>? = null) = this.asString().renderText(into)\n\n    /**\n     * Adds static text-content at this position\n     *\n     * @receiver text-content\n     */\n    operator fun String.unaryPlus(): Node = domNode.appendChild(document.createTextNode(this))\n\n    /**\n     * Adds a comment in your HTML by using !\"Comment Text\".\n     *\n     * @receiver comment-content\n     */\n    operator fun String.not(): Node = domNode.appendChild(document.createComment(this))\n\n    /**\n     * Sets scope-entry for the given [key] as data-attribute to the element\n     * when available.\n     *\n     * @param key key of scope-entry to look for in scope\n     */\n    fun <T : Any> Scope.asDataAttr(key: Scope.Key<T>) {\n        this[key]?.let {\n            attr(\"data-${key.name}\", it.toString())\n        }\n    }\n\n    /**\n     * provides [RenderContext] next to this [Tag] on the same DOM-level.\n     */\n    val annex: RenderContext\n}\n\n/**\n * Implementation of [Tag] to represent HTML5-tags.\n *\n * @param tagName name of the tag. Used to create the corresponding [Element]\n * @property id the DOM-id of the element to be created\n * @property baseClass a static base value for the class-attribute. All dynamic values for this attribute will be concatenated to this base-value.\n * @property job used for launching coroutines in\n * @property scope set some arbitrary scope entries into the [Tag]'s scope\n */\n@HtmlTagMarker\nopen class HtmlTag<out E : Element>(\n    private val tagName: String,\n    final override val id: String? = null,\n    final override val baseClass: String? = null,\n    override val job: Job,\n    override val scope: Scope,\n) : Tag<E> {\n\n    override val domNode: E = window.document.createElement(tagName).also { element ->\n        if (id != null) element.id = id\n        if (!baseClass.isNullOrBlank()) element.className = baseClass\n    }.unsafeCast<E>()\n\n    /**\n     * Creates the content of the [HtmlTag] and appends it as a child to the wrapped [Element].\n     *\n     * @param element the parent element of the new content\n     * @param content lambda building the content (following the type-safe-builder pattern)\n     */\n    @Suppress(\"OVERRIDE_BY_INLINE\")\n    final override inline fun <N : Node, W : WithDomNode<N>> register(element: W, content: (W) -> Unit): W {\n        content(element)\n        domNode.appendChild(element.domNode)\n        return element\n    }\n\n    /**\n     * This [MutableStateFlow] acts as a backing field for all class names. It holds arbitrary [List]s of\n     * [StateFlow]s which manage each portion of class names. This way, multiple calls of any [className] variant\n     * can be merged in one central place and must be mounted into the [Tag]s `class` attribute only once.\n     */\n    private val classesStateFlow by lazy {\n        MutableStateFlow<List<StateFlow<String>>>(listOfNotNull(baseClass?.let { MutableStateFlow(it) }))\n            .also { classesFlowList ->\n                attr(\"class\", classesFlowList.flatMapLatest { styleFlows ->\n                    combine(styleFlows) { joinClasses(*it) }\n                })\n            }\n    }\n\n    /**\n     * Small utility function to create the classes [String] from the current values of the [StateFlow]s.\n     *\n     * This function is used to create the initial class name values to be applied immediately\n     * to the domnode.\n     */\n    private fun buildClasses() = joinClasses(*classesStateFlow.value.map { it.value }.toTypedArray())\n\n    override fun className(value: String) {\n        classesStateFlow.value += MutableStateFlow(value)\n        // this ensures that the set state is applied *immediately* without `Flow`-\"delay\"\n        attr(\"class\", buildClasses())\n    }\n\n    override fun className(value: Flow<String>, initial: String) {\n        classesStateFlow.value += value\n            .catch { printErrorIgnoreLensException(it) }\n            .stateIn(MainScope() + job, SharingStarted.Eagerly, initial)\n\n        // this ensures that the set state is applied *immediately* without `Flow`-\"delay\".\n        // in this case, the `initial` value gets applied as \"promised\".\n        attr(\"class\", buildClasses())\n    }\n\n    internal inner class AnnexContext : RenderContext {\n        override fun <E : Node, T : WithDomNode<E>> register(element: T, content: (T) -> Unit): T {\n            domNode.parentElement?.let {\n                content(element)\n                it.appendChild(element.domNode)\n            }\n            return element\n        }\n\n        override val job: Job = this@HtmlTag.job\n\n        override val scope: Scope = this@HtmlTag.scope\n    }\n\n    /**\n     * provides [RenderContext] next to this [HtmlTag] on the same DOM-level.\n     */\n    override val annex: RenderContext by lazy { AnnexContext() }\n}\n\nconst val SVG_XMLNS = \"http://www.w3.org/2000/svg\"\n\n/**\n * Implementation of [HtmlTag] to represent the JavaScript\n * [SVGElement](https://developer.mozilla.org/en-US/docs/Web/API/SVGElement) to Kotlin\n */\nclass SvgTag(tagName: String, id: String? = null, baseClass: String? = null, job: Job, scope: Scope) :\n    HtmlTag<SVGElement>(tagName, id, baseClass, job, scope) {\n\n    override val domNode =\n        document.createElementNS(SVG_XMLNS, tagName).unsafeCast<SVGElement>().apply {\n            if (!baseClass.isNullOrBlank()) setAttributeNS(null, \"class\", baseClass)\n            if (!id.isNullOrBlank()) setAttributeNS(null, \"id\", id)\n        }\n\n    /**\n     * Sets the given [xml] string to the *innerHTML* of the [SVGElement].\n     *\n     * @param xml svg xml content\n     */\n    fun content(xml: String) {\n        domNode.innerHTML = xml\n    }\n\n    /**\n     * sets XML-namespace of a [Tag]\n     *\n     * @param value namespace to set\n     */\n    fun xmlns(value: String) = attr(\"xmlns\", value)\n}","package dev.fritz2.core\n\nimport kotlinx.browser.document\nimport kotlinx.coroutines.*\nimport kotlinx.coroutines.flow.*\nimport kotlinx.coroutines.sync.Mutex\nimport kotlinx.coroutines.sync.withLock\nimport kotlinx.dom.clear\nimport org.w3c.dom.Element\nimport org.w3c.dom.HTMLElement\nimport org.w3c.dom.Node\n\n/**\n * Defines type for a handler for lifecycle-events\n */\ntypealias DomLifecycleHandler = suspend (WithDomNode<Element>, Any?) -> Unit\n\ninternal class DomLifecycleListener(\n    val target: WithDomNode<Element>,\n    val payload: Any? = null,\n    val handler: DomLifecycleHandler\n)\n\n/**\n * External interface to access the MountPoint where the lifecycle of [Tag]s and subtrees is handled.\n */\ninterface MountPoint {\n\n    /**\n     * Registers a [DomLifecycleHandler] on a given target that ist called right after the target is mounted to the DOM.\n     *\n     * @param target the element the lifecycle-handler will be registered for\n     * @param payload some optional data that might be used by the [handler] to do its work\n     * @param handler defines, what to do (with [payload]), when [target] has just been mounted to the DOM\n     */\n    fun afterMount(target: WithDomNode<Element>, payload: Any? = null, handler: DomLifecycleHandler)\n\n    /**\n     * Registers a [DomLifecycleHandler] on a given target that ist called right before the target is removed from the DOM.\n     *\n     * @param target the element the lifecycle-handler will be registered for\n     * @param payload some optional data that might be used by the [handler] to do its work\n     * @param handler defines, what to do (with [payload]), when [target] has just been mounted to the DOM\n     */\n    fun beforeUnmount(target: WithDomNode<Element>, payload: Any? = null, handler: DomLifecycleHandler)\n}\n\ninternal abstract class MountPointImpl : MountPoint, WithJob {\n\n\n    private val mutex = Mutex()\n\n    suspend fun runBeforeUnmounts() = withContext(NonCancellable) {\n        mutex.withLock {\n            beforeUnmountListeners.forEach {\n                try {\n                    it.handler(it.target, it.payload)\n                } catch (e: Exception) {\n                    console.error(\"Error in beforeUnmounts\", e)\n                }\n            }\n            beforeUnmountListeners.clear()\n        }\n    }\n\n\n    suspend fun runAfterMounts() = withContext(NonCancellable) {\n        afterMountListeners.forEach {\n            try {\n                it.handler(it.target, it.payload)\n            } catch (e: Exception) {\n                console.error(\"Error in afterMounts\", e)\n            }\n        }\n        afterMountListeners.clear()\n    }\n\n    private val afterMountListeners: MutableList<DomLifecycleListener> = mutableListOf()\n\n    private val beforeUnmountListeners: MutableList<DomLifecycleListener> = mutableListOf()\n\n    override fun afterMount(target: WithDomNode<Element>, payload: Any?, handler: DomLifecycleHandler) {\n        afterMountListeners.add(DomLifecycleListener(target, payload, handler))\n    }\n\n    override fun beforeUnmount(target: WithDomNode<Element>, payload: Any?, handler: DomLifecycleHandler) {\n        beforeUnmountListeners.add(DomLifecycleListener(target, payload, handler))\n    }\n}\n\nval MOUNT_POINT_KEY = Scope.Key<MountPoint>(\"MOUNT_POINT\")\n\n/**\n * Allows to access the nearest [MountPoint] from any [WithScope]\n */\nfun WithScope.mountPoint(): MountPoint? = this.scope[MOUNT_POINT_KEY]\n\n/**\n * Convenience method to register lifecycle handler for after a [Tag] is mounted\n *\n * @param handler [DomLifecycleHandler] to be called on this [Tag] after it is mounted to the DOM\n * @param payload optional payload the handler requires\n * @receiver the [Tag] to register the lifecycle handler for\n */\nfun <T : Element> Tag<T>.afterMount(payload: Any? = null, handler: DomLifecycleHandler) {\n    mountPoint()?.afterMount(this, payload, handler)\n}\n\n/**\n * Convenience method to register lifecycle handler for before a [Tag] is unmounted\n *\n * @param handler [DomLifecycleHandler] to be called on this [Tag] before it is removed from the DOM\n * @param payload optional payload the handler requires\n * @receiver the [Tag] to register the lifecycle handler for\n */\nfun <T : Element> Tag<T>.beforeUnmount(payload: Any? = null, handler: DomLifecycleHandler) {\n    mountPoint()?.beforeUnmount(this, payload, handler)\n}\n\ninternal class MountContext<T : HTMLElement>(\n    override val job: Job,\n    val target: Tag<T>,\n    mountScope: Scope = target.scope,\n) : Tag<HTMLElement>, MountPointImpl() {\n\n    override val domNode: HTMLElement = target.domNode\n    override val id = target.id\n    override val baseClass = target.baseClass\n    override fun className(value: String) = target.className(value)\n    override fun className(value: Flow<String>, initial: String) = target.className(value, initial)\n\n    override val annex: RenderContext = target.annex\n\n    override val scope: Scope = Scope(mountScope).apply { set(MOUNT_POINT_KEY, this@MountContext) }\n\n    override fun <N : Node, W : WithDomNode<N>> register(element: W, content: (W) -> Unit): W {\n        return target.register(element, content)\n    }\n\n    init {\n        target.beforeUnmount { _, _ -> runBeforeUnmounts() }\n    }\n}\n\ninternal class BuildContext(\n    override val job: Job,\n    target: Tag<*>,\n    mountScope: Scope,\n) : RenderContext, MountPointImpl() {\n\n    override val scope: Scope = Scope(mountScope).apply { set(MOUNT_POINT_KEY, this@BuildContext) }\n\n    override fun <N : Node, W : WithDomNode<N>> register(element: W, content: (W) -> Unit): W {\n        content(element)\n        return element\n    }\n\n    init {\n        target.beforeUnmount { _, _ -> runBeforeUnmounts() }\n    }\n}\n\n/**\n * Defines the dedicated style class, that any mount-point will get by default.\n * Its only purpose is to exclude the mount-point tag to appear in the visual representation of the DOM.\n */\nconst val MOUNT_POINT_STYLE_CLASS = \"mount-point\"\n\ninternal val SET_MOUNT_POINT_DATA_ATTRIBUTE: Tag<*>.() -> Unit = {\n    attr(\"data-mount-point\", true)\n}\n\n/**\n * collects the values of a given [Flow] one by one.\n * Use this for data-types that represent a single (simple or complex) value.\n *\n * @param parentJob parent Job for starting a new coroutine\n * @param upstream returns the Flow that should be mounted at this point\n * @param collect function which getting called when values are changing (rerender)\n */\ninline fun <T> mountSimple(parentJob: Job, upstream: Flow<T>, crossinline collect: suspend (T) -> Unit) {\n    (MainScope() + parentJob).launch(start = CoroutineStart.UNDISPATCHED) {\n        upstream.distinctUntilChanged().mapLatest { collect(it);it }.catch {\n            when (it) {\n                is CollectionLensGetException -> {}\n                else -> console.error(it)\n            }\n            // do not do anything here but canceling the coroutine, because this is an expected\n            // behaviour when dealing with filtering, renderEach and idProvider\n            cancel(\"error mounting\", it)\n        }.collect()\n    }\n}\n\n/**\n * Mounts a [Flow] of [Patch]es to the DOM either\n *  - creating a new context-Div as a child of the receiver\n *  - or, if [into] is set, replacing all children of this [Tag].\n *\n * @param into if set defines the target to mount the content to (replacing its static content)\n * @param upstream the [Flow] that should be mounted\n * @param batch hide [into] while rendering patches. Useful to avoid flickering when you make many changes (like sorting)\n * @param createPatches lambda defining, how to compare two versions of a [List]\n */\ninternal fun <V> RenderContext.mountPatches(\n    into: Tag<HTMLElement>?,\n    upstream: Flow<List<V>>,\n    batch: Boolean,\n    createPatches: Tag<HTMLElement>.(Flow<List<V>>, MutableMap<Node, MountPointImpl>) -> Flow<List<Patch<Tag<HTMLElement>>>>,\n) {\n    val target = into?.apply {\n        this.domNode.clear()\n        SET_MOUNT_POINT_DATA_ATTRIBUTE()\n    } ?: div(MOUNT_POINT_STYLE_CLASS, content = SET_MOUNT_POINT_DATA_ATTRIBUTE)\n\n    val mountPoints = mutableMapOf<Node, MountPointImpl>()\n\n    mountSimple(\n        target.job,\n        createPatches(target, upstream.onEach { if (batch) target.inlineStyle(\"visibility: hidden;\") }, mountPoints)\n    ) { patches ->\n        withContext(NonCancellable) {\n            patches.forEach { patch ->\n                when (patch) {\n                    is Patch.Insert -> insert(target.domNode, mountPoints, patch.element, patch.index)\n                    is Patch.InsertMany -> insertMany(target.domNode, mountPoints, patch.elements, patch.index)\n                    is Patch.Delete -> delete(target.domNode, mountPoints, patch.start, patch.count)\n                    is Patch.Move -> move(target.domNode, patch.from, patch.to)\n                }\n            }\n        }\n        if (batch) {\n            kotlinx.browser.window.awaitAnimationFrame()\n            target.inlineStyle(\"\")\n        }\n    }\n}\n\n\n/**\n * Inserts or appends elements to the DOM.\n *\n * @receiver target DOM-Node\n * @param child Node to insert or append\n * @param index place to insert or append\n */\nprivate fun insertOrAppend(target: Node, child: Node, index: Int) {\n    if (index == target.childNodes.length) target.appendChild(child)\n    else target.childNodes.item(index)?.let {\n        target.insertBefore(child, it)\n    }\n}\n\n/**\n * Inserts or appends elements to the DOM.\n *\n * @receiver target DOM-Node\n * @param element from type [WithDomNode]\n * @param index place to insert or append\n */\nprivate suspend inline fun insert(\n    target: Node,\n    mountPoints: MutableMap<Node, MountPointImpl>,\n    element: WithDomNode<*>,\n    index: Int\n) {\n    insertOrAppend(target, element.domNode, index)\n    mountPoints[element.domNode]?.runAfterMounts()\n}\n\n/**\n * Inserts a [List] of elements to the DOM.\n *\n * @receiver target DOM-Node\n * @param elements [List] of [WithDomNode]s elements to insert\n * @param index place to insert or append\n */\nprivate suspend inline fun insertMany(\n    target: Node,\n    mountPoints: MutableMap<Node, MountPointImpl>,\n    elements: List<WithDomNode<*>>,\n    index: Int\n) {\n    val f = document.createDocumentFragment()\n    for (child in elements) {\n        f.append(child.domNode)\n        mountPoints[child.domNode]?.runAfterMounts()\n    }\n    insertOrAppend(target, f, index)\n}\n\n/**\n * Deletes elements from the DOM.\n *\n * @receiver target DOM-Node\n * @param start position for deleting\n * @param count of elements to delete\n */\nprivate suspend inline fun delete(target: Node, mountPoints: MutableMap<Node, MountPointImpl>, start: Int, count: Int) {\n    var itemToDelete = target.childNodes.item(start)\n    repeat(count) {\n        itemToDelete?.let {\n            itemToDelete = it.nextSibling\n            mountPoints.remove(it)?.let { mountPoint ->\n                mountPoint.runBeforeUnmounts()\n                mountPoint.job.cancelChildren()\n                target.removeChild(it)\n            }\n        }\n    }\n}\n\n/**\n * Moves elements from on place to another in the DOM.\n *\n * @receiver target DOM-Node\n * @param from position index\n * @param to position index\n */\nprivate fun move(target: Node, from: Int, to: Int) {\n    val itemToMove = target.childNodes.item(from)\n    if (itemToMove != null) insertOrAppend(target, itemToMove, to)\n}\n\n","package dev.fritz2.core\n\nobject Id {\n    private const val defaultLength = 6\n    private val chars = \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\".toCharArray()\n\n    fun next(length: Int = defaultLength) = buildString {\n        for (i in 0 until length) {\n            append(chars.random())\n        }\n    }\n}","@file:Suppress(\"unused\")\n\npackage dev.fritz2.core\n\nimport kotlinx.browser.window\nimport kotlinx.coroutines.MainScope\nimport kotlinx.coroutines.flow.*\nimport org.w3c.dom.*\nimport org.w3c.dom.Window\nimport org.w3c.dom.clipboard.ClipboardEvent\nimport org.w3c.dom.events.*\nimport org.w3c.xhr.ProgressEvent\n\n/**\n * Contains all javascript event types.\n * Take a look [here](https://www.w3schools.com/jsref/dom_obj_event.asp).\n *\n * Sometimes it is necessary to use a more generic type (like [Event])\n * because the type that is offered to the listener is not always consistent\n * (on different browsers, different actions, etc.)\n */\ninterface WithEvents<out T : EventTarget> {\n\n    companion object {\n        private const val ABORT = \"abort\"\n        private const val AFTERPRINT = \"afterprint\"\n        private const val ANIMATIONEND = \"animationend\"\n        private const val ANIMATIONITERATION = \"animationiteration\"\n        private const val ANIMATIONSTART = \"animationstart\"\n        private const val BEFOREPRINT = \"beforeprint\"\n        private const val BEFOREUNLOAD = \"beforeunload\"\n        private const val BLUR = \"blur\"\n        private const val CANPLAY = \"canplay\"\n        private const val CANPLAYTHROUGH = \"canplaythrough\"\n        private const val CHANGE = \"change\"\n        private const val CLICK = \"click\"\n        private const val CONTEXTMENU = \"contextmenu\"\n        private const val COPY = \"copy\"\n        private const val CUT = \"cut\"\n        private const val DBLCLICK = \"dblclick\"\n        private const val DRAG = \"drag\"\n        private const val DRAGEND = \"dragend\"\n        private const val DRAGENTER = \"dragenter\"\n        private const val DRAGLEAVE = \"dragleave\"\n        private const val DRAGOVER = \"dragover\"\n        private const val DRAGSTART = \"dragstart\"\n        private const val DROP = \"drop\"\n        private const val DURATIONCHANGE = \"durationchange\"\n        private const val ENDED = \"ended\"\n        private const val ERROR = \"error\"\n        private const val FOCUS = \"focus\"\n        private const val FOCUSIN = \"focusin\"\n        private const val FOCUSOUT = \"focusout\"\n        private const val FULLSCREENCHANGE = \"fullscreenchange\"\n        private const val FULLSCREENERROR = \"fullscreenerror\"\n        private const val HASHCHANGE = \"hashchange\"\n        private const val INPUT = \"input\"\n        private const val INVALID = \"invalid\"\n        private const val KEYDOWN = \"keydown\"\n        private const val KEYPRESS = \"keypress\"\n        private const val KEYUP = \"keyup\"\n        private const val LOAD = \"load\"\n        private const val LOADEDDATA = \"loadeddata\"\n        private const val LOADEDMETADATA = \"loadedmetadata\"\n        private const val MOUSEENTER = \"mouseenter\"\n        private const val MOUSELEAVE = \"mouseleave\"\n        private const val MOUSEMOVE = \"mousemove\"\n        private const val MOUSEOVER = \"mouseover\"\n        private const val MOUSEOUT = \"mouseout\"\n        private const val MOUSEUP = \"mouseup\"\n        private const val OFFLINE = \"offline\"\n        private const val ONLINE = \"online\"\n        private const val OPEN = \"open\"\n        private const val PAGEHIDE = \"pagehide\"\n        private const val PAGESHOW = \"pageshow\"\n        private const val PASTE = \"paste\"\n        private const val LOADSTART = \"loadstart\"\n        private const val MESSAGE = \"message\"\n        private const val MOUSEDOWN = \"mousedown\"\n        private const val PAUSE = \"pause\"\n        private const val PLAY = \"play\"\n        private const val PLAYING = \"playing\"\n        private const val POPSTATE = \"popstate\"\n        private const val PROGRESS = \"progress\"\n        private const val RATECHANGE = \"ratechange\"\n        private const val RESIZE = \"resize\"\n        private const val RESET = \"reset\"\n        private const val SCROLL = \"scroll\"\n        private const val SEARCH = \"search\"\n        private const val SEEKED = \"seeked\"\n        private const val SEEKING = \"seeking\"\n        private const val SELECT = \"select\"\n        private const val SHOW = \"show\"\n        private const val STALLED = \"stalled\"\n        private const val STORAGE = \"storage\"\n        private const val SUBMIT = \"submit\"\n        private const val SUSPEND = \"suspend\"\n        private const val TIMEUPDATE = \"timeupdate\"\n        private const val TOGGLE = \"toggle\"\n        private const val TOUCHCANCEL = \"touchcancel\"\n        private const val TOUCHEND = \"touchend\"\n        private const val TOUCHMOVE = \"touchmove\"\n        private const val TOUCHSTART = \"touchstart\"\n        private const val TRANSITIONEND = \"transitionend\"\n        private const val UNLOAD = \"unload\"\n        private const val VOLUMECHANGE = \"volumechange\"\n        private const val WAITING = \"waiting\"\n        private const val WHEEL = \"wheel\"\n    }\n\n    /**\n     * Creates an [Listener] for the given event [eventName].\n     *\n     * @param eventName the [DOM-API name](https://developer.mozilla.org/en-US/docs/Web/API/Element#events) of an event.\n     * Can be a custom name.\n     * @param capture if `true`, activates capturing mode, else remains in `bubble` mode (default)\n     * @param selector optional lambda expression to select specific events with option to manipulate it\n     * (e.g. `preventDefault` or `stopPropagation`).\n     *\n     * @return a [Listener]-object, which is more or less a [Flow] of the specific `Event`-type.\n     */\n    fun <X : Event> subscribe(\n        eventName: String,\n        capture: Boolean = false,\n        selector: X.() -> Boolean = { true }\n    ): Listener<X, T>\n\n    /**\n     * occurs when the loading of a media is aborted\n     */\n    val aborts: Listener<Event, T> get() = subscribe(ABORT)\n\n    /**\n     * occurs when the loading of a media is aborted\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun aborts(init: Event.() -> Unit): Listener<Event, T> = subscribe(ABORT) { init(); true }\n\n    /**\n     * occurs when the loading of a media is aborted\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun abortsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(ABORT, selector = selector)\n\n    /**\n     * occurs when a page has started printing, or if the print dialogue box has been closed\n     */\n    val afterprints: Listener<Event, T> get() = subscribe(AFTERPRINT)\n\n    /**\n     * occurs when a page has started printing, or if the print dialogue box has been closed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun afterprints(init: Event.() -> Unit): Listener<Event, T> = subscribe(AFTERPRINT) { init(); true }\n\n    /**\n     * occurs when a page has started printing, or if the print dialogue box has been closed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun afterprintsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(AFTERPRINT, selector = selector)\n\n    /**\n     * occurs when a CSS Animation has completed\n     */\n    val animationends: Listener<Event, T> get() = subscribe(ANIMATIONEND)\n\n    /**\n     * occurs when a CSS Animation has completed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationends(init: Event.() -> Unit): Listener<Event, T> = subscribe(ANIMATIONEND) { init(); true }\n\n    /**\n     * occurs when a CSS Animation has completed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationendsIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(ANIMATIONEND, selector = selector)\n\n    /**\n     * occurs when an iteration of a CSS Animation ends, and another one begins\n     */\n    val animationiterations: Listener<Event, T> get() = subscribe(ANIMATIONITERATION)\n\n    /**\n     * occurs when an iteration of a CSS Animation ends, and another one begins\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationiterations(init: Event.() -> Unit): Listener<Event, T> = subscribe(ANIMATIONITERATION) { init(); true }\n\n    /**\n     * occurs when an iteration of a CSS Animation ends, and another one begins\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationiterationsIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(ANIMATIONITERATION, selector = selector)\n\n    /**\n     * occurs when a CSS Animation has started\n     */\n    val animationstarts: Listener<Event, T> get() = subscribe(ANIMATIONSTART)\n\n    /**\n     * occurs when a CSS Animation has completed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationstarts(init: Event.() -> Unit): Listener<Event, T> = subscribe(ANIMATIONSTART) { init(); true }\n\n    /**\n     * occurs when a CSS Animation has started\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationstartsIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(ANIMATIONSTART, selector = selector)\n\n    /**\n     * occurs when a page is about to be printed\n     */\n    val beforeprints: Listener<Event, T> get() = subscribe(BEFOREPRINT)\n\n    /**\n     * occurs when a page is about to be printed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun beforeprints(init: Event.() -> Unit): Listener<Event, T> = subscribe(BEFOREPRINT) { init(); true }\n\n    /**\n     * occurs when a page is about to be printed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun beforeprintsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(BEFOREPRINT, selector = selector)\n\n    /**\n     * occurs before the document is about to be unloaded\n     */\n    val beforeunloads: Listener<Event, T> get() = subscribe(BEFOREUNLOAD)\n\n    /**\n     * occurs before the document is about to be unloaded\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun beforeunloads(init: Event.() -> Unit): Listener<Event, T> = subscribe(BEFOREUNLOAD) { init(); true }\n\n    /**\n     * occurs before the document is about to be unloaded\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun beforeunloadsIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(BEFOREUNLOAD, selector = selector)\n\n    /**\n     * occurs when an element loses focus\n     */\n    val blurs: Listener<FocusEvent, T> get() = subscribe(BLUR)\n\n    /**\n     * occurs when an element loses focus\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun blurs(init: FocusEvent.() -> Unit): Listener<FocusEvent, T> = subscribe(BLUR) { init(); true }\n\n    /**\n     * occurs when an element loses focus\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun blursIf(selector: FocusEvent.() -> Boolean): Listener<FocusEvent, T> = subscribe(BLUR, selector = selector)\n\n    /**\n     * occurs when the browser can start playing the media (when it has buffered enough to begin)\n     */\n    val canplays: Listener<Event, T> get() = subscribe(CANPLAY)\n\n    /**\n     * occurs when the browser can start playing the media (when it has buffered enough to begin)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun canplays(init: Event.() -> Unit): Listener<Event, T> = subscribe(CANPLAY) { init(); true }\n\n    /**\n     * occurs when the browser can start playing the media (when it has buffered enough to begin)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun canplaysIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(CANPLAY, selector = selector)\n\n    /**\n     * occurs when the browser can play through the media without stopping for buffering\n     */\n    val canplaythroughs: Listener<Event, T> get() = subscribe(CANPLAYTHROUGH)\n\n    /**\n     * occurs when the browser can play through the media without stopping for buffering\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun canplaythroughs(init: Event.() -> Unit): Listener<Event, T> = subscribe(CANPLAYTHROUGH) { init(); true }\n\n    /**\n     * occurs when the browser can play through the media without stopping for buffering\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun canplaythroughsIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(CANPLAYTHROUGH, selector = selector)\n\n    /**\n     * occurs when the content of a form element, the selection, or the checked state have changed\n     * (for `<input>`, `<select>`, and `<textarea>`)\n     */\n    val changes: Listener<Event, T> get() = subscribe(CHANGE)\n\n    /**\n     * occurs when the content of a form element, the selection, or the checked state have changed\n     * (for `<input>`, `<select>`, and `<textarea>`)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun changes(init: Event.() -> Unit): Listener<Event, T> = subscribe(CHANGE) { init(); true }\n\n    /**\n     * occurs when the content of a form element, the selection, or the checked state have changed\n     * (for `<input>`, `<select>`, and `<textarea>`)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun changesIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(CHANGE, selector = selector)\n\n    /**\n     * occurs when the user clicks on an element\n     */\n    val clicks: Listener<MouseEvent, T> get() = subscribe(CLICK)\n\n    /**\n     * occurs when the user clicks on an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun clicks(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> = subscribe(CLICK) { init(); true }\n\n    /**\n     * occurs when the user clicks on an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun clicksIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> = subscribe(CLICK, selector = selector)\n\n    /**\n     * occurs when the user right-clicks on an element to open a context menu\n     */\n    val contextmenus: Listener<MouseEvent, T> get() = subscribe(CONTEXTMENU)\n\n    /**\n     * occurs when the user right-clicks on an element to open a context menu\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun contextmenus(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> = subscribe(CONTEXTMENU) { init(); true }\n\n    /**\n     * occurs when the user right-clicks on an element to open a context menu\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun contextmenusIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(CONTEXTMENU, selector = selector)\n\n    /**\n     * occurs when the user copies the content of an element\n     */\n    val copys: Listener<ClipboardEvent, T> get() = subscribe(COPY)\n\n    /**\n     * occurs when the user copies the content of an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun copys(init: ClipboardEvent.() -> Unit): Listener<ClipboardEvent, T> = subscribe(COPY) { init(); true }\n\n    /**\n     * occurs when the user copies the content of an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun copysIf(selector: ClipboardEvent.() -> Boolean): Listener<ClipboardEvent, T> =\n        subscribe(COPY, selector = selector)\n\n    /**\n     * occurs when the user cuts the content of an element\n     */\n    val cuts: Listener<ClipboardEvent, T> get() = subscribe(CUT)\n\n    /**\n     * occurs when the user cuts the content of an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun cuts(init: ClipboardEvent.() -> Unit): Listener<ClipboardEvent, T> = subscribe(CUT) { init(); true }\n\n    /**\n     * occurs when the user cuts the content of an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun cutsIf(selector: ClipboardEvent.() -> Boolean): Listener<ClipboardEvent, T> =\n        subscribe(CUT, selector = selector)\n\n    /**\n     * occurs when the user double-clicks on an element\n     */\n    val dblclicks: Listener<MouseEvent, T> get() = subscribe(DBLCLICK)\n\n    /**\n     * occurs when the user double-clicks on an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun dblclicks(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> = subscribe(DBLCLICK) { init(); true }\n\n    /**\n     * occurs when the user double-clicks on an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun dblclicksIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(DBLCLICK, selector = selector)\n\n    /**\n     * occurs when an element is being dragged\n     */\n    val drags: Listener<DragEvent, T> get() = subscribe(DRAG)\n\n    /**\n     * occurs when an element is being dragged\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun drags(init: DragEvent.() -> Unit): Listener<DragEvent, T> = subscribe(DRAG) { init(); true }\n\n    /**\n     * occurs when an element is being dragged\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragsIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> = subscribe(DRAG, selector = selector)\n\n    /**\n     * occurs when the user has finished dragging an element\n     */\n    val dragends: Listener<DragEvent, T> get() = subscribe(DRAGEND)\n\n    /**\n     * occurs when the user has finished dragging an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragends(init: DragEvent.() -> Unit): Listener<DragEvent, T> = subscribe(DRAGEND) { init(); true }\n\n    /**\n     * occurs when the user has finished dragging an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragendsIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> = subscribe(DRAGEND, selector = selector)\n\n    /**\n     * occurs when the dragged element enters the drop target\n     */\n    val dragenters: Listener<DragEvent, T> get() = subscribe(DRAGENTER)\n\n    /**\n     * occurs when the dragged element enters the drop target\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragenters(init: DragEvent.() -> Unit): Listener<DragEvent, T> = subscribe(DRAGENTER) { init(); true }\n\n    /**\n     * occurs when the dragged element enters the drop target\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragentersIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> =\n        subscribe(DRAGENTER, selector = selector)\n\n    /**\n     * occurs when the dragged element leaves the drop target\n     */\n    val dragleaves: Listener<DragEvent, T> get() = subscribe(DRAGLEAVE)\n\n    /**\n     * occurs when the dragged element leaves the drop target\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragleaves(init: DragEvent.() -> Unit): Listener<DragEvent, T> = subscribe(DRAGLEAVE) { init(); true }\n\n    /**\n     * occurs when the dragged element leaves the drop target\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragleavesIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> =\n        subscribe(DRAGLEAVE, selector = selector)\n\n    /**\n     * occurs when the dragged element is over the drop target\n     */\n    val dragovers: Listener<DragEvent, T> get() = subscribe(DRAGOVER)\n\n    /**\n     * occurs when the dragged element is over the drop target\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragovers(init: DragEvent.() -> Unit): Listener<DragEvent, T> = subscribe(DRAGOVER) { init(); true }\n\n    /**\n     * occurs when the dragged element is over the drop target\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragoversIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> =\n        subscribe(DRAGOVER, selector = selector)\n\n    /**\n     * occurs when the user starts to drag an element\n     */\n    val dragstarts: Listener<DragEvent, T> get() = subscribe(DRAGSTART)\n\n    /**\n     * occurs when the user starts to drag an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragstarts(init: DragEvent.() -> Unit): Listener<DragEvent, T> = subscribe(DRAGSTART) { init(); true }\n\n    /**\n     * occurs when the user starts to drag an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragstartsIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> =\n        subscribe(DRAGSTART, selector = selector)\n\n    /**\n     * occurs when the dragged element is dropped on the drop target\n     */\n    val drops: Listener<DragEvent, T> get() = subscribe(DROP)\n\n    /**\n     * occurs when the dragged element is dropped on the drop target\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun drops(init: DragEvent.() -> Unit): Listener<DragEvent, T> = subscribe(DROP) { init(); true }\n\n    /**\n     * occurs when the dragged element is dropped on the drop target\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dropsIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> = subscribe(DROP, selector = selector)\n\n    /**\n     * occurs when the duration of the media is changed\n     */\n    val durationchanges: Listener<Event, T> get() = subscribe(DURATIONCHANGE)\n\n    /**\n     * occurs when the duration of the media is changed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun durationchanges(init: Event.() -> Unit): Listener<Event, T> = subscribe(DURATIONCHANGE) { init(); true }\n\n    /**\n     * occurs when the duration of the media is changed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun durationchangesIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(DURATIONCHANGE, selector = selector)\n\n    /**\n     * occurs when the media has reach the end (useful for messages like \"thanks for listening\")\n     */\n    val endeds: Listener<Event, T> get() = subscribe(ENDED)\n\n    /**\n     * occurs when the media has reach the end (useful for messages like \"thanks for listening\")\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun endeds(init: Event.() -> Unit): Listener<Event, T> = subscribe(ENDED) { init(); true }\n\n    /**\n     * occurs when the media has reach the end (useful for messages like \"thanks for listening\")\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun endedsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(ENDED, selector = selector)\n\n    /**\n     * occurs when a CSS Animation has completed\n     */\n    val errors: Listener<Event, T> get() = subscribe(ERROR)\n\n    /**\n     * occurs when there is an error while loading an external file (e.g. a document or an image).\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun errors(init: Event.() -> Unit): Listener<Event, T> = subscribe(ERROR) { init(); true }\n\n    /**\n     * occurs when there is an error while loading an external file (e.g. a document or an image).\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun errorsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(ERROR, selector = selector)\n\n    /**\n     * occurs when an element gets focus\n     */\n    val focuss: Listener<FocusEvent, T> get() = subscribe(FOCUS)\n\n    /**\n     * occurs when an element gets focus\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focuss(init: FocusEvent.() -> Unit): Listener<FocusEvent, T> = subscribe(FOCUS) { init(); true }\n\n    /**\n     * occurs when an element gets focus\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focussIf(selector: FocusEvent.() -> Boolean): Listener<FocusEvent, T> = subscribe(FOCUS, selector = selector)\n\n    /**\n     * occurs when an element is about to get focus\n     */\n    val focusins: Listener<FocusEvent, T> get() = subscribe(FOCUSIN)\n\n    /**\n     * occurs when an element is about to get focus\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focusins(init: FocusEvent.() -> Unit): Listener<FocusEvent, T> = subscribe(FOCUSIN) { init(); true }\n\n    /**\n     * occurs when an element is about to get focus\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focusinsIf(selector: FocusEvent.() -> Boolean): Listener<FocusEvent, T> =\n        subscribe(FOCUSIN, selector = selector)\n\n    /**\n     * occurs when an element is about to lose focus\n     */\n    val focusouts: Listener<FocusEvent, T> get() = subscribe(FOCUSOUT)\n\n    /**\n     * occurs when an element is about to lose focus\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focusouts(init: FocusEvent.() -> Unit): Listener<FocusEvent, T> = subscribe(FOCUSOUT) { init(); true }\n\n    /**\n     * occurs when an element is about to lose focus\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focusoutsIf(selector: FocusEvent.() -> Boolean): Listener<FocusEvent, T> =\n        subscribe(FOCUSOUT, selector = selector)\n\n    /**\n     * occurs when an element is displayed in fullscreen mode\n     */\n    val fullscreenchanges: Listener<Event, T> get() = subscribe(FULLSCREENCHANGE)\n\n    /**\n     * occurs when an element is displayed in fullscreen mode\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun fullscreenchanges(init: Event.() -> Unit): Listener<Event, T> = subscribe(FULLSCREENCHANGE) { init(); true }\n\n    /**\n     * occurs when an element is displayed in fullscreen mode\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun fullscreenchangesIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(FULLSCREENCHANGE, selector = selector)\n\n    /**\n     * occurs when an element can not be displayed in fullscreen mode\n     */\n    val fullscreenerrors: Listener<Event, T> get() = subscribe(FULLSCREENERROR)\n\n    /**\n     * occurs when an element can not be displayed in fullscreen mode\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun fullscreenerrors(init: Event.() -> Unit): Listener<Event, T> = subscribe(FULLSCREENERROR) { init(); true }\n\n    /**\n     * occurs when an element can not be displayed in fullscreen mode\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun fullscreenerrorsIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(FULLSCREENERROR, selector = selector)\n\n    /**\n     * occurs when there has been changes to the anchor part of a URL\n     */\n    val hashchanges: Listener<HashChangeEvent, T> get() = subscribe(HASHCHANGE)\n\n    /**\n     * occurs when there has been changes to the anchor part of a URL\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [HashChangeEvent]s on its [Flow]\n     */\n    fun hashchanges(init: HashChangeEvent.() -> Unit): Listener<HashChangeEvent, T> =\n        subscribe(HASHCHANGE) { init(); true }\n\n    /**\n     * occurs when there has been changes to the anchor part of a URL\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [HashChangeEvent]s on its [Flow]\n     */\n    fun hashchangesIf(selector: HashChangeEvent.() -> Boolean): Listener<HashChangeEvent, T> =\n        subscribe(HASHCHANGE, selector = selector)\n\n    /**\n     * occurs when an element gets user input has to use Event as type because Chrome and Safari offer Events instead\n     * of InputEvents when selecting from a datalist\n     */\n    val inputs: Listener<Event, T> get() = subscribe(INPUT)\n\n    /**\n     * occurs when an element gets user input has to use Event as type because Chrome and Safari offer Events instead\n     * of InputEvents when selecting from a datalist\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun inputs(init: Event.() -> Unit): Listener<Event, T> = subscribe(INPUT) { init(); true }\n\n    /**\n     * occurs when an element gets user input has to use Event as type because Chrome and Safari offer Events instead\n     * of InputEvents when selecting from a datalist\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun inputsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(INPUT, selector = selector)\n\n    /**\n     * occurs when an element is invalid\n     */\n    val invalids: Listener<Event, T> get() = subscribe(INVALID)\n\n    /**\n     * occurs when an element is invalid\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun invalids(init: Event.() -> Unit): Listener<Event, T> = subscribe(INVALID) { init(); true }\n\n    /**\n     * occurs when an element is invalid\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun invalidsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(INVALID, selector = selector)\n\n    /**\n     * occurs when the user is pressing a key\n     */\n    val keydowns: Listener<KeyboardEvent, T> get() = subscribe(KEYDOWN)\n\n    /**\n     * occurs when the user is pressing a key\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keydowns(init: KeyboardEvent.() -> Unit): Listener<KeyboardEvent, T> = subscribe(KEYDOWN) { init(); true }\n\n    /**\n     * occurs when the user is pressing a key\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keydownsIf(selector: KeyboardEvent.() -> Boolean): Listener<KeyboardEvent, T> =\n        subscribe(KEYDOWN, selector = selector)\n\n    /**\n     * occurs when the user presses a key\n     */\n    val keypresss: Listener<KeyboardEvent, T> get() = subscribe(KEYPRESS)\n\n    /**\n     * occurs when the user presses a key\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keypresss(init: KeyboardEvent.() -> Unit): Listener<KeyboardEvent, T> = subscribe(KEYPRESS) { init(); true }\n\n    /**\n     * occurs when the user presses a key\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keypresssIf(selector: KeyboardEvent.() -> Boolean): Listener<KeyboardEvent, T> =\n        subscribe(KEYPRESS, selector = selector)\n\n    /**\n     * occurs when the user releases a key\n     */\n    val keyups: Listener<KeyboardEvent, T> get() = subscribe(KEYUP)\n\n    /**\n     * occurs when the user releases a key\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keyups(init: KeyboardEvent.() -> Unit): Listener<KeyboardEvent, T> = subscribe(KEYUP) { init(); true }\n\n    /**\n     * occurs when the user releases a key\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keyupsIf(selector: KeyboardEvent.() -> Boolean): Listener<KeyboardEvent, T> =\n        subscribe(KEYUP, selector = selector)\n\n    /**\n     * occurs when an object has loaded\n     */\n    val loads: Listener<Event, T> get() = subscribe(LOAD)\n\n    /**\n     * occurs when an object has loaded\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loads(init: Event.() -> Unit): Listener<Event, T> = subscribe(LOAD) { init(); true }\n\n    /**\n     * occurs when an object has loaded\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loadsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(LOAD, selector = selector)\n\n    /**\n     * occurs when media data is loaded\n     */\n    val loadeddatas: Listener<Event, T> get() = subscribe(LOADEDDATA)\n\n    /**\n     * occurs when media data is loaded\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loadeddatas(init: Event.() -> Unit): Listener<Event, T> = subscribe(LOADEDDATA) { init(); true }\n\n    /**\n     * occurs when media data is loaded\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loadeddatasIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(LOADEDDATA, selector = selector)\n\n    /**\n     * occurs when metadata (like dimensions and duration) are loaded\n     */\n    val loadedmetadatas: Listener<Event, T> get() = subscribe(LOADEDMETADATA)\n\n    /**\n     * occurs when metadata (like dimensions and duration) are loaded\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loadedmetadatas(init: Event.() -> Unit): Listener<Event, T> = subscribe(LOADEDMETADATA) { init(); true }\n\n    /**\n     * occurs when metadata (like dimensions and duration) are loaded\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loadedmetadatasIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(LOADEDMETADATA, selector = selector)\n\n    /**\n     * occurs when the pointer is moved onto an element\n     */\n    val mouseenters: Listener<MouseEvent, T> get() = subscribe(MOUSEENTER)\n\n    /**\n     * occurs when the pointer is moved onto an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseenters(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> = subscribe(MOUSEENTER) { init(); true }\n\n    /**\n     * occurs when the pointer is moved onto an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseentersIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEENTER, selector = selector)\n\n    /**\n     * occurs when the pointer is moved out of an element\n     */\n    val mouseleaves: Listener<MouseEvent, T> get() = subscribe(MOUSELEAVE)\n\n    /**\n     * occurs when the pointer is moved out of an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseleaves(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> = subscribe(MOUSELEAVE) { init(); true }\n\n    /**\n     * occurs when the pointer is moved out of an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseleavesIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSELEAVE, selector = selector)\n\n    /**\n     * occurs when the pointer is moving while it is over an element\n     */\n    val mousemoves: Listener<MouseEvent, T> get() = subscribe(MOUSEMOVE)\n\n    /**\n     * occurs when the pointer is moving while it is over an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mousemoves(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> = subscribe(MOUSEMOVE) { init(); true }\n\n    /**\n     * occurs when the pointer is moving while it is over an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mousemovesIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEMOVE, selector = selector)\n\n    /**\n     * occurs when the pointer is moved onto an element, or onto one of its children\n     */\n    val mouseovers: Listener<MouseEvent, T> get() = subscribe(MOUSEOVER)\n\n    /**\n     * occurs when the pointer is moved onto an element, or onto one of its children\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseovers(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> = subscribe(MOUSEOVER) { init(); true }\n\n    /**\n     * occurs when the pointer is moved onto an element, or onto one of its children\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseoversIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEOVER, selector = selector)\n\n    /**\n     * occurs when a user moves the mouse pointer out of an element, or out of one of its children\n     */\n    val mouseouts: Listener<MouseEvent, T> get() = subscribe(MOUSEOUT)\n\n    /**\n     * occurs when a user moves the mouse pointer out of an element, or out of one of its children\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseouts(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> = subscribe(MOUSEOUT) { init(); true }\n\n    /**\n     * occurs when a user moves the mouse pointer out of an element, or out of one of its children\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseoutsIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEOUT, selector = selector)\n\n    /**\n     * occurs when a user releases a mouse button over an element\n     */\n    val mouseups: Listener<MouseEvent, T> get() = subscribe(MOUSEUP)\n\n    /**\n     * occurs when a user releases a mouse button over an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseups(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> = subscribe(MOUSEUP) { init(); true }\n\n    /**\n     * occurs when a user releases a mouse button over an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseupsIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEUP, selector = selector)\n\n    /**\n     * occurs when the browser starts to work offline\n     */\n    val offlines: Listener<Event, T> get() = subscribe(OFFLINE)\n\n    /**\n     * occurs when the browser starts to work offline\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun offlines(init: Event.() -> Unit): Listener<Event, T> = subscribe(OFFLINE) { init(); true }\n\n    /**\n     * occurs when the browser starts to work offline\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun offlinesIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(OFFLINE, selector = selector)\n\n    /**\n     * occurs when the browser starts to work online\n     */\n    val onlines: Listener<Event, T> get() = subscribe(ONLINE)\n\n    /**\n     * occurs when the browser starts to work online\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun onlines(init: Event.() -> Unit): Listener<Event, T> = subscribe(ONLINE) { init(); true }\n\n    /**\n     * occurs when the browser starts to work online\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun onlinesIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(ONLINE, selector = selector)\n\n    /**\n     * occurs when a connection with the event source is opened\n     */\n    val opens: Listener<Event, T> get() = subscribe(OPEN)\n\n    /**\n     * occurs when a connection with the event source is opened\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun opens(init: Event.() -> Unit): Listener<Event, T> = subscribe(OPEN) { init(); true }\n\n    /**\n     * occurs when a connection with the event source is opened\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun opensIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(OPEN, selector = selector)\n\n    /**\n     * occurs when the user navigates away from a webpage\n     */\n    val pagehides: Listener<PageTransitionEvent, T> get() = subscribe(PAGEHIDE)\n\n    /**\n     * occurs when the user navigates away from a webpage\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PageTransitionEvent]s on its [Flow]\n     */\n    fun pagehides(init: PageTransitionEvent.() -> Unit): Listener<PageTransitionEvent, T> =\n        subscribe(PAGEHIDE) { init(); true }\n\n    /**\n     * occurs when the user navigates away from a webpage\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PageTransitionEvent]s on its [Flow]\n     */\n    fun pagehidesIf(selector: PageTransitionEvent.() -> Boolean): Listener<PageTransitionEvent, T> =\n        subscribe(PAGEHIDE, selector = selector)\n\n    /**\n     * occurs when the user navigates to a webpage\n     */\n    val pageshows: Listener<PageTransitionEvent, T> get() = subscribe(PAGESHOW)\n\n    /**\n     * occurs when the user navigates to a webpage\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PageTransitionEvent]s on its [Flow]\n     */\n    fun pageshows(init: PageTransitionEvent.() -> Unit): Listener<PageTransitionEvent, T> =\n        subscribe(PAGESHOW) { init(); true }\n\n    /**\n     * occurs when the user navigates to a webpage\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PageTransitionEvent]s on its [Flow]\n     */\n    fun pageshowsIf(selector: PageTransitionEvent.() -> Boolean): Listener<PageTransitionEvent, T> =\n        subscribe(PAGESHOW, selector = selector)\n\n    /**\n     * occurs when the user pastes some content in an element\n     */\n    val pastes: Listener<ClipboardEvent, T> get() = subscribe(PASTE)\n\n    /**\n     * occurs when the user pastes some content in an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun pastes(init: ClipboardEvent.() -> Unit): Listener<ClipboardEvent, T> = subscribe(PASTE) { init(); true }\n\n    /**\n     * occurs when the user pastes some content in an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun pastesIf(selector: ClipboardEvent.() -> Boolean): Listener<ClipboardEvent, T> =\n        subscribe(PASTE, selector = selector)\n\n    /**\n     * occurs when the browser starts looking for the specified media\n     */\n    val loadstarts: Listener<ProgressEvent, T> get() = subscribe(LOADSTART)\n\n    /**\n     * occurs when the browser starts looking for the specified media\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ProgressEvent]s on its [Flow]\n     */\n    fun loadstarts(init: ProgressEvent.() -> Unit): Listener<ProgressEvent, T> = subscribe(LOADSTART) { init(); true }\n\n    /**\n     * occurs when the browser starts looking for the specified media\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ProgressEvent]s on its [Flow]\n     */\n    fun loadstartsIf(selector: ProgressEvent.() -> Boolean): Listener<ProgressEvent, T> =\n        subscribe(LOADSTART, selector = selector)\n\n    /**\n     * occurs when a message is received through the event source\n     */\n    val messages: Listener<Event, T> get() = subscribe(MESSAGE)\n\n    /**\n     * occurs when a message is received through the event source\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun messages(init: Event.() -> Unit): Listener<Event, T> = subscribe(MESSAGE) { init(); true }\n\n    /**\n     * occurs when a message is received through the event source\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun messagesIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(MESSAGE, selector = selector)\n\n    /**\n     * occurs when the user presses a mouse button over an element\n     */\n    val mousedowns: Listener<MouseEvent, T> get() = subscribe(MOUSEDOWN)\n\n    /**\n     * occurs when the user presses a mouse button over an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mousedowns(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> = subscribe(MOUSEDOWN) { init(); true }\n\n    /**\n     * occurs when the user presses a mouse button over an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mousedownsIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEDOWN, selector = selector)\n\n    /**\n     * occurs when the media is paused either by the user or programmatically\n     */\n    val pauses: Listener<Event, T> get() = subscribe(PAUSE)\n\n    /**\n     * occurs when the media is paused either by the user or programmatically\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun pauses(init: Event.() -> Unit): Listener<Event, T> = subscribe(PAUSE) { init(); true }\n\n    /**\n     * occurs when the media is paused either by the user or programmatically\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun pausesIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(PAUSE, selector = selector)\n\n    /**\n     * occurs when the media has been started or is no longer paused\n     */\n    val plays: Listener<Event, T> get() = subscribe(PLAY)\n\n    /**\n     * occurs when the media has been started or is no longer paused\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun plays(init: Event.() -> Unit): Listener<Event, T> = subscribe(PLAY) { init(); true }\n\n    /**\n     * occurs when the media has been started or is no longer paused\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun playsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(PLAY, selector = selector)\n\n    /**\n     * occurs when the media is playing after having been paused or stopped for buffering\n     */\n    val playings: Listener<Event, T> get() = subscribe(PLAYING)\n\n    /**\n     * occurs when the media is playing after having been paused or stopped for buffering\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun playings(init: Event.() -> Unit): Listener<Event, T> = subscribe(PLAYING) { init(); true }\n\n    /**\n     * occurs when the media is playing after having been paused or stopped for buffering\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun playingsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(PLAYING, selector = selector)\n\n    /**\n     * occurs when the window's history changes\n     */\n    val popstates: Listener<PopStateEvent, T> get() = subscribe(POPSTATE)\n\n    /**\n     * occurs when the window's history changes\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PopStateEvent]s on its [Flow]\n     */\n    fun popstates(init: PopStateEvent.() -> Unit): Listener<PopStateEvent, T> = subscribe(POPSTATE) { init(); true }\n\n    /**\n     * occurs when the window's history changes\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PopStateEvent]s on its [Flow]\n     */\n    fun popstatesIf(selector: PopStateEvent.() -> Boolean): Listener<PopStateEvent, T> =\n        subscribe(POPSTATE, selector = selector)\n\n    /**\n     * occurs when the browser is in the process of getting the media data (downloading the media)\n     */\n    val progresss: Listener<Event, T> get() = subscribe(PROGRESS)\n\n    /**\n     * occurs when the browser is in the process of getting the media data (downloading the media)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun progresss(init: Event.() -> Unit): Listener<Event, T> = subscribe(PROGRESS) { init(); true }\n\n    /**\n     * occurs when the browser is in the process of getting the media data (downloading the media)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun progresssIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(PROGRESS, selector = selector)\n\n    /**\n     * occurs when the playing speed of the media is changed\n     */\n    val ratechanges: Listener<Event, T> get() = subscribe(RATECHANGE)\n\n    /**\n     * occurs when the playing speed of the media is changed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun ratechanges(init: Event.() -> Unit): Listener<Event, T> = subscribe(RATECHANGE) { init(); true }\n\n    /**\n     * occurs when the playing speed of the media is changed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun ratechangesIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(RATECHANGE, selector = selector)\n\n    /**\n     * occurs when the document view is resized\n     */\n    val resizes: Listener<Event, T> get() = subscribe(RESIZE)\n\n    /**\n     * occurs when the document view is resized\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun resizes(init: Event.() -> Unit): Listener<Event, T> = subscribe(RESIZE) { init(); true }\n\n    /**\n     * occurs when the document view is resized\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun resizesIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(RESIZE, selector = selector)\n\n    /**\n     * occurs when a form is reset\n     */\n    val resets: Listener<Event, T> get() = subscribe(RESET)\n\n    /**\n     * occurs when a form is reset\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun resets(init: Event.() -> Unit): Listener<Event, T> = subscribe(RESET) { init(); true }\n\n    /**\n     * occurs when a form is reset\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun resetsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(RESET, selector = selector)\n\n    /**\n     * occurs when an element's scrollbar is being scrolled\n     */\n    val scrolls: Listener<Event, T> get() = subscribe(SCROLL)\n\n    /**\n     * occurs when an element's scrollbar is being scrolled\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun scrolls(init: Event.() -> Unit): Listener<Event, T> = subscribe(SCROLL) { init(); true }\n\n    /**\n     * occurs when an element's scrollbar is being scrolled\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun scrollsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(SCROLL, selector = selector)\n\n    /**\n     * occurs when the user writes something in a search field (for <input=\"search\">)\n     */\n    val searchs: Listener<Event, T> get() = subscribe(SEARCH)\n\n    /**\n     * occurs when the user writes something in a search field (for <input=\"search\">)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun searchs(init: Event.() -> Unit): Listener<Event, T> = subscribe(SEARCH) { init(); true }\n\n    /**\n     * occurs when the user writes something in a search field (for <input=\"search\">)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun searchsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(SEARCH, selector = selector)\n\n    /**\n     * occurs when the user is finished moving/skipping to a new position in the media\n     */\n    val seekeds: Listener<Event, T> get() = subscribe(SEEKED)\n\n    /**\n     * occurs when the user is finished moving/skipping to a new position in the media\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun seekeds(init: Event.() -> Unit): Listener<Event, T> = subscribe(SEEKED) { init(); true }\n\n    /**\n     * occurs when the user is finished moving/skipping to a new position in the media\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun seekedsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(SEEKED, selector = selector)\n\n    /**\n     * occurs when the user starts moving/skipping to a new position in the media\n     */\n    val seekings: Listener<Event, T> get() = subscribe(SEEKING)\n\n    /**\n     * occurs when the user starts moving/skipping to a new position in the media\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun seekings(init: Event.() -> Unit): Listener<Event, T> = subscribe(SEEKING) { init(); true }\n\n    /**\n     * occurs when the user starts moving/skipping to a new position in the media\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun seekingsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(SEEKING, selector = selector)\n\n    /**\n     * occurs after the user selects some text (for <input> and <textarea>)\n     */\n    val selects: Listener<Event, T> get() = subscribe(SELECT)\n\n    /**\n     * occurs after the user selects some text (for <input> and <textarea>)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun selects(init: Event.() -> Unit): Listener<Event, T> = subscribe(SELECT) { init(); true }\n\n    /**\n     * occurs after the user selects some text (for <input> and <textarea>)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun selectsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(SELECT, selector = selector)\n\n    /**\n     * occurs when a <menu> element is shown as a context menu\n     */\n    val shows: Listener<Event, T> get() = subscribe(SHOW)\n\n    /**\n     * occurs when a <menu> element is shown as a context menu\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun shows(init: Event.() -> Unit): Listener<Event, T> = subscribe(SHOW) { init(); true }\n\n    /**\n     * occurs when a <menu> element is shown as a context menu\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun showsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(SHOW, selector = selector)\n\n    /**\n     * occurs when the browser is trying to get media data, but data is not available\n     */\n    val stalleds: Listener<Event, T> get() = subscribe(STALLED)\n\n    /**\n     * occurs when the browser is trying to get media data, but data is not available\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun stalleds(init: Event.() -> Unit): Listener<Event, T> = subscribe(STALLED) { init(); true }\n\n    /**\n     * occurs when the browser is trying to get media data, but data is not available\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun stalledsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(STALLED, selector = selector)\n\n    /**\n     * occurs when a Web Storage area is updated\n     */\n    val storages: Listener<StorageEvent, T> get() = subscribe(STORAGE)\n\n    /**\n     * occurs when a Web Storage area is updated\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [StorageEvent]s on its [Flow]\n     */\n    fun storages(init: StorageEvent.() -> Unit): Listener<StorageEvent, T> = subscribe(STORAGE) { init(); true }\n\n    /**\n     * occurs when a Web Storage area is updated\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [StorageEvent]s on its [Flow]\n     */\n    fun storagesIf(selector: StorageEvent.() -> Boolean): Listener<StorageEvent, T> =\n        subscribe(STORAGE, selector = selector)\n\n    /**\n     * occurs when a form is submitted\n     */\n    val submits: Listener<Event, T> get() = subscribe(SUBMIT)\n\n    /**\n     * occurs when a form is submitted\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun submits(init: Event.() -> Unit): Listener<Event, T> = subscribe(SUBMIT) { init(); true }\n\n    /**\n     * occurs when a form is submitted\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun submitsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(SUBMIT, selector = selector)\n\n    /**\n     * occurs when the browser is intentionally not getting media data\n     */\n    val suspends: Listener<Event, T> get() = subscribe(SUSPEND)\n\n    /**\n     * occurs when the browser is intentionally not getting media data\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun suspends(init: Event.() -> Unit): Listener<Event, T> = subscribe(SUSPEND) { init(); true }\n\n    /**\n     * occurs when the browser is intentionally not getting media data\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun suspendsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(SUSPEND, selector = selector)\n\n    /**\n     * occurs when the playing position has changed (like when the user fast forwards to a different point in the media)\n     */\n    val timeupdates: Listener<Event, T> get() = subscribe(TIMEUPDATE)\n\n    /**\n     * occurs when the playing position has changed (like when the user fast forwards to a different point in the media)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun timeupdates(init: Event.() -> Unit): Listener<Event, T> = subscribe(TIMEUPDATE) { init(); true }\n\n    /**\n     * occurs when the playing position has changed (like when the user fast forwards to a different point in the media)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun timeupdatesIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(TIMEUPDATE, selector = selector)\n\n    /**\n     * occurs when the user opens or closes the <details> element\n     */\n    val toggles: Listener<Event, T> get() = subscribe(TOGGLE)\n\n    /**\n     * occurs when the user opens or closes the <details> element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun toggles(init: Event.() -> Unit): Listener<Event, T> = subscribe(TOGGLE) { init(); true }\n\n    /**\n     * occurs when the user opens or closes the <details> element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun togglesIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(TOGGLE, selector = selector)\n\n    /**\n     * occurs when the touch is interrupted\n     */\n    val touchcancels: Listener<TouchEvent, T> get() = subscribe(TOUCHCANCEL)\n\n    /**\n     * occurs when the touch is interrupted\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchcancels(init: TouchEvent.() -> Unit): Listener<TouchEvent, T> = subscribe(TOUCHCANCEL) { init(); true }\n\n    /**\n     * occurs when the touch is interrupted\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchcancelsIf(selector: TouchEvent.() -> Boolean): Listener<TouchEvent, T> =\n        subscribe(TOUCHCANCEL, selector = selector)\n\n    /**\n     * occurs when a finger is removed from a touch screen\n     */\n    val touchends: Listener<TouchEvent, T> get() = subscribe(TOUCHEND)\n\n    /**\n     * occurs when a finger is removed from a touch screen\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchends(init: TouchEvent.() -> Unit): Listener<TouchEvent, T> = subscribe(TOUCHEND) { init(); true }\n\n    /**\n     * occurs when a finger is removed from a touch screen\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchendsIf(selector: TouchEvent.() -> Boolean): Listener<TouchEvent, T> =\n        subscribe(TOUCHEND, selector = selector)\n\n    /**\n     * occurs when a finger is dragged across the screen\n     */\n    val touchmoves: Listener<TouchEvent, T> get() = subscribe(TOUCHMOVE)\n\n    /**\n     * occurs when a finger is dragged across the screen\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchmoves(init: TouchEvent.() -> Unit): Listener<TouchEvent, T> = subscribe(TOUCHMOVE) { init(); true }\n\n    /**\n     * occurs when a finger is dragged across the screen\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchmovesIf(selector: TouchEvent.() -> Boolean): Listener<TouchEvent, T> =\n        subscribe(TOUCHMOVE, selector = selector)\n\n    /**\n     * occurs when a finger is placed on a touch screen\n     */\n    val touchstarts: Listener<TouchEvent, T> get() = subscribe(TOUCHSTART)\n\n    /**\n     * occurs when a finger is placed on a touch screen\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchstarts(init: TouchEvent.() -> Unit): Listener<TouchEvent, T> = subscribe(TOUCHSTART) { init(); true }\n\n    /**\n     * occurs when a finger is placed on a touch screen\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchstartsIf(selector: TouchEvent.() -> Boolean): Listener<TouchEvent, T> =\n        subscribe(TOUCHSTART, selector = selector)\n\n    /**\n     * occurs when a CSS transition has completed\n     */\n    val transitionends: Listener<Event, T> get() = subscribe(TRANSITIONEND)\n\n    /**\n     * occurs when a CSS transition has completed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun transitionends(init: Event.() -> Unit): Listener<Event, T> = subscribe(TRANSITIONEND) { init(); true }\n\n    /**\n     * occurs when a CSS transition has completed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun transitionendsIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(TRANSITIONEND, selector = selector)\n\n    /**\n     * occurs once a page has unloaded (for <body>)\n     */\n    val unloads: Listener<Event, T> get() = subscribe(UNLOAD)\n\n    /**\n     * occurs once a page has unloaded (for <body>)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun unloads(init: Event.() -> Unit): Listener<Event, T> = subscribe(UNLOAD) { init(); true }\n\n    /**\n     * occurs once a page has unloaded (for <body>)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun unloadsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(UNLOAD, selector = selector)\n\n    /**\n     * occurs when the volume of the media has changed (includes setting the volume to \"mute\")\n     */\n    val volumechanges: Listener<Event, T> get() = subscribe(VOLUMECHANGE)\n\n    /**\n     * occurs when the volume of the media has changed (includes setting the volume to \"mute\")\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun volumechanges(init: Event.() -> Unit): Listener<Event, T> = subscribe(VOLUMECHANGE) { init(); true }\n\n    /**\n     * occurs when the volume of the media has changed (includes setting the volume to \"mute\")\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun volumechangesIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(VOLUMECHANGE, selector = selector)\n\n    /**\n     * occurs when the media has paused but is expected to resume (like when the media pauses to buffer more data)\n     */\n    val waitings: Listener<Event, T> get() = subscribe(WAITING)\n\n    /**\n     * occurs when the media has paused but is expected to resume (like when the media pauses to buffer more data)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun waitings(init: Event.() -> Unit): Listener<Event, T> = subscribe(WAITING) { init(); true }\n\n    /**\n     * occurs when the media has paused but is expected to resume (like when the media pauses to buffer more data)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun waitingsIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(WAITING, selector = selector)\n\n    /**\n     * occurs when the mouse wheel rolls up or down over an element\n     */\n    val wheels: Listener<WheelEvent, T> get() = subscribe(WHEEL)\n\n    /**\n     * occurs when the mouse wheel rolls up or down over an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [WheelEvent]s on its [Flow]\n     */\n    fun wheels(init: WheelEvent.() -> Unit): Listener<WheelEvent, T> = subscribe(WHEEL) { init(); true }\n\n    /**\n     * occurs when the mouse wheel rolls up or down over an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [WheelEvent]s on its [Flow]\n     */\n    fun wheelsIf(selector: WheelEvent.() -> Boolean): Listener<WheelEvent, T> = subscribe(WHEEL, selector = selector)\n\n    /**\n     * occurs when the loading of a media is aborted\n     */\n    val abortsCaptured: Listener<Event, T> get() = subscribe(ABORT, true)\n\n    /**\n     * occurs when the loading of a media is aborted\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun abortsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(ABORT, true) { init(); true }\n\n    /**\n     * occurs when the loading of a media is aborted\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun abortsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(ABORT, true, selector = selector)\n\n    /**\n     * occurs when a page has started printing, or if the print dialogue box has been closed\n     */\n    val afterprintsCaptured: Listener<Event, T> get() = subscribe(AFTERPRINT, true)\n\n    /**\n     * occurs when a page has started printing, or if the print dialogue box has been closed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun afterprintsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(AFTERPRINT, true) { init(); true }\n\n    /**\n     * occurs when a page has started printing, or if the print dialogue box has been closed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun afterprintsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(AFTERPRINT, true, selector = selector)\n\n    /**\n     * occurs when a CSS Animation has completed\n     */\n    val animationendsCaptured: Listener<Event, T> get() = subscribe(ANIMATIONEND, true)\n\n    /**\n     * occurs when a CSS Animation has completed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationendsCaptured(init: Event.() -> Unit): Listener<Event, T> =\n        subscribe(ANIMATIONEND, true) { init(); true }\n\n    /**\n     * occurs when a CSS Animation has completed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationendsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(ANIMATIONEND, true, selector = selector)\n\n    /**\n     * occurs when an iteration of a CSS Animation ends, and another one begins\n     */\n    val animationiterationsCaptured: Listener<Event, T> get() = subscribe(ANIMATIONITERATION, true)\n\n    /**\n     * occurs when an iteration of a CSS Animation ends, and another one begins\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationiterationsCaptured(init: Event.() -> Unit): Listener<Event, T> =\n        subscribe(ANIMATIONITERATION, true) { init(); true }\n\n    /**\n     * occurs when an iteration of a CSS Animation ends, and another one begins\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationiterationsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(ANIMATIONITERATION, true, selector = selector)\n\n    /**\n     * occurs when a CSS Animation has started\n     */\n    val animationstartsCaptured: Listener<Event, T> get() = subscribe(ANIMATIONSTART, true)\n\n    /**\n     * occurs when a CSS Animation has completed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationstartsCaptured(init: Event.() -> Unit): Listener<Event, T> =\n        subscribe(ANIMATIONSTART, true) { init(); true }\n\n    /**\n     * occurs when a CSS Animation has started\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun animationstartsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(ANIMATIONSTART, true, selector = selector)\n\n    /**\n     * occurs when a page is about to be printed\n     */\n    val beforeprintsCaptured: Listener<Event, T> get() = subscribe(BEFOREPRINT, true)\n\n    /**\n     * occurs when a page is about to be printed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun beforeprintsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(BEFOREPRINT, true) { init(); true }\n\n    /**\n     * occurs when a page is about to be printed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun beforeprintsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(BEFOREPRINT, true, selector = selector)\n\n    /**\n     * occurs before the document is about to be unloaded\n     */\n    val beforeunloadsCaptured: Listener<Event, T> get() = subscribe(BEFOREUNLOAD, true)\n\n    /**\n     * occurs before the document is about to be unloaded\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun beforeunloadsCaptured(init: Event.() -> Unit): Listener<Event, T> =\n        subscribe(BEFOREUNLOAD, true) { init(); true }\n\n    /**\n     * occurs before the document is about to be unloaded\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun beforeunloadsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(BEFOREUNLOAD, true, selector = selector)\n\n    /**\n     * occurs when an element loses focus\n     */\n    val blursCaptured: Listener<FocusEvent, T> get() = subscribe(BLUR, true)\n\n    /**\n     * occurs when an element loses focus\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun blursCaptured(init: FocusEvent.() -> Unit): Listener<FocusEvent, T> = subscribe(BLUR, true) { init(); true }\n\n    /**\n     * occurs when an element loses focus\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun blursCapturedIf(selector: FocusEvent.() -> Boolean): Listener<FocusEvent, T> =\n        subscribe(BLUR, true, selector = selector)\n\n    /**\n     * occurs when the browser can start playing the media (when it has buffered enough to begin)\n     */\n    val canplaysCaptured: Listener<Event, T> get() = subscribe(CANPLAY, true)\n\n    /**\n     * occurs when the browser can start playing the media (when it has buffered enough to begin)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun canplaysCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(CANPLAY, true) { init(); true }\n\n    /**\n     * occurs when the browser can start playing the media (when it has buffered enough to begin)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun canplaysCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(CANPLAY, true, selector = selector)\n\n    /**\n     * occurs when the browser can play through the media without stopping for buffering\n     */\n    val canplaythroughsCaptured: Listener<Event, T> get() = subscribe(CANPLAYTHROUGH, true)\n\n    /**\n     * occurs when the browser can play through the media without stopping for buffering\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun canplaythroughsCaptured(init: Event.() -> Unit): Listener<Event, T> =\n        subscribe(CANPLAYTHROUGH, true) { init(); true }\n\n    /**\n     * occurs when the browser can play through the media without stopping for buffering\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun canplaythroughsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(CANPLAYTHROUGH, true, selector = selector)\n\n    /**\n     * occurs when the content of a form element, the selection, or the checked state have changed\n     * (for `<input>`, `<select>`, and `<textarea>`)\n     */\n    val changesCaptured: Listener<Event, T> get() = subscribe(CHANGE, true)\n\n    /**\n     * occurs when the content of a form element, the selection, or the checked state have changed\n     * (for `<input>`, `<select>`, and `<textarea>`)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun changesCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(CHANGE, true) { init(); true }\n\n    /**\n     * occurs when the content of a form element, the selection, or the checked state have changed\n     * (for `<input>`, `<select>`, and `<textarea>`)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun changesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(CHANGE, true, selector = selector)\n\n    /**\n     * occurs when the user clicks on an element\n     */\n    val clicksCaptured: Listener<MouseEvent, T> get() = subscribe(CLICK, true)\n\n    /**\n     * occurs when the user clicks on an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun clicksCaptured(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> = subscribe(CLICK, true) { init(); true }\n\n    /**\n     * occurs when the user clicks on an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun clicksCapturedIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(CLICK, true, selector = selector)\n\n    /**\n     * occurs when the user right-clicks on an element to open a context menu\n     */\n    val contextmenusCaptured: Listener<MouseEvent, T> get() = subscribe(CONTEXTMENU, true)\n\n    /**\n     * occurs when the user right-clicks on an element to open a context menu\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun contextmenusCaptured(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> =\n        subscribe(CONTEXTMENU, true) { init(); true }\n\n    /**\n     * occurs when the user right-clicks on an element to open a context menu\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun contextmenusCapturedIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(CONTEXTMENU, true, selector = selector)\n\n    /**\n     * occurs when the user copies the content of an element\n     */\n    val copysCaptured: Listener<ClipboardEvent, T> get() = subscribe(COPY, true)\n\n    /**\n     * occurs when the user copies the content of an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun copysCaptured(init: ClipboardEvent.() -> Unit): Listener<ClipboardEvent, T> =\n        subscribe(COPY, true) { init(); true }\n\n    /**\n     * occurs when the user copies the content of an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun copysCapturedIf(selector: ClipboardEvent.() -> Boolean): Listener<ClipboardEvent, T> =\n        subscribe(COPY, true, selector = selector)\n\n    /**\n     * occurs when the user cuts the content of an element\n     */\n    val cutsCaptured: Listener<ClipboardEvent, T> get() = subscribe(CUT, true)\n\n    /**\n     * occurs when the user cuts the content of an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun cutsCaptured(init: ClipboardEvent.() -> Unit): Listener<ClipboardEvent, T> =\n        subscribe(CUT, true) { init(); true }\n\n    /**\n     * occurs when the user cuts the content of an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun cutsCapturedIf(selector: ClipboardEvent.() -> Boolean): Listener<ClipboardEvent, T> =\n        subscribe(CUT, true, selector = selector)\n\n    /**\n     * occurs when the user double-clicks on an element\n     */\n    val dblclicksCaptured: Listener<MouseEvent, T> get() = subscribe(DBLCLICK, true)\n\n    /**\n     * occurs when the user double-clicks on an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun dblclicksCaptured(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> =\n        subscribe(DBLCLICK, true) { init(); true }\n\n    /**\n     * occurs when the user double-clicks on an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun dblclicksCapturedIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(DBLCLICK, true, selector = selector)\n\n    /**\n     * occurs when an element is being dragged\n     */\n    val dragsCaptured: Listener<DragEvent, T> get() = subscribe(DRAG, true)\n\n    /**\n     * occurs when an element is being dragged\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragsCaptured(init: DragEvent.() -> Unit): Listener<DragEvent, T> = subscribe(DRAG, true) { init(); true }\n\n    /**\n     * occurs when an element is being dragged\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragsCapturedIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> =\n        subscribe(DRAG, true, selector = selector)\n\n    /**\n     * occurs when the user has finished dragging an element\n     */\n    val dragendsCaptured: Listener<DragEvent, T> get() = subscribe(DRAGEND, true)\n\n    /**\n     * occurs when the user has finished dragging an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragendsCaptured(init: DragEvent.() -> Unit): Listener<DragEvent, T> = subscribe(DRAGEND, true) { init(); true }\n\n    /**\n     * occurs when the user has finished dragging an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragendsCapturedIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> =\n        subscribe(DRAGEND, true, selector = selector)\n\n    /**\n     * occurs when the dragged element enters the drop target\n     */\n    val dragentersCaptured: Listener<DragEvent, T> get() = subscribe(DRAGENTER, true)\n\n    /**\n     * occurs when the dragged element enters the drop target\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragentersCaptured(init: DragEvent.() -> Unit): Listener<DragEvent, T> =\n        subscribe(DRAGENTER, true) { init(); true }\n\n    /**\n     * occurs when the dragged element enters the drop target\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragentersCapturedIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> =\n        subscribe(DRAGENTER, true, selector = selector)\n\n    /**\n     * occurs when the dragged element leaves the drop target\n     */\n    val dragleavesCaptured: Listener<DragEvent, T> get() = subscribe(DRAGLEAVE, true)\n\n    /**\n     * occurs when the dragged element leaves the drop target\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragleavesCaptured(init: DragEvent.() -> Unit): Listener<DragEvent, T> =\n        subscribe(DRAGLEAVE, true) { init(); true }\n\n    /**\n     * occurs when the dragged element leaves the drop target\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragleavesCapturedIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> =\n        subscribe(DRAGLEAVE, true, selector = selector)\n\n    /**\n     * occurs when the dragged element is over the drop target\n     */\n    val dragoversCaptured: Listener<DragEvent, T> get() = subscribe(DRAGOVER, true)\n\n    /**\n     * occurs when the dragged element is over the drop target\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragoversCaptured(init: DragEvent.() -> Unit): Listener<DragEvent, T> =\n        subscribe(DRAGOVER, true) { init(); true }\n\n    /**\n     * occurs when the dragged element is over the drop target\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragoversCapturedIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> =\n        subscribe(DRAGOVER, true, selector = selector)\n\n    /**\n     * occurs when the user starts to drag an element\n     */\n    val dragstartsCaptured: Listener<DragEvent, T> get() = subscribe(DRAGSTART, true)\n\n    /**\n     * occurs when the user starts to drag an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragstartsCaptured(init: DragEvent.() -> Unit): Listener<DragEvent, T> =\n        subscribe(DRAGSTART, true) { init(); true }\n\n    /**\n     * occurs when the user starts to drag an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dragstartsCapturedIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> =\n        subscribe(DRAGSTART, true, selector = selector)\n\n    /**\n     * occurs when the dragged element is dropped on the drop target\n     */\n    val dropsCaptured: Listener<DragEvent, T> get() = subscribe(DROP, true)\n\n    /**\n     * occurs when the dragged element is dropped on the drop target\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dropsCaptured(init: DragEvent.() -> Unit): Listener<DragEvent, T> = subscribe(DROP, true) { init(); true }\n\n    /**\n     * occurs when the dragged element is dropped on the drop target\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [DragEvent]s on its [Flow]\n     */\n    fun dropsCapturedIf(selector: DragEvent.() -> Boolean): Listener<DragEvent, T> =\n        subscribe(DROP, true, selector = selector)\n\n    /**\n     * occurs when the duration of the media is changed\n     */\n    val durationchangesCaptured: Listener<Event, T> get() = subscribe(DURATIONCHANGE, true)\n\n    /**\n     * occurs when the duration of the media is changed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun durationchangesCaptured(init: Event.() -> Unit): Listener<Event, T> =\n        subscribe(DURATIONCHANGE, true) { init(); true }\n\n    /**\n     * occurs when the duration of the media is changed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun durationchangesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(DURATIONCHANGE, true, selector = selector)\n\n    /**\n     * occurs when the media has reach the end (useful for messages like \"thanks for listening\")\n     */\n    val endedsCaptured: Listener<Event, T> get() = subscribe(ENDED, true)\n\n    /**\n     * occurs when the media has reach the end (useful for messages like \"thanks for listening\")\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun endedsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(ENDED, true) { init(); true }\n\n    /**\n     * occurs when the media has reach the end (useful for messages like \"thanks for listening\")\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun endedsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(ENDED, true, selector = selector)\n\n    /**\n     * occurs when a CSS Animation has completed\n     */\n    val errorsCaptured: Listener<Event, T> get() = subscribe(ERROR, true)\n\n    /**\n     * occurs when there is an error while loading an external file (e.g. a document or an image).\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun errorsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(ERROR, true) { init(); true }\n\n    /**\n     * occurs when there is an error while loading an external file (e.g. a document or an image).\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun errorsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(ERROR, true, selector = selector)\n\n    /**\n     * occurs when an element gets focus\n     */\n    val focussCaptured: Listener<FocusEvent, T> get() = subscribe(FOCUS, true)\n\n    /**\n     * occurs when an element gets focus\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focussCaptured(init: FocusEvent.() -> Unit): Listener<FocusEvent, T> = subscribe(FOCUS, true) { init(); true }\n\n    /**\n     * occurs when an element gets focus\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focussCapturedIf(selector: FocusEvent.() -> Boolean): Listener<FocusEvent, T> =\n        subscribe(FOCUS, true, selector = selector)\n\n    /**\n     * occurs when an element is about to get focus\n     */\n    val focusinsCaptured: Listener<FocusEvent, T> get() = subscribe(FOCUSIN, true)\n\n    /**\n     * occurs when an element is about to get focus\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focusinsCaptured(init: FocusEvent.() -> Unit): Listener<FocusEvent, T> =\n        subscribe(FOCUSIN, true) { init(); true }\n\n    /**\n     * occurs when an element is about to get focus\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focusinsCapturedIf(selector: FocusEvent.() -> Boolean): Listener<FocusEvent, T> =\n        subscribe(FOCUSIN, true, selector = selector)\n\n    /**\n     * occurs when an element is about to lose focus\n     */\n    val focusoutsCaptured: Listener<FocusEvent, T> get() = subscribe(FOCUSOUT, true)\n\n    /**\n     * occurs when an element is about to lose focus\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focusoutsCaptured(init: FocusEvent.() -> Unit): Listener<FocusEvent, T> =\n        subscribe(FOCUSOUT, true) { init(); true }\n\n    /**\n     * occurs when an element is about to lose focus\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [FocusEvent]s on its [Flow]\n     */\n    fun focusoutsCapturedIf(selector: FocusEvent.() -> Boolean): Listener<FocusEvent, T> =\n        subscribe(FOCUSOUT, true, selector = selector)\n\n    /**\n     * occurs when an element is displayed in fullscreen mode\n     */\n    val fullscreenchangesCaptured: Listener<Event, T> get() = subscribe(FULLSCREENCHANGE, true)\n\n    /**\n     * occurs when an element is displayed in fullscreen mode\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun fullscreenchangesCaptured(init: Event.() -> Unit): Listener<Event, T> =\n        subscribe(FULLSCREENCHANGE, true) { init(); true }\n\n    /**\n     * occurs when an element is displayed in fullscreen mode\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun fullscreenchangesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(FULLSCREENCHANGE, true, selector = selector)\n\n    /**\n     * occurs when an element can not be displayed in fullscreen mode\n     */\n    val fullscreenerrorsCaptured: Listener<Event, T> get() = subscribe(FULLSCREENERROR, true)\n\n    /**\n     * occurs when an element can not be displayed in fullscreen mode\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun fullscreenerrorsCaptured(init: Event.() -> Unit): Listener<Event, T> =\n        subscribe(FULLSCREENERROR, true) { init(); true }\n\n    /**\n     * occurs when an element can not be displayed in fullscreen mode\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun fullscreenerrorsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(FULLSCREENERROR, true, selector = selector)\n\n    /**\n     * occurs when there has been changes to the anchor part of a URL\n     */\n    val hashchangesCaptured: Listener<HashChangeEvent, T> get() = subscribe(HASHCHANGE, true)\n\n    /**\n     * occurs when there has been changes to the anchor part of a URL\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [HashChangeEvent]s on its [Flow]\n     */\n    fun hashchangesCaptured(init: HashChangeEvent.() -> Unit): Listener<HashChangeEvent, T> =\n        subscribe(HASHCHANGE, true) { init(); true }\n\n    /**\n     * occurs when there has been changes to the anchor part of a URL\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [HashChangeEvent]s on its [Flow]\n     */\n    fun hashchangesCapturedIf(selector: HashChangeEvent.() -> Boolean): Listener<HashChangeEvent, T> =\n        subscribe(HASHCHANGE, true, selector = selector)\n\n    /**\n     * occurs when an element gets user input has to use Event as type because Chrome and Safari offer Events instead\n     * of InputEvents when selecting from a datalist\n     */\n    val inputsCaptured: Listener<Event, T> get() = subscribe(INPUT, true)\n\n    /**\n     * occurs when an element gets user input has to use Event as type because Chrome and Safari offer Events instead\n     * of InputEvents when selecting from a datalist\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun inputsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(INPUT, true) { init(); true }\n\n    /**\n     * occurs when an element gets user input has to use Event as type because Chrome and Safari offer Events instead\n     * of InputEvents when selecting from a datalist\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun inputsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(INPUT, true, selector = selector)\n\n    /**\n     * occurs when an element is invalid\n     */\n    val invalidsCaptured: Listener<Event, T> get() = subscribe(INVALID, true)\n\n    /**\n     * occurs when an element is invalid\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun invalidsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(INVALID, true) { init(); true }\n\n    /**\n     * occurs when an element is invalid\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun invalidsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(INVALID, true, selector = selector)\n\n    /**\n     * occurs when the user is pressing a key\n     */\n    val keydownsCaptured: Listener<KeyboardEvent, T> get() = subscribe(KEYDOWN, true)\n\n    /**\n     * occurs when the user is pressing a key\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keydownsCaptured(init: KeyboardEvent.() -> Unit): Listener<KeyboardEvent, T> =\n        subscribe(KEYDOWN, true) { init(); true }\n\n    /**\n     * occurs when the user is pressing a key\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keydownsCapturedIf(selector: KeyboardEvent.() -> Boolean): Listener<KeyboardEvent, T> =\n        subscribe(KEYDOWN, true, selector = selector)\n\n    /**\n     * occurs when the user presses a key\n     */\n    val keypresssCaptured: Listener<KeyboardEvent, T> get() = subscribe(KEYPRESS, true)\n\n    /**\n     * occurs when the user presses a key\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keypresssCaptured(init: KeyboardEvent.() -> Unit): Listener<KeyboardEvent, T> =\n        subscribe(KEYPRESS, true) { init(); true }\n\n    /**\n     * occurs when the user presses a key\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keypresssCapturedIf(selector: KeyboardEvent.() -> Boolean): Listener<KeyboardEvent, T> =\n        subscribe(KEYPRESS, true, selector = selector)\n\n    /**\n     * occurs when the user releases a key\n     */\n    val keyupsCaptured: Listener<KeyboardEvent, T> get() = subscribe(KEYUP, true)\n\n    /**\n     * occurs when the user releases a key\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keyupsCaptured(init: KeyboardEvent.() -> Unit): Listener<KeyboardEvent, T> =\n        subscribe(KEYUP, true) { init(); true }\n\n    /**\n     * occurs when the user releases a key\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [KeyboardEvent]s on its [Flow]\n     */\n    fun keyupsCapturedIf(selector: KeyboardEvent.() -> Boolean): Listener<KeyboardEvent, T> =\n        subscribe(KEYUP, true, selector = selector)\n\n    /**\n     * occurs when an object has loaded\n     */\n    val loadsCaptured: Listener<Event, T> get() = subscribe(LOAD, true)\n\n    /**\n     * occurs when an object has loaded\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loadsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(LOAD, true) { init(); true }\n\n    /**\n     * occurs when an object has loaded\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loadsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(LOAD, true, selector = selector)\n\n    /**\n     * occurs when media data is loaded\n     */\n    val loadeddatasCaptured: Listener<Event, T> get() = subscribe(LOADEDDATA, true)\n\n    /**\n     * occurs when media data is loaded\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loadeddatasCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(LOADEDDATA, true) { init(); true }\n\n    /**\n     * occurs when media data is loaded\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loadeddatasCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(LOADEDDATA, true, selector = selector)\n\n    /**\n     * occurs when metadata (like dimensions and duration) are loaded\n     */\n    val loadedmetadatasCaptured: Listener<Event, T> get() = subscribe(LOADEDMETADATA, true)\n\n    /**\n     * occurs when metadata (like dimensions and duration) are loaded\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loadedmetadatasCaptured(init: Event.() -> Unit): Listener<Event, T> =\n        subscribe(LOADEDMETADATA, true) { init(); true }\n\n    /**\n     * occurs when metadata (like dimensions and duration) are loaded\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun loadedmetadatasCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(LOADEDMETADATA, true, selector = selector)\n\n    /**\n     * occurs when the pointer is moved onto an element\n     */\n    val mouseentersCaptured: Listener<MouseEvent, T> get() = subscribe(MOUSEENTER, true)\n\n    /**\n     * occurs when the pointer is moved onto an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseentersCaptured(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> =\n        subscribe(MOUSEENTER, true) { init(); true }\n\n    /**\n     * occurs when the pointer is moved onto an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseentersCapturedIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEENTER, true, selector = selector)\n\n    /**\n     * occurs when the pointer is moved out of an element\n     */\n    val mouseleavesCaptured: Listener<MouseEvent, T> get() = subscribe(MOUSELEAVE, true)\n\n    /**\n     * occurs when the pointer is moved out of an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseleavesCaptured(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> =\n        subscribe(MOUSELEAVE, true) { init(); true }\n\n    /**\n     * occurs when the pointer is moved out of an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseleavesCapturedIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSELEAVE, true, selector = selector)\n\n    /**\n     * occurs when the pointer is moving while it is over an element\n     */\n    val mousemovesCaptured: Listener<MouseEvent, T> get() = subscribe(MOUSEMOVE, true)\n\n    /**\n     * occurs when the pointer is moving while it is over an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mousemovesCaptured(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> =\n        subscribe(MOUSEMOVE, true) { init(); true }\n\n    /**\n     * occurs when the pointer is moving while it is over an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mousemovesCapturedIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEMOVE, true, selector = selector)\n\n    /**\n     * occurs when the pointer is moved onto an element, or onto one of its children\n     */\n    val mouseoversCaptured: Listener<MouseEvent, T> get() = subscribe(MOUSEOVER, true)\n\n    /**\n     * occurs when the pointer is moved onto an element, or onto one of its children\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseoversCaptured(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> =\n        subscribe(MOUSEOVER, true) { init(); true }\n\n    /**\n     * occurs when the pointer is moved onto an element, or onto one of its children\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseoversCapturedIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEOVER, true, selector = selector)\n\n    /**\n     * occurs when a user moves the mouse pointer out of an element, or out of one of its children\n     */\n    val mouseoutsCaptured: Listener<MouseEvent, T> get() = subscribe(MOUSEOUT, true)\n\n    /**\n     * occurs when a user moves the mouse pointer out of an element, or out of one of its children\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseoutsCaptured(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> =\n        subscribe(MOUSEOUT, true) { init(); true }\n\n    /**\n     * occurs when a user moves the mouse pointer out of an element, or out of one of its children\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseoutsCapturedIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEOUT, true, selector = selector)\n\n    /**\n     * occurs when a user releases a mouse button over an element\n     */\n    val mouseupsCaptured: Listener<MouseEvent, T> get() = subscribe(MOUSEUP, true)\n\n    /**\n     * occurs when a user releases a mouse button over an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseupsCaptured(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> =\n        subscribe(MOUSEUP, true) { init(); true }\n\n    /**\n     * occurs when a user releases a mouse button over an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mouseupsCapturedIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEUP, true, selector = selector)\n\n    /**\n     * occurs when the browser starts to work offline\n     */\n    val offlinesCaptured: Listener<Event, T> get() = subscribe(OFFLINE, true)\n\n    /**\n     * occurs when the browser starts to work offline\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun offlinesCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(OFFLINE, true) { init(); true }\n\n    /**\n     * occurs when the browser starts to work offline\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun offlinesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(OFFLINE, true, selector = selector)\n\n    /**\n     * occurs when the browser starts to work online\n     */\n    val onlinesCaptured: Listener<Event, T> get() = subscribe(ONLINE, true)\n\n    /**\n     * occurs when the browser starts to work online\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun onlinesCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(ONLINE, true) { init(); true }\n\n    /**\n     * occurs when the browser starts to work online\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun onlinesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(ONLINE, true, selector = selector)\n\n    /**\n     * occurs when a connection with the event source is opened\n     */\n    val opensCaptured: Listener<Event, T> get() = subscribe(OPEN, true)\n\n    /**\n     * occurs when a connection with the event source is opened\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun opensCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(OPEN, true) { init(); true }\n\n    /**\n     * occurs when a connection with the event source is opened\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun opensCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(OPEN, true, selector = selector)\n\n    /**\n     * occurs when the user navigates away from a webpage\n     */\n    val pagehidesCaptured: Listener<PageTransitionEvent, T> get() = subscribe(PAGEHIDE, true)\n\n    /**\n     * occurs when the user navigates away from a webpage\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PageTransitionEvent]s on its [Flow]\n     */\n    fun pagehidesCaptured(init: PageTransitionEvent.() -> Unit): Listener<PageTransitionEvent, T> =\n        subscribe(PAGEHIDE, true) { init(); true }\n\n    /**\n     * occurs when the user navigates away from a webpage\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PageTransitionEvent]s on its [Flow]\n     */\n    fun pagehidesCapturedIf(selector: PageTransitionEvent.() -> Boolean): Listener<PageTransitionEvent, T> =\n        subscribe(PAGEHIDE, true, selector = selector)\n\n    /**\n     * occurs when the user navigates to a webpage\n     */\n    val pageshowsCaptured: Listener<PageTransitionEvent, T> get() = subscribe(PAGESHOW, true)\n\n    /**\n     * occurs when the user navigates to a webpage\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PageTransitionEvent]s on its [Flow]\n     */\n    fun pageshowsCaptured(init: PageTransitionEvent.() -> Unit): Listener<PageTransitionEvent, T> =\n        subscribe(PAGESHOW, true) { init(); true }\n\n    /**\n     * occurs when the user navigates to a webpage\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PageTransitionEvent]s on its [Flow]\n     */\n    fun pageshowsCapturedIf(selector: PageTransitionEvent.() -> Boolean): Listener<PageTransitionEvent, T> =\n        subscribe(PAGESHOW, true, selector = selector)\n\n    /**\n     * occurs when the user pastes some content in an element\n     */\n    val pastesCaptured: Listener<ClipboardEvent, T> get() = subscribe(PASTE, true)\n\n    /**\n     * occurs when the user pastes some content in an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun pastesCaptured(init: ClipboardEvent.() -> Unit): Listener<ClipboardEvent, T> =\n        subscribe(PASTE, true) { init(); true }\n\n    /**\n     * occurs when the user pastes some content in an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ClipboardEvent]s on its [Flow]\n     */\n    fun pastesCapturedIf(selector: ClipboardEvent.() -> Boolean): Listener<ClipboardEvent, T> =\n        subscribe(PASTE, true, selector = selector)\n\n    /**\n     * occurs when the browser starts looking for the specified media\n     */\n    val loadstartsCaptured: Listener<ProgressEvent, T> get() = subscribe(LOADSTART, true)\n\n    /**\n     * occurs when the browser starts looking for the specified media\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ProgressEvent]s on its [Flow]\n     */\n    fun loadstartsCaptured(init: ProgressEvent.() -> Unit): Listener<ProgressEvent, T> =\n        subscribe(LOADSTART, true) { init(); true }\n\n    /**\n     * occurs when the browser starts looking for the specified media\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [ProgressEvent]s on its [Flow]\n     */\n    fun loadstartsCapturedIf(selector: ProgressEvent.() -> Boolean): Listener<ProgressEvent, T> =\n        subscribe(LOADSTART, true, selector = selector)\n\n    /**\n     * occurs when a message is received through the event source\n     */\n    val messagesCaptured: Listener<Event, T> get() = subscribe(MESSAGE, true)\n\n    /**\n     * occurs when a message is received through the event source\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun messagesCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(MESSAGE, true) { init(); true }\n\n    /**\n     * occurs when a message is received through the event source\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun messagesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(MESSAGE, true, selector = selector)\n\n    /**\n     * occurs when the user presses a mouse button over an element\n     */\n    val mousedownsCaptured: Listener<MouseEvent, T> get() = subscribe(MOUSEDOWN, true)\n\n    /**\n     * occurs when the user presses a mouse button over an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mousedownsCaptured(init: MouseEvent.() -> Unit): Listener<MouseEvent, T> =\n        subscribe(MOUSEDOWN, true) { init(); true }\n\n    /**\n     * occurs when the user presses a mouse button over an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [MouseEvent]s on its [Flow]\n     */\n    fun mousedownsCapturedIf(selector: MouseEvent.() -> Boolean): Listener<MouseEvent, T> =\n        subscribe(MOUSEDOWN, true, selector = selector)\n\n    /**\n     * occurs when the media is paused either by the user or programmatically\n     */\n    val pausesCaptured: Listener<Event, T> get() = subscribe(PAUSE, true)\n\n    /**\n     * occurs when the media is paused either by the user or programmatically\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun pausesCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(PAUSE, true) { init(); true }\n\n    /**\n     * occurs when the media is paused either by the user or programmatically\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun pausesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(PAUSE, true, selector = selector)\n\n    /**\n     * occurs when the media has been started or is no longer paused\n     */\n    val playsCaptured: Listener<Event, T> get() = subscribe(PLAY, true)\n\n    /**\n     * occurs when the media has been started or is no longer paused\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun playsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(PLAY, true) { init(); true }\n\n    /**\n     * occurs when the media has been started or is no longer paused\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun playsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(PLAY, true, selector = selector)\n\n    /**\n     * occurs when the media is playing after having been paused or stopped for buffering\n     */\n    val playingsCaptured: Listener<Event, T> get() = subscribe(PLAYING, true)\n\n    /**\n     * occurs when the media is playing after having been paused or stopped for buffering\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun playingsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(PLAYING, true) { init(); true }\n\n    /**\n     * occurs when the media is playing after having been paused or stopped for buffering\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun playingsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(PLAYING, true, selector = selector)\n\n    /**\n     * occurs when the window's history changes\n     */\n    val popstatesCaptured: Listener<PopStateEvent, T> get() = subscribe(POPSTATE, true)\n\n    /**\n     * occurs when the window's history changes\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PopStateEvent]s on its [Flow]\n     */\n    fun popstatesCaptured(init: PopStateEvent.() -> Unit): Listener<PopStateEvent, T> =\n        subscribe(POPSTATE, true) { init(); true }\n\n    /**\n     * occurs when the window's history changes\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [PopStateEvent]s on its [Flow]\n     */\n    fun popstatesCapturedIf(selector: PopStateEvent.() -> Boolean): Listener<PopStateEvent, T> =\n        subscribe(POPSTATE, true, selector = selector)\n\n    /**\n     * occurs when the browser is in the process of getting the media data (downloading the media)\n     */\n    val progresssCaptured: Listener<Event, T> get() = subscribe(PROGRESS, true)\n\n    /**\n     * occurs when the browser is in the process of getting the media data (downloading the media)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun progresssCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(PROGRESS, true) { init(); true }\n\n    /**\n     * occurs when the browser is in the process of getting the media data (downloading the media)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun progresssCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(PROGRESS, true, selector = selector)\n\n    /**\n     * occurs when the playing speed of the media is changed\n     */\n    val ratechangesCaptured: Listener<Event, T> get() = subscribe(RATECHANGE, true)\n\n    /**\n     * occurs when the playing speed of the media is changed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun ratechangesCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(RATECHANGE, true) { init(); true }\n\n    /**\n     * occurs when the playing speed of the media is changed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun ratechangesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(RATECHANGE, true, selector = selector)\n\n    /**\n     * occurs when the document view is resized\n     */\n    val resizesCaptured: Listener<Event, T> get() = subscribe(RESIZE, true)\n\n    /**\n     * occurs when the document view is resized\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun resizesCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(RESIZE, true) { init(); true }\n\n    /**\n     * occurs when the document view is resized\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun resizesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(RESIZE, true, selector = selector)\n\n    /**\n     * occurs when a form is reset\n     */\n    val resetsCaptured: Listener<Event, T> get() = subscribe(RESET, true)\n\n    /**\n     * occurs when a form is reset\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun resetsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(RESET, true) { init(); true }\n\n    /**\n     * occurs when a form is reset\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun resetsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(RESET, true, selector = selector)\n\n    /**\n     * occurs when an element's scrollbar is being scrolled\n     */\n    val scrollsCaptured: Listener<Event, T> get() = subscribe(SCROLL, true)\n\n    /**\n     * occurs when an element's scrollbar is being scrolled\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun scrollsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(SCROLL, true) { init(); true }\n\n    /**\n     * occurs when an element's scrollbar is being scrolled\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun scrollsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(SCROLL, true, selector = selector)\n\n    /**\n     * occurs when the user writes something in a search field (for <input=\"search\">)\n     */\n    val searchsCaptured: Listener<Event, T> get() = subscribe(SEARCH, true)\n\n    /**\n     * occurs when the user writes something in a search field (for <input=\"search\">)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun searchsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(SEARCH, true) { init(); true }\n\n    /**\n     * occurs when the user writes something in a search field (for <input=\"search\">)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun searchsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(SEARCH, true, selector = selector)\n\n    /**\n     * occurs when the user is finished moving/skipping to a new position in the media\n     */\n    val seekedsCaptured: Listener<Event, T> get() = subscribe(SEEKED, true)\n\n    /**\n     * occurs when the user is finished moving/skipping to a new position in the media\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun seekedsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(SEEKED, true) { init(); true }\n\n    /**\n     * occurs when the user is finished moving/skipping to a new position in the media\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun seekedsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(SEEKED, true, selector = selector)\n\n    /**\n     * occurs when the user starts moving/skipping to a new position in the media\n     */\n    val seekingsCaptured: Listener<Event, T> get() = subscribe(SEEKING, true)\n\n    /**\n     * occurs when the user starts moving/skipping to a new position in the media\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun seekingsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(SEEKING, true) { init(); true }\n\n    /**\n     * occurs when the user starts moving/skipping to a new position in the media\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun seekingsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(SEEKING, true, selector = selector)\n\n    /**\n     * occurs after the user selects some text (for <input> and <textarea>)\n     */\n    val selectsCaptured: Listener<Event, T> get() = subscribe(SELECT, true)\n\n    /**\n     * occurs after the user selects some text (for <input> and <textarea>)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun selectsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(SELECT, true) { init(); true }\n\n    /**\n     * occurs after the user selects some text (for <input> and <textarea>)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun selectsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(SELECT, true, selector = selector)\n\n    /**\n     * occurs when a <menu> element is shown as a context menu\n     */\n    val showsCaptured: Listener<Event, T> get() = subscribe(SHOW, true)\n\n    /**\n     * occurs when a <menu> element is shown as a context menu\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun showsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(SHOW, true) { init(); true }\n\n    /**\n     * occurs when a <menu> element is shown as a context menu\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun showsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> = subscribe(SHOW, true, selector = selector)\n\n    /**\n     * occurs when the browser is trying to get media data, but data is not available\n     */\n    val stalledsCaptured: Listener<Event, T> get() = subscribe(STALLED, true)\n\n    /**\n     * occurs when the browser is trying to get media data, but data is not available\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun stalledsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(STALLED, true) { init(); true }\n\n    /**\n     * occurs when the browser is trying to get media data, but data is not available\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun stalledsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(STALLED, true, selector = selector)\n\n    /**\n     * occurs when a Web Storage area is updated\n     */\n    val storagesCaptured: Listener<StorageEvent, T> get() = subscribe(STORAGE, true)\n\n    /**\n     * occurs when a Web Storage area is updated\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [StorageEvent]s on its [Flow]\n     */\n    fun storagesCaptured(init: StorageEvent.() -> Unit): Listener<StorageEvent, T> =\n        subscribe(STORAGE, true) { init(); true }\n\n    /**\n     * occurs when a Web Storage area is updated\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [StorageEvent]s on its [Flow]\n     */\n    fun storagesCapturedIf(selector: StorageEvent.() -> Boolean): Listener<StorageEvent, T> =\n        subscribe(STORAGE, true, selector = selector)\n\n    /**\n     * occurs when a form is submitted\n     */\n    val submitsCaptured: Listener<Event, T> get() = subscribe(SUBMIT, true)\n\n    /**\n     * occurs when a form is submitted\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun submitsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(SUBMIT, true) { init(); true }\n\n    /**\n     * occurs when a form is submitted\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun submitsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(SUBMIT, true, selector = selector)\n\n    /**\n     * occurs when the browser is intentionally not getting media data\n     */\n    val suspendsCaptured: Listener<Event, T> get() = subscribe(SUSPEND, true)\n\n    /**\n     * occurs when the browser is intentionally not getting media data\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun suspendsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(SUSPEND, true) { init(); true }\n\n    /**\n     * occurs when the browser is intentionally not getting media data\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun suspendsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(SUSPEND, true, selector = selector)\n\n    /**\n     * occurs when the playing position has changed (like when the user fast forwards to a different point in the media)\n     */\n    val timeupdatesCaptured: Listener<Event, T> get() = subscribe(TIMEUPDATE, true)\n\n    /**\n     * occurs when the playing position has changed (like when the user fast forwards to a different point in the media)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun timeupdatesCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(TIMEUPDATE, true) { init(); true }\n\n    /**\n     * occurs when the playing position has changed (like when the user fast forwards to a different point in the media)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun timeupdatesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(TIMEUPDATE, true, selector = selector)\n\n    /**\n     * occurs when the user opens or closes the <details> element\n     */\n    val togglesCaptured: Listener<Event, T> get() = subscribe(TOGGLE, true)\n\n    /**\n     * occurs when the user opens or closes the <details> element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun togglesCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(TOGGLE, true) { init(); true }\n\n    /**\n     * occurs when the user opens or closes the <details> element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun togglesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(TOGGLE, true, selector = selector)\n\n    /**\n     * occurs when the touch is interrupted\n     */\n    val touchcancelsCaptured: Listener<TouchEvent, T> get() = subscribe(TOUCHCANCEL, true)\n\n    /**\n     * occurs when the touch is interrupted\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchcancelsCaptured(init: TouchEvent.() -> Unit): Listener<TouchEvent, T> =\n        subscribe(TOUCHCANCEL, true) { init(); true }\n\n    /**\n     * occurs when the touch is interrupted\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchcancelsCapturedIf(selector: TouchEvent.() -> Boolean): Listener<TouchEvent, T> =\n        subscribe(TOUCHCANCEL, true, selector = selector)\n\n    /**\n     * occurs when a finger is removed from a touch screen\n     */\n    val touchendsCaptured: Listener<TouchEvent, T> get() = subscribe(TOUCHEND, true)\n\n    /**\n     * occurs when a finger is removed from a touch screen\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchendsCaptured(init: TouchEvent.() -> Unit): Listener<TouchEvent, T> =\n        subscribe(TOUCHEND, true) { init(); true }\n\n    /**\n     * occurs when a finger is removed from a touch screen\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchendsCapturedIf(selector: TouchEvent.() -> Boolean): Listener<TouchEvent, T> =\n        subscribe(TOUCHEND, true, selector = selector)\n\n    /**\n     * occurs when a finger is dragged across the screen\n     */\n    val touchmovesCaptured: Listener<TouchEvent, T> get() = subscribe(TOUCHMOVE, true)\n\n    /**\n     * occurs when a finger is dragged across the screen\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchmovesCaptured(init: TouchEvent.() -> Unit): Listener<TouchEvent, T> =\n        subscribe(TOUCHMOVE, true) { init(); true }\n\n    /**\n     * occurs when a finger is dragged across the screen\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchmovesCapturedIf(selector: TouchEvent.() -> Boolean): Listener<TouchEvent, T> =\n        subscribe(TOUCHMOVE, true, selector = selector)\n\n    /**\n     * occurs when a finger is placed on a touch screen\n     */\n    val touchstartsCaptured: Listener<TouchEvent, T> get() = subscribe(TOUCHSTART, true)\n\n    /**\n     * occurs when a finger is placed on a touch screen\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchstartsCaptured(init: TouchEvent.() -> Unit): Listener<TouchEvent, T> =\n        subscribe(TOUCHSTART, true) { init(); true }\n\n    /**\n     * occurs when a finger is placed on a touch screen\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [TouchEvent]s on its [Flow]\n     */\n    fun touchstartsCapturedIf(selector: TouchEvent.() -> Boolean): Listener<TouchEvent, T> =\n        subscribe(TOUCHSTART, true, selector = selector)\n\n    /**\n     * occurs when a CSS transition has completed\n     */\n    val transitionendsCaptured: Listener<Event, T> get() = subscribe(TRANSITIONEND, true)\n\n    /**\n     * occurs when a CSS transition has completed\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun transitionendsCaptured(init: Event.() -> Unit): Listener<Event, T> =\n        subscribe(TRANSITIONEND, true) { init(); true }\n\n    /**\n     * occurs when a CSS transition has completed\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun transitionendsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(TRANSITIONEND, true, selector = selector)\n\n    /**\n     * occurs once a page has unloaded (for <body>)\n     */\n    val unloadsCaptured: Listener<Event, T> get() = subscribe(UNLOAD, true)\n\n    /**\n     * occurs once a page has unloaded (for <body>)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun unloadsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(UNLOAD, true) { init(); true }\n\n    /**\n     * occurs once a page has unloaded (for <body>)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun unloadsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(UNLOAD, true, selector = selector)\n\n    /**\n     * occurs when the volume of the media has changed (includes setting the volume to \"mute\")\n     */\n    val volumechangesCaptured: Listener<Event, T> get() = subscribe(VOLUMECHANGE, true)\n\n    /**\n     * occurs when the volume of the media has changed (includes setting the volume to \"mute\")\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun volumechangesCaptured(init: Event.() -> Unit): Listener<Event, T> =\n        subscribe(VOLUMECHANGE, true) { init(); true }\n\n    /**\n     * occurs when the volume of the media has changed (includes setting the volume to \"mute\")\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun volumechangesCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(VOLUMECHANGE, true, selector = selector)\n\n    /**\n     * occurs when the media has paused but is expected to resume (like when the media pauses to buffer more data)\n     */\n    val waitingsCaptured: Listener<Event, T> get() = subscribe(WAITING, true)\n\n    /**\n     * occurs when the media has paused but is expected to resume (like when the media pauses to buffer more data)\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun waitingsCaptured(init: Event.() -> Unit): Listener<Event, T> = subscribe(WAITING, true) { init(); true }\n\n    /**\n     * occurs when the media has paused but is expected to resume (like when the media pauses to buffer more data)\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [Event]s on its [Flow]\n     */\n    fun waitingsCapturedIf(selector: Event.() -> Boolean): Listener<Event, T> =\n        subscribe(WAITING, true, selector = selector)\n\n    /**\n     * occurs when the mouse wheel rolls up or down over an element\n     */\n    val wheelsCaptured: Listener<WheelEvent, T> get() = subscribe(WHEEL, true)\n\n    /**\n     * occurs when the mouse wheel rolls up or down over an element\n     *\n     * @param init expression to manipulate the event dispatching like calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [WheelEvent]s on its [Flow]\n     */\n    fun wheelsCaptured(init: WheelEvent.() -> Unit): Listener<WheelEvent, T> = subscribe(WHEEL, true) { init(); true }\n\n    /**\n     * occurs when the mouse wheel rolls up or down over an element\n     *\n     * @param selector expression to evaluate, which specific event should be emitted to the [Flow]. It is also\n     * possible and encouraged to manipulate the event dispatching by calling `stopPropagation` or similar DOM-API.\n     *\n     * @return a [Listener] that emits [WheelEvent]s on its [Flow]\n     */\n    fun wheelsCapturedIf(selector: WheelEvent.() -> Boolean): Listener<WheelEvent, T> =\n        subscribe(WHEEL, true, selector = selector)\n}\n\n/**\n * Represents all [Event]s of the browser [window] object as [Event]-flows\n */\nobject Window : WithEvents<Window> {\n\n    private val scope = MainScope()\n\n    override fun <X : Event> subscribe(\n        eventName: String,\n        capture: Boolean,\n        selector: X.() -> Boolean\n    ): Listener<X, Window> =\n        Listener(window.subscribe<X, Window>(eventName, capture, selector).shareIn(scope, SharingStarted.Lazily))\n\n    override val aborts by lazy { super.aborts }\n    override val afterprints by lazy { super.afterprints }\n    override val animationends by lazy { super.animationends }\n    override val animationiterations by lazy { super.animationiterations }\n    override val animationstarts by lazy { super.animationstarts }\n    override val beforeprints by lazy { super.beforeprints }\n    override val beforeunloads by lazy { super.beforeunloads }\n    override val blurs by lazy { super.blurs }\n    override val canplays by lazy { super.canplays }\n    override val canplaythroughs by lazy { super.canplaythroughs }\n    override val changes by lazy { super.changes }\n    override val clicks by lazy { super.clicks }\n    override val contextmenus by lazy { super.contextmenus }\n    override val copys by lazy { super.copys }\n    override val cuts by lazy { super.cuts }\n    override val dblclicks by lazy { super.dblclicks }\n    override val drags by lazy { super.drags }\n    override val dragends by lazy { super.dragends }\n    override val dragenters by lazy { super.dragenters }\n    override val dragleaves by lazy { super.dragleaves }\n    override val dragovers by lazy { super.dragovers }\n    override val dragstarts by lazy { super.dragstarts }\n    override val drops by lazy { super.drops }\n    override val durationchanges by lazy { super.durationchanges }\n    override val endeds by lazy { super.endeds }\n    override val errors by lazy { super.errors }\n    override val focuss by lazy { super.focuss }\n    override val focusins by lazy { super.focusins }\n    override val focusouts by lazy { super.focusouts }\n    override val fullscreenchanges by lazy { super.fullscreenchanges }\n    override val fullscreenerrors by lazy { super.fullscreenerrors }\n    override val hashchanges by lazy { super.hashchanges }\n    override val inputs by lazy { super.inputs }\n    override val invalids by lazy { super.invalids }\n    override val keydowns by lazy { super.keydowns }\n    override val keypresss by lazy { super.keypresss }\n    override val keyups by lazy { super.keyups }\n    override val loads by lazy { super.loads }\n    override val loadeddatas by lazy { super.loadeddatas }\n    override val loadedmetadatas by lazy { super.loadedmetadatas }\n    override val loadstarts by lazy { super.loadstarts }\n    override val messages by lazy { super.messages }\n    override val mousedowns by lazy { super.mousedowns }\n    override val mouseenters by lazy { super.mouseenters }\n    override val mouseleaves by lazy { super.mouseleaves }\n    override val mousemoves by lazy { super.mousemoves }\n    override val mouseovers by lazy { super.mouseovers }\n    override val mouseouts by lazy { super.mouseouts }\n    override val mouseups by lazy { super.mouseups }\n    override val offlines by lazy { super.offlines }\n    override val onlines by lazy { super.onlines }\n    override val opens by lazy { super.opens }\n    override val pagehides by lazy { super.pagehides }\n    override val pageshows by lazy { super.pageshows }\n    override val pastes by lazy { super.pastes }\n    override val pauses by lazy { super.pauses }\n    override val plays by lazy { super.plays }\n    override val playings by lazy { super.playings }\n    override val popstates by lazy { super.popstates }\n    override val progresss by lazy { super.progresss }\n    override val ratechanges by lazy { super.ratechanges }\n    override val resizes by lazy { super.resizes }\n    override val resets by lazy { super.resets }\n    override val scrolls by lazy { super.scrolls }\n    override val searchs by lazy { super.searchs }\n    override val seekeds by lazy { super.seekeds }\n    override val seekings by lazy { super.seekings }\n    override val selects by lazy { super.selects }\n    override val shows by lazy { super.shows }\n    override val stalleds by lazy { super.stalleds }\n    override val storages by lazy { super.storages }\n    override val submits by lazy { super.submits }\n    override val suspends by lazy { super.suspends }\n    override val timeupdates by lazy { super.timeupdates }\n    override val toggles by lazy { super.toggles }\n    override val touchcancels by lazy { super.touchcancels }\n    override val touchends by lazy { super.touchends }\n    override val touchmoves by lazy { super.touchmoves }\n    override val touchstarts by lazy { super.touchstarts }\n    override val transitionends by lazy { super.transitionends }\n    override val unloads by lazy { super.unloads }\n    override val volumechanges by lazy { super.volumechanges }\n    override val waitings by lazy { super.waitings }\n    override val wheels by lazy { super.wheels }\n\n    override val abortsCaptured by lazy { super.abortsCaptured }\n    override val afterprintsCaptured by lazy { super.afterprintsCaptured }\n    override val animationendsCaptured by lazy { super.animationendsCaptured }\n    override val animationiterationsCaptured by lazy { super.animationiterationsCaptured }\n    override val animationstartsCaptured by lazy { super.animationstartsCaptured }\n    override val beforeprintsCaptured by lazy { super.beforeprintsCaptured }\n    override val beforeunloadsCaptured by lazy { super.beforeunloadsCaptured }\n    override val blursCaptured by lazy { super.blursCaptured }\n    override val canplaysCaptured by lazy { super.canplaysCaptured }\n    override val canplaythroughsCaptured by lazy { super.canplaythroughsCaptured }\n    override val changesCaptured by lazy { super.changesCaptured }\n    override val clicksCaptured by lazy { super.clicksCaptured }\n    override val contextmenusCaptured by lazy { super.contextmenusCaptured }\n    override val copysCaptured by lazy { super.copysCaptured }\n    override val cutsCaptured by lazy { super.cutsCaptured }\n    override val dblclicksCaptured by lazy { super.dblclicksCaptured }\n    override val dragsCaptured by lazy { super.dragsCaptured }\n    override val dragendsCaptured by lazy { super.dragendsCaptured }\n    override val dragentersCaptured by lazy { super.dragentersCaptured }\n    override val dragleavesCaptured by lazy { super.dragleavesCaptured }\n    override val dragoversCaptured by lazy { super.dragoversCaptured }\n    override val dragstartsCaptured by lazy { super.dragstartsCaptured }\n    override val dropsCaptured by lazy { super.dropsCaptured }\n    override val durationchangesCaptured by lazy { super.durationchangesCaptured }\n    override val endedsCaptured by lazy { super.endedsCaptured }\n    override val errorsCaptured by lazy { super.errorsCaptured }\n    override val focussCaptured by lazy { super.focussCaptured }\n    override val focusinsCaptured by lazy { super.focusinsCaptured }\n    override val focusoutsCaptured by lazy { super.focusoutsCaptured }\n    override val fullscreenchangesCaptured by lazy { super.fullscreenchangesCaptured }\n    override val fullscreenerrorsCaptured by lazy { super.fullscreenerrorsCaptured }\n    override val hashchangesCaptured by lazy { super.hashchangesCaptured }\n    override val inputsCaptured by lazy { super.inputsCaptured }\n    override val invalidsCaptured by lazy { super.invalidsCaptured }\n    override val keydownsCaptured by lazy { super.keydownsCaptured }\n    override val keypresssCaptured by lazy { super.keypresssCaptured }\n    override val keyupsCaptured by lazy { super.keyupsCaptured }\n    override val loadsCaptured by lazy { super.loadsCaptured }\n    override val loadeddatasCaptured by lazy { super.loadeddatasCaptured }\n    override val loadedmetadatasCaptured by lazy { super.loadedmetadatasCaptured }\n    override val loadstartsCaptured by lazy { super.loadstartsCaptured }\n    override val messagesCaptured by lazy { super.messagesCaptured }\n    override val mousedownsCaptured by lazy { super.mousedownsCaptured }\n    override val mouseentersCaptured by lazy { super.mouseentersCaptured }\n    override val mouseleavesCaptured by lazy { super.mouseleavesCaptured }\n    override val mousemovesCaptured by lazy { super.mousemovesCaptured }\n    override val mouseoversCaptured by lazy { super.mouseoversCaptured }\n    override val mouseoutsCaptured by lazy { super.mouseoutsCaptured }\n    override val mouseupsCaptured by lazy { super.mouseupsCaptured }\n    override val offlinesCaptured by lazy { super.offlinesCaptured }\n    override val onlinesCaptured by lazy { super.onlinesCaptured }\n    override val opensCaptured by lazy { super.opensCaptured }\n    override val pagehidesCaptured by lazy { super.pagehidesCaptured }\n    override val pageshowsCaptured by lazy { super.pageshowsCaptured }\n    override val pastesCaptured by lazy { super.pastesCaptured }\n    override val pausesCaptured by lazy { super.pausesCaptured }\n    override val playsCaptured by lazy { super.playsCaptured }\n    override val playingsCaptured by lazy { super.playingsCaptured }\n    override val popstatesCaptured by lazy { super.popstatesCaptured }\n    override val progresssCaptured by lazy { super.progresssCaptured }\n    override val ratechangesCaptured by lazy { super.ratechangesCaptured }\n    override val resizesCaptured by lazy { super.resizesCaptured }\n    override val resetsCaptured by lazy { super.resetsCaptured }\n    override val scrollsCaptured by lazy { super.scrollsCaptured }\n    override val searchsCaptured by lazy { super.searchsCaptured }\n    override val seekedsCaptured by lazy { super.seekedsCaptured }\n    override val seekingsCaptured by lazy { super.seekingsCaptured }\n    override val selectsCaptured by lazy { super.selectsCaptured }\n    override val showsCaptured by lazy { super.showsCaptured }\n    override val stalledsCaptured by lazy { super.stalledsCaptured }\n    override val storagesCaptured by lazy { super.storagesCaptured }\n    override val submitsCaptured by lazy { super.submitsCaptured }\n    override val suspendsCaptured by lazy { super.suspendsCaptured }\n    override val timeupdatesCaptured by lazy { super.timeupdatesCaptured }\n    override val togglesCaptured by lazy { super.togglesCaptured }\n    override val touchcancelsCaptured by lazy { super.touchcancelsCaptured }\n    override val touchendsCaptured by lazy { super.touchendsCaptured }\n    override val touchmovesCaptured by lazy { super.touchmovesCaptured }\n    override val touchstartsCaptured by lazy { super.touchstartsCaptured }\n    override val transitionendsCaptured by lazy { super.transitionendsCaptured }\n    override val unloadsCaptured by lazy { super.unloadsCaptured }\n    override val volumechangesCaptured by lazy { super.volumechangesCaptured }\n    override val waitingsCaptured by lazy { super.waitingsCaptured }\n    override val wheelsCaptured by lazy { super.wheelsCaptured }\n}","package dev.fritz2.core\n\nimport kotlinx.browser.document\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.MainScope\nimport kotlinx.coroutines.launch\nimport kotlinx.dom.clear\nimport org.w3c.dom.HTMLElement\nimport org.w3c.dom.HTMLStyleElement\nimport org.w3c.dom.Node\nimport org.w3c.dom.css.CSSStyleSheet\n\n/**\n * Occurs when the targeted html element is not present in document.\n *\n * @param message exception message\n */\nclass MountTargetNotFoundException(message: String) : Exception(message)\n\n/**\n * Creates a [RenderContext] for [Tag]s and\n * mounts it to a constant element in the static html file\n * which id matches the [selector].\n *\n * @param selector [query selector](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector)\n * of the element to mount to\n * @param override if true all child elements are removed before rendering\n * @param scope scope for tag\n * @param content [RenderContext] for rendering the data to the DOM\n * @throws MountTargetNotFoundException if target element with [selector] not found\n */\nfun render(\n    selector: String,\n    override: Boolean = true,\n    scope: (ScopeContext.() -> Unit) = {},\n    content: RenderContext.() -> Unit\n) {\n    document.querySelector(selector)?.let { parentElement ->\n        if (parentElement is HTMLElement) {\n            render(parentElement, override, scope, content)\n        } else MountTargetNotFoundException(\"element with id=$selector is not an HTMLElement\")\n    } ?: throw MountTargetNotFoundException(\"html document contains no element with id=$selector\")\n}\n\n/**\n * Creates a [RenderContext] for [Tag]s and mounts it to a [targetElement].\n *\n * @param targetElement [HTMLElement] to mount to, default is *document.body*\n * @param override if true all child elements are removed before rendering\n * @param content [RenderContext] for rendering the data to the DOM\n * @param scope scope for tag\n * @throws MountTargetNotFoundException if [targetElement] not found\n */\nfun render(\n    targetElement: HTMLElement? = document.body,\n    override: Boolean = true,\n    scope: (ScopeContext.() -> Unit) = {},\n    content: RenderContext.() -> Unit\n) {\n    //add style sheet containing mount-point-class\n    addGlobalStyle(\".$MOUNT_POINT_STYLE_CLASS { display: contents; }\")\n\n    if (targetElement != null) {\n        if (override) targetElement.clear()\n\n        val mountPoint = object : RenderContext, MountPointImpl() {\n            override val job = Job()\n            override val scope: Scope = ScopeContext(Scope()).also {\n                scope(it)\n                it.set(MOUNT_POINT_KEY, this)\n            }.scope\n\n            override fun <N : Node, W : WithDomNode<N>> register(element: W, content: (W) -> Unit): W {\n                content(element)\n                targetElement.appendChild(element.domNode)\n                return element\n            }\n\n        }\n\n        MainScope().launch {\n            content(mountPoint)\n            mountPoint.runAfterMounts()\n        }\n\n    } else throw MountTargetNotFoundException(\"targetElement should not be null\")\n}\n\nconst val FRITZ2_GLOBAL_STYLESHEET_ID = \"fritz2-global-styles\"\n\ninternal fun getOrCreateGlobalStylesheet() = (document.getElementById(FRITZ2_GLOBAL_STYLESHEET_ID)?.let {\n    (it as HTMLStyleElement).sheet\n} ?: (document.createElement(\"style\") as HTMLStyleElement).also {\n    it.setAttribute(\"id\", FRITZ2_GLOBAL_STYLESHEET_ID)\n    it.appendChild(document.createTextNode(\"\"))\n    document.head!!.appendChild(it)\n}.sheet!!) as CSSStyleSheet\n\n/**\n * Adds global css-rules to a fritz2-specific stylesheet added to the document when first called\n *\n * @param css the valid css-code to insert\n */\nfun addGlobalStyle(css: String) {\n    getOrCreateGlobalStylesheet().insertRule(css, 0)\n}\n\n/**\n * Adds global css-rules to a fritz2-specific stylesheet added to the document when first called\n *\n * @param css the valid rules to insert\n */\nfun addGlobalStyles(css: List<String>) {\n    val stylesheet = getOrCreateGlobalStylesheet()\n    css.forEach { stylesheet.insertRule(it, 0) }\n}\n\n/**\n * Joins all given [classes] strings to one html-class-attribute [String]\n * by filtering all out which are null or blank.\n */\n@Deprecated(\"Use joinClasses instead.\", ReplaceWith(\"joinClasses(*classes)\"))\nfun classes(vararg classes: String?): String = joinClasses(*classes)\n\n/**\n * Joins all given [classes] strings to one html-class-attribute [String].\n * Individual Strings that are null or blank are filtered out.\n *\n * #### Examples\n *\n * ```\n * val classes = joinClasses(\n *     \"class1\",\n *     null,\n *     \"class2\",\n *     \"\"\n * )\n * println(classes) // prints \"class1 class2\"\n * ```\n *\n * Using this function, it is also possible to conditionally construct classes strings without having\n * to do dangerous string concatenation:\n *\n * ```\n * val classes = joinClasses(\n *    \"class1\",\n *    \"class2\".takeIf { it.length > 10 }\n * )\n *\n * println(classes) // prints \"class1\"\n * ```\n */\nfun joinClasses(vararg classes: String?): String =\n    classes.filterNot(String?::isNullOrBlank).joinToString(separator = \" \")\n\n/**\n * Helper function to call a native js function with concrete return type [T]\n */\n@JsName(\"Function\")\ninternal external fun <T> nativeFunction(vararg params: String, block: String): T",null,null,"package dev.fritz2.core\n\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.flow.FlowCollector\nimport kotlinx.coroutines.flow.MutableSharedFlow\n\n/**\n * This [Flow] implementation represents a flow that emits exactly one value during its lifetime.\n *\n * @param value the value to emit on the flow\n */\nclass OnlyOnceFlow<T>(private val value: T) : Flow<T> {\n    private var collected = false\n\n    override suspend fun collect(collector: FlowCollector<T>) {\n        if (!collected) {\n            collected = true\n            collector.emit(value)\n        }\n    }\n}\n\n/**\n * This factory function creates an [OnlyOnceFlow].\n *\n * @param value the value to emit on the flow\n */\nfun <T> flowOnceOf(value: T) = OnlyOnceFlow(value)\n\n/**\n * Base-interface of the different types of handlers\n *\n * @property process function describing how this handler collects a [Flow] when called\n */\ninterface Handler<A> {\n    val process: (Flow<A>, Job) -> Unit\n\n    /**\n     * Calls this handler exactly once.\n     *\n     * @param data parameter forwarded to the handler\n     */\n    operator fun invoke(data: A) = this.process(flowOnceOf(data), Job())\n}\n\n/**\n * Calls this handler exactly once.\n */\noperator fun Handler<Unit>.invoke() = this.process(flowOnceOf(Unit), Job())\n\n/**\n * Defines, how to handle actions in your [Store]. Each Handler accepts actions of a defined type.\n * If your handler just needs the current value of the [Store] and no action, use [Unit].\n *\n * @param process defines how to handle the values of the connected [Flow]\n */\nvalue class SimpleHandler<A>(override val process: (Flow<A>, Job) -> Unit) : Handler<A>\n\n/**\n * An [EmittingHandler] is a special [Handler] that constitutes a new [Flow] by itself. You can emit values to this [Flow] from your code\n * and connect it to other [Handler]s on this or on other [Store]s. This way inter-store-communication is done in fritz2.\n *\n * @param collectWithChannel defines how to handle the values of the connected [Flow]\n * @property process function defining how this [Handler] collects a [Flow] when connected using [handledBy]\n */\nclass EmittingHandler<A, E>(\n    private val collectWithChannel: (Flow<A>, FlowCollector<E>, Job) -> Unit,\n    private val flow: MutableSharedFlow<E> = MutableSharedFlow()\n) : Handler<A>, Flow<E> by flow {\n\n    override val process: (Flow<A>, Job) -> Unit = { upstream, job ->\n        collectWithChannel(upstream, flow, job)\n    }\n}\n","package dev.fritz2.core\n\nimport kotlinx.coroutines.*\nimport kotlinx.coroutines.flow.*\nimport org.w3c.dom.events.Event\n\n/**\n * Prints [Exception] to error-[console] by ignoring [CollectionLensGetException].\n */\ninternal fun printErrorIgnoreLensException(cause: Throwable) {\n    when(cause) {\n        is CollectionLensGetException -> {}\n        else -> console.error(cause)\n    }\n}\n\n/**\n * Marks a class that it has a [Job] to start coroutines with.\n */\ninterface WithJob {\n\n    /**\n     * [Job] for launching coroutines in.\n     */\n    val job: Job\n\n    /**\n     * Default error handler printing the error to console.\n     *\n     * @param cause Throwable to handle\n     */\n    fun errorHandler(cause: Throwable): Unit = printErrorIgnoreLensException(cause)\n\n    /**\n     * Connects a [Flow] to a [Handler].\n     *\n     * @param handler [Handler] that will be called for each action/event on the [Flow]\n     * @receiver [Flow] of action/events to bind to a [Handler]\n     */\n    infix fun <A> Flow<A>.handledBy(handler: Handler<A>) = handler.process(this, job)\n\n    /**\n     * Connects a [Flow] to a suspendable [execute] function.\n     *\n     * @param execute function that will be called for each action/event on the [Flow]\n     * @receiver [Flow] of action/events to bind to\n     */\n    infix fun <A> Flow<A>.handledBy(execute: suspend (A) -> Unit) =\n        this.onEach { withContext(NonCancellable) { execute(it) } }.catch { errorHandler(it) }\n            .launchIn(MainScope() + job)\n\n\n    /**\n     * Connects [Event]s to a [Handler].\n     *\n     * @receiver [Flow] which contains the [Event]\n     * @param handler that will handle the fired [Event]\n     */\n    infix fun <E : Event> Flow<E>.handledBy(handler: Handler<Unit>) =\n        handler.process(this.map { }, job)\n\n    /**\n     * Connects a [Flow] to a suspendable [execute] function.\n     *\n     * @receiver [Flow] which contains the [Event]\n     * @param execute function that will handle the fired [Event]\n     */\n    infix fun <E : Event> Flow<E>.handledBy(execute: suspend (E) -> Unit) =\n        this.onEach { withContext(NonCancellable) { execute(it) } }.catch { errorHandler(it) }\n            .launchIn(MainScope() + job)\n\n\n\n}","@file:Suppress(\"unused\")\n\npackage dev.fritz2.core\n\nimport kotlinx.coroutines.channels.awaitClose\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.flow.callbackFlow\nimport kotlinx.coroutines.flow.map\nimport org.w3c.dom.*\nimport org.w3c.dom.events.Event\nimport org.w3c.dom.events.EventTarget\nimport org.w3c.files.FileList\n\n/**\n * Creates a [Listener] for the given [Event] type and [eventName].\n *\n * @param eventName the [DOM-API name](https://developer.mozilla.org/en-US/docs/Web/API/Element#events) of an event.\n * Can be a custom name.\n * @param capture if `true`, activates capturing mode, else remains in `bubble` mode (default)\n * @param selector optional lambda expression to select specific events with option to manipulate it\n * (e.g. `preventDefault` or `stopPropagation`).\n *\n * @return a [Listener]-object, which is more or less a [Flow] of the specific `Event`-type.\n */\nfun <E : Event, T : EventTarget> T.subscribe(\n    eventName: String,\n    capture: Boolean = false,\n    selector: E.() -> Boolean = { true }\n): Listener<E, T> =\n    Listener(\n        callbackFlow {\n            val listener: (E) -> Unit = {\n                try {\n                    if (it.selector()) trySend(it.unsafeCast<E>())\n                } catch (e: Exception) {\n                    console.error(\"Unexpected event type while listening for `$eventName` event\", e)\n                }\n            }\n            this@subscribe.addEventListener(eventName, listener.unsafeCast<Event.() -> Unit>(), capture)\n\n            awaitClose { this@subscribe.removeEventListener(eventName, listener.unsafeCast<Event.() -> Unit>(), capture) }\n        }\n    )\n\n/**\n * Encapsulates the [Flow] of the [Event].\n *\n * Acts as a marker class in order to keep the type of the element, so we can offer dedicated methods to extract\n * values from some specific events.\n *\n * @see [values]\n */\nvalue class Listener<X : Event, out T : EventTarget>(private val events: Flow<X>) : Flow<X> by events\n\n/**\n * Extracts the [HTMLInputElement.value] from the [Event.target].\n */\nfun Listener<*, HTMLInputElement>.values(): Flow<String> =\n    this.map { it.target.unsafeCast<HTMLInputElement>().value }\n\n/**\n * Extracts the [HTMLSelectElement.value] from the [Event.target].\n */\nfun Listener<*, HTMLSelectElement>.values(): Flow<String> =\n    this.map { it.target.unsafeCast<HTMLSelectElement>().value }\n\n/**\n * Extracts the [HTMLInputElement.value] from the [Event.target].\n */\nfun Listener<*, HTMLFieldSetElement>.values(): Flow<String> =\n    this.map { it.target.unsafeCast<HTMLInputElement>().value }\n\n/**\n * Extracts the [HTMLTextAreaElement.value] from the [Event.target].\n */\nfun Listener<*, HTMLTextAreaElement>.values(): Flow<String> =\n    this.map { it.target.unsafeCast<HTMLTextAreaElement>().value }\n\n/**\n * Extracts a [FileList] from the [Event.target].\n */\nfun Listener<*, HTMLInputElement>.files(): Flow<FileList?> =\n    this.map { it.target.unsafeCast<HTMLInputElement>().files }\n\n/**\n * Extracts the [HTMLInputElement.checked] state from the [Event.target].\n */\nfun Listener<*, HTMLInputElement>.states(): Flow<Boolean> =\n    this.map { it.target.unsafeCast<HTMLInputElement>().checked }\n\n/**\n * Extracts the [HTMLSelectElement.selectedIndex] from the [Event.target].\n */\nfun Listener<*, HTMLSelectElement>.selectedIndex(): Flow<Int> =\n    this.map { it.target.unsafeCast<HTMLSelectElement>().selectedIndex }\n\n/**\n * Extracts the [HTMLOptionElement.value] from the selected [HTMLOptionElement].\n */\nfun Listener<*, HTMLSelectElement>.selectedValue(): Flow<String> =\n    this.map {\n        val select = it.target.unsafeCast<HTMLSelectElement>()\n        select.options[select.selectedIndex].unsafeCast<HTMLOptionElement>().value\n    }\n\n/**\n * Extracts the [HTMLOptionElement.text] from the selected [HTMLOptionElement].\n */\nfun Listener<*, HTMLSelectElement>.selectedText(): Flow<String> =\n    this.map {\n        val select = it.target.unsafeCast<HTMLSelectElement>()\n        select.options[select.selectedIndex].unsafeCast<HTMLOptionElement>().text\n    }",null,"package dev.fritz2.core\n\nimport dev.fritz2.core.Scope.Key\n\n/**\n * Marks a class that it has [Scope] which can be transferred for adding/receiving additional information.\n *\n * The concept of the [Scope] is to provide a consistent mechanism to pass arbitrary data down the DOM tree from\n * a hierarchical higher node to \"unknown\" consumer nodes down the tree. This is very important for all kind of\n * dev.fritz2.headless.components (not necessarily fritz2's dev.fritz2.headless.components!), that should adapt to its context. Some higher node places some\n * information tagged by a unique key into the scope and passes this further down to its children, which themselves\n * just passes this scope further down, optionally adding or manipulating the scope for their children on their own.\n * Somewhere down the tree a node can evaluate the scope passed to him and look out for some key it want to react to.\n * If the key is present it can then apply its value or just behave in some specific way different to its default.\n * If there is no key, the node just applies its default behaviour.\n *\n * To give a practical example:\n * Imagine some button component, which normally uses the \"primary\" color as background. This works fine for most of\n * the time. But now imagine a buttons-bar on the bottom edge of a modal for example to provide the typical buttons\n * like \"ok\", \"cancel\", \"yes\", \"no\" or alike. This bar uses the primary color as background too, to have a high contrast\n * against the content above. The two dev.fritz2.headless.components do not work well together this way!\n * The user would have to manually apply some other color to the buttons when using them inside the bar, in order to\n * preserve a good contrast to it. To achieve this behaviour automatically, the scope comes to the rescue:\n * The buttons-bar component can define a global scope-key `buttonsBar` by using the [Scope.keyOf] function.\n * Then it can add some key-value pair to the scope like `set(buttonsBar, true)` in order\n * to signal all child nodes that they appear within the context of a buttons bar. The button component could be\n * aware of the key and implement some different behaviour concerning the color, if it detects that it is used within\n * a buttons-bar.\n *\n * The scope only changes conformal to the node hierarchy. That is the scope is empty at the top level [render] function\n * call and may be filled or changed by each child. But a change by some node is only propagated to the children of\n * that node. The children of the next siblings of the changing node are not affected and do not see those scope values!\n *\n * Example:\n * ```\n * div { // initial scope -> empty!\n *     val sizes = keyOf<String>(\"sizes\") // normally define scope-keys globally\n *     div(scope = {\n *         set(sizes, \"small\") // add some key-value to the scope\n *     }) {\n *         // all children will get this scope instance\n *         p {\n *             scope.asDataAttr() // -> { \"sizes\": \"small\" }\n *         }\n *         section {\n *             when (scope[sizes]) {\n *                 \"small\" -> div({ fontSize { \"0.8rem\" } }) { +\"small text\" }\n *                 \"normal\" -> div({ fontSize { \"1rem\" } }) { +\"normal text\" }\n *                 \"large\" -> div({ fontSize { \"1.2rem\" } }) { +\"large text\" }\n *                 else -> div { +\"no size scope available\" }\n *             }\n *         }\n *         // end of children\n *     }\n *     // next sibling -> only parent scope available, which is empty!\n *     p {\n *         scope.asDataAttr() // -> {}\n *     }\n * }\n * ```\n *\n * It is intentional that the key is not tied to some component or restricted in any other way.\n * A client should strive for a key management, that is driven by the \"producing\" node, not the \"consuming\" one!\n * That means one should prefer to encode that some specific context now exist or that some value is now available,\n * instead of setting a client node tailored rule. This enables more freedom for future usages and adaptions by other\n * consuming dev.fritz2.headless.components.\n *\n * To continue the first example: A buttons-bar component should better not inject some \"buttonsColor\" into the scope,\n * but better just some \"buttonsBar\" key without any value (Unit). As a creator you just cannot anticipate all situations\n * and future usage of the buttons-bar component. It might be possible that a client wants to put something different to a\n * button into the bar, that also should react to the context. Then a key (and value) tailored to the button does not\n * make sense anymore.\n *\n * @see Scope\n * @see [dev.fritz2.browser.Tag]\n */\ninterface WithScope {\n    val scope: Scope\n}\n\n/**\n * Contains any type of data which consists of a [Key] and a corresponding value object.\n */\nvalue class Scope(private val entries: HashMap<Key<*>, Any> = hashMapOf()) {\n\n    companion object {\n        /**\n         * Creates a [Scope.Key] for using it in [Scope].\n         */\n        inline fun <reified T: Any> keyOf(name: String? = null): Key<T> =\n            Key(name ?: T::class.simpleName ?: \"unknown\")\n    }\n\n    /**\n     * Creates a new [Scope] instance from a given one.\n     */\n    constructor(parent: Scope) : this(HashMap(parent.entries))\n\n    /**\n     * Key for setting and receiving entries in the [Scope]\n     */\n    open class Key<T: Any>(val name: String) {\n        override fun toString(): String = name\n    }\n\n    /**\n     * Sets a new key-value-pair to the [Scope].\n     */\n    internal operator fun <T: Any> set(key: Key<T>, value: T) { entries[key] = value }\n\n    /**\n     * Receives a key-value-par from the [Scope].\n     */\n    operator fun <T: Any> get(key: Key<T>): T? = entries[key]?.unsafeCast<T>()\n\n    /**\n     * Returns all containing [Key]s from the [Scope].\n     */\n    val keys: Set<Key<*>> get() = entries.keys\n\n    /**\n     * Gives the number of stored key-value-pairs.\n     */\n    val size: Int get() = entries.size\n\n    /**\n     * Checks if the [Scope] contains the given key.\n     */\n    fun <T: Any> contains(key: Key<T>) = entries.contains(key)\n\n    /**\n     * Removes the specified key and its corresponding value from the [Scope].\n     *\n     * @return the previous value associated with the key, or null if the key was not present in the [Scope].\n     */\n    fun <T: Any> remove(key: Key<T>) = entries.remove(key)\n\n    /**\n     * Formats the [Scope] to a valid JSON string for printing or using it inside Javascript.\n     *\n     * Be aware that this is just a key-value formatting, where each payload data is just encoded as [String].\n     * So there is no magical serialization for primitives or complex types embedded!\n     *\n     * Examples:\n     * ```\n     * // primitive types:\n     * {\n     *   \"boolean\": \"true\"\n     *   \"integer\": \"42\"\n     * }\n     *\n     * // complex type\n     * data class User(val name: String, val active: Boolean)\n     * val key: keyOf<User>(\"user\")\n     * val user = User(\"Chris\", true)\n     * // as JSON\n     * {\n     *   \"user\" : \"User(name=Chris, active=true)\"\n     * }\n     *\n     * ```\n     */\n    override fun toString(): String = buildString {\n        append(\"{ \")\n        var count = 0\n        for ((k, v) in entries) {\n            if (++count > 1) append(\", \")\n            append(\"\\\"\")\n            append(k.name)\n            append(\"\\\" : \\\"\")\n            append(v)\n            append(\"\\\"\")\n        }\n        append(\" }\")\n    }\n\n    /**\n     * Returns an Iterator over the entries in the [Scope].\n     */\n    operator fun iterator() = entries.toMap().iterator()\n}\n\n/**\n * Context for setting new entries to a [Scope] object.\n */\n@HtmlTagMarker\nclass ScopeContext(private var current: Scope) {\n    val scope get() = current\n\n    /**\n     * Sets a new key-value-pair to the [Scope].\n     */\n    fun <T: Any> set(key: Key<T>, value: T) {\n        current = Scope(current)\n        current[key] = value\n    }\n}\n\noperator fun (ScopeContext.() -> Unit).plus(plus: ScopeContext.() -> Unit): ScopeContext.() -> Unit = {\n    this@plus.invoke(this)\n    plus.invoke(this)\n}\n\noperator fun (ScopeContext.() -> Unit).plus(scope: Scope): ScopeContext.() -> Unit = {\n    this@plus.invoke(this)\n    scope.keys.map { it.unsafeCast<Key<Any>>() }\n        .forEach { key -> scope[key]?.let { set(key, it) } }\n}\n\noperator fun Scope.plus(scope: ScopeContext.() -> Unit): ScopeContext.() -> Unit = {\n    keys.map { it.unsafeCast<Key<Any>>() }\n        .forEach { key -> get(key)?.let { set(key, it) } }\n    scope.invoke(this)\n}",null,"package dev.fritz2.core\n\nimport kotlinx.atomicfu.atomic\nimport kotlinx.browser.window\nimport kotlinx.coroutines.*\nimport kotlinx.coroutines.channels.Channel\nimport kotlinx.coroutines.channels.consumeEach\nimport kotlinx.coroutines.flow.*\nimport org.w3c.dom.events.Event\n\n/**\n * Defines a type for transforming one value into the next\n */\ntypealias Update<D> = suspend (D) -> D\n\n/**\n * [Store] interface is the main type for all two-way data binding activities.\n */\ninterface Store<D> {\n\n    /**\n     * [Job] for launching coroutines in.\n     */\n    val job: Job\n\n    /**\n     * [id] of this [Store].\n     * ids of depending [Store]s are concatenated and separated by a dot.\n     */\n    val id: String\n\n    /**\n     * Path of this [Store] derived from the underlying model.\n     * Paths of depending [Store]s are concatenated and separated by a dot.\n     */\n    val path: String\n\n    /**\n     * the [Flow] representing the current value of the [Store]. Use this to bind it to ui-elements or derive calculated values by using [map] for example.\n     */\n    val data: Flow<D>\n\n    /**\n     * represents the current value of the [Store]\n     */\n    val current: D\n\n    /**\n     * a simple [SimpleHandler] that just takes the given action-value as the new value for the [Store].\n     */\n    val update: Handler<D>\n\n    /**\n     * abstract method defining, how this [Store] handles an [Update]\n     *\n     * @param update the [Update] to handle\n     */\n    suspend fun enqueue(update: Update<D>)\n\n    /**\n     * Factory method to create a [SimpleHandler] mapping the actual value of the [Store] and a given Action to a new value.\n     *\n     * @param execute lambda that is executed whenever a new action-value appears on the connected event-[Flow].\n     */\n    fun <A> handle(\n        execute: suspend (D, A) -> D\n    ) = SimpleHandler<A> { flow, job ->\n        val executeJob = flow.onEach { enqueue { d -> withContext(NonCancellable) { execute(d, it) } } }\n            .catch { d -> errorHandler(d) }\n            .launchIn(MainScope() + job)\n        this.job.invokeOnCompletion { executeJob.cancel() }\n    }\n\n    /**\n     * Factory method to create a [SimpleHandler] that does not take an Action\n     *\n     * @param execute lambda that is executed for each event on the connected [Flow]\n     */\n    fun handle(\n        execute: suspend (D) -> D\n    ) = SimpleHandler<Unit> { flow, job ->\n        val executeJob = flow.onEach { enqueue { d -> withContext(NonCancellable) { execute(d) } } }\n            .catch { d -> errorHandler(d) }\n            .launchIn(MainScope() + job)\n        this.job.invokeOnCompletion { executeJob.cancel() }\n    }\n\n    /**\n     * Factory method to create a [EmittingHandler] taking an action-value and the current store value to derive the new value.\n     * An [EmittingHandler] is a [Flow] by itself and can therefore be connected to other [SimpleHandler]s even in other [Store]s.\n     *\n     * @param execute lambda that is executed for each action-value on the connected [Flow]. You can emit values from this lambda.\n     */\n    fun <A, E> handleAndEmit(\n        execute: suspend FlowCollector<E>.(D, A) -> D\n    ) = EmittingHandler<A, E>({ inFlow, outFlow, job ->\n        val executeJob = inFlow.onEach { enqueue { d -> withContext(NonCancellable) { outFlow.execute(d, it) } } }\n            .catch { d -> errorHandler(d) }\n            .launchIn(MainScope() + job)\n        this.job.invokeOnCompletion { executeJob.cancel() }\n    })\n\n    /**\n     * factory method to create an [EmittingHandler] that does not take an action in it's [execute]-lambda.\n     *\n     * @param execute lambda that is executed for each event on the connected [Flow]. You can emit values from this lambda.\n     */\n    fun <E> handleAndEmit(\n        execute: suspend FlowCollector<E>.(D) -> D\n    ) =\n        EmittingHandler<Unit, E>({ inFlow, outFlow, job ->\n            val executeJob = inFlow.onEach { enqueue { d -> withContext(NonCancellable) { outFlow.execute(d) } } }\n                .catch { d -> errorHandler(d) }\n                .launchIn(MainScope() + job)\n            this.job.invokeOnCompletion { executeJob.cancel() }\n        })\n\n    /**\n     * Default error handler printing the error to console.\n     *\n     * @param cause Throwable to handle\n     */\n    fun errorHandler(cause: Throwable): Unit = printErrorIgnoreLensException(cause)\n\n    /**\n     * Creates a new [Store] that contains data derived by a given [Lens].\n     *\n     * @param lens: a [Lens] describing the two-way data binding of the derived [Store].\n     */\n    fun <X> map(lens: Lens<D, X>): Store<X> = SubStore(this, lens)\n}\n\n/**\n * A [Store] can be initialized with a given value.\n *\n * @param initialData first current value of this [Store]\n * @param job Job to be used by the [Store]\n * @param id id of this [Store]. Ids of derived [Store]s will be concatenated.\n */\nopen class RootStore<D>(\n    initialData: D,\n    job: Job,\n    override val id: String = Id.next()\n) : Store<D> {\n    override val path: String = \"\"\n\n    private val state: MutableStateFlow<D> = MutableStateFlow(initialData)\n    private val queue = Channel<Update<D>>(Channel.UNLIMITED)\n\n    /**\n     * [Job] used as parent job on all coroutines started in [Handler]s in the scope of this [Store]\n     */\n    final override val job: Job = (MainScope() + job).launch(start = CoroutineStart.UNDISPATCHED) {\n        activeJobs.incrementAndGet()\n        queue.consumeEach { update ->\n            try {\n                state.value = update(state.value)\n            } catch (t: Throwable) {\n                errorHandler(t)\n            }\n        }\n    }.apply { invokeOnCompletion { activeJobs.decrementAndGet() } }\n\n    /**\n     * Emits a [Flow] with the current data of this [Store].\n     * The [Flow] internal data is only changed, when the value differs from the last one to avoid calculations\n     * and updates that are not necessary.\n     *\n     * Actual data therefore is derived by applying the updates on the internal channel one by one to get the next value.\n     */\n    final override val data: Flow<D> = flow {\n        try {\n            activeFlows.incrementAndGet()\n            emit(state)\n            this@RootStore.job.join()\n            emit(emptyFlow())\n        } finally {\n            activeFlows.decrementAndGet()\n        }\n    }.flatMapLatest { it }\n\n    /**\n     * Represents the current data of this [Store].\n     */\n    override val current: D\n        get() = state.value\n\n    /**\n     * in a [RootStore] an [Update] is handled by applying it to the internal [StateFlow].\n     */\n    override suspend fun enqueue(update: Update<D>): Unit = queue.send(update)\n\n    /**\n     * a simple [SimpleHandler] that just takes the given action-value as the new value for the [Store].\n     */\n    override val update = this.handle<D> { _, newValue -> newValue }\n\n    private val withJob = object : WithJob {\n        override val job: Job = this@RootStore.job\n        override fun errorHandler(cause: Throwable) = this@RootStore.errorHandler(cause)\n    }\n\n    /**\n     * Allows to use the [WithJob]-Context of this Store and to run [handledBy] on the Store-Job\n     */\n    fun runWithJob(init: WithJob.() -> Unit) = withJob.init()\n\n    /**\n     * Connects a [Flow] to a [Handler].\n     *\n     * @param handler [Handler] that will be called for each action/event on the [Flow]\n     * @receiver [Flow] of action/events to bind to a [Handler]\n     */\n    protected infix fun <A> Flow<A>.handledBy(handler: Handler<A>) = runWithJob { this@handledBy handledBy handler }\n\n    /**\n     * Connects a [Flow] to a suspendable [execute] function.\n     *\n     * @param execute function that will be called for each action/event on the [Flow]\n     * @receiver [Flow] of action/events to bind to\n     */\n    protected infix fun <A> Flow<A>.handledBy(execute: suspend (A) -> Unit) =\n        runWithJob { this@handledBy handledBy execute }\n\n    /**\n     * Connects [Event]s to a [Handler].\n     *\n     * @receiver [Flow] which contains the [Event]\n     * @param handler that will handle the fired [Event]\n     */\n    protected infix fun <E : Event> Flow<E>.handledBy(handler: Handler<Unit>) =\n        runWithJob { this@handledBy handledBy handler }\n\n    /**\n     * Connects a [Flow] to a suspendable [execute] function.\n     *\n     * @receiver [Flow] which contains the [Event]\n     * @param execute function that will handle the fired [Event]\n     */\n    protected infix fun <E : Event> Flow<E>.handledBy(execute: suspend (E) -> Unit) =\n        runWithJob { this@handledBy handledBy execute }\n\n    companion object {\n        private val activeFlows = atomic(0)\n        private val activeJobs = atomic(0)\n\n        /**\n         * Count of active [Store.data]-Flows, can be used to detect memory-leaks\n         */\n        val ACTIVE_FLOWS get() = activeFlows.value\n\n        /**\n         * Count of active [Store.job]-Instances, can be used to detect memory-leaks\n         */\n        val ACTIVE_JOBS get() = activeJobs.value\n\n        fun resetCounters() {\n            activeFlows.value = 0\n            activeJobs.value = 0\n        }\n\n        init {\n            window.asDynamic().fritz2 = {}\n            window.asDynamic().fritz2.active_jobs = { ACTIVE_JOBS }\n            window.asDynamic().fritz2.active_flows = { ACTIVE_FLOWS }\n        }\n    }\n}\n\n/**\n * Convenience function to create a simple [Store] without any handlers, etc.\n *\n * @param initialData first current value of this [Store]\n * @param job Job to be used by the [Store]\n * @param id id of this store. Ids of derived [Store]s will be concatenated.\n */\nfun <D> storeOf(initialData: D, job: Job, id: String = Id.next()): Store<D> =\n    RootStore(initialData, job, id)\n\n/**\n * Convenience function to create a simple [Store] without any handlers, etc.\n *\n * @param initialData first current value of this [Store]\n * @param job Job to be used by the [Store]\n * @param id id of this store. Ids of derived [Store]s will be concatenated.\n */\nfun <D> WithJob.storeOf(initialData: D, job: Job = this.job, id: String = Id.next()): Store<D> =\n    RootStore(initialData, job, id)\n",null,null,"package dev.fritz2.remote\n\nimport kotlinx.coroutines.await\nimport org.khronos.webgl.ArrayBuffer\nimport org.w3c.dom.url.URLSearchParams\nimport org.w3c.fetch.*\nimport org.w3c.files.Blob\nimport org.w3c.xhr.FormData\nimport kotlinx.browser.window as browserWindow\nimport org.w3c.fetch.Response as FetchResponse\n\nexternal fun btoa(decoded: String): String\n\n/**\n * Represents the common fields and attributes of an HTTP response.\n * It contains also the original [Request] which was made to get this [Response].\n *\n * More info at [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Response)\n */\nopen class Response(\n    private val response: FetchResponse,\n    val request: Request,\n    val propagate: Boolean = true\n) {\n    /**\n     * A boolean indicating whether the response was successful (status in the range 200 – 299) or not.\n     */\n    val ok: Boolean = response.ok\n\n    /**\n     * The status code of the response. (This will be 200 for a success).\n     */\n    val status: Int = response.status.toInt()\n\n    /**\n     * The status message corresponding to the status code. (e.g., OK for 200).\n     */\n    val statusText: String = response.statusText\n\n    /**\n     * The URL of the response.\n     */\n    val url: String = response.url\n\n    /**\n     * The type of the response (e.g., basic, cors).\n     */\n    val type: ResponseType = response.type\n\n    /**\n     * Indicates whether or not the response is the result of a redirect (that is, its URL list has more than one entry).\n     */\n    val redirected: Boolean = response.redirected\n\n    /**\n     * returns the [Headers] from the given [Response]\n     */\n    val headers = response.headers\n\n    /**\n     * extracts the body as string from the given [Response]\n     */\n    suspend fun body() = response.text().await()\n\n    /**\n     * extracts the body as blob from the given [Response]\n     */\n    suspend fun blob() = response.blob().await()\n\n    /**\n     * extracts the body as arrayBuffer from the given [Response]\n     */\n    suspend fun arrayBuffer() = response.arrayBuffer().await()\n\n    /**\n     * extracts the body as formData from the given [Response]\n     */\n    suspend fun formData() = response.formData().await()\n\n    /**\n     * extracts the body as json from the given [Response]\n     */\n    suspend fun json() = response.json().await()\n\n    /**\n     * creates a copy of the [Response].\n     */\n    fun copy(\n        response: FetchResponse = this.response,\n        request: Request = this.request,\n        propagate: Boolean = this.propagate\n    ) = Response(response, request, propagate)\n}\n\n/**\n * Represents the common fields and attributes of an HTTP request.\n *\n * Use it to define common headers, error-handling, base url, etc. for a specific API for example.\n * By calling one of the executing methods like [get] or [post] a specific request is built from\n * the template and send to the server.\n */\nopen class Request(\n    val url: String = \"\",\n    val method: String = \"\",\n    val headers: Map<String, String> = emptyMap(),\n    val body: dynamic = undefined,\n    val referrer: String? = undefined,\n    val referrerPolicy: dynamic = undefined,\n    val mode: RequestMode? = undefined,\n    val credentials: RequestCredentials? = undefined,\n    val cache: RequestCache? = undefined,\n    val redirect: RequestRedirect? = undefined,\n    val integrity: String? = undefined,\n    val keepalive: Boolean? = undefined,\n    val reqWindow: Any? = undefined,\n    val middlewares: List<Middleware> = emptyList(),\n) {\n\n    /**\n     * creates a copy of the [Request].\n     */\n    open fun copy(\n        url: String = this.url,\n        method: String = this.method,\n        headers: Map<String, String> = this.headers,\n        body: dynamic = this.body,\n        referrer: String? = this.referrer,\n        referrerPolicy: dynamic = this.referrerPolicy,\n        mode: RequestMode? = this.mode,\n        credentials: RequestCredentials? = this.credentials,\n        cache: RequestCache? = this.cache,\n        redirect: RequestRedirect? = this.redirect,\n        integrity: String? = this.integrity,\n        keepalive: Boolean? = this.keepalive,\n        reqWindow: Any? = this.reqWindow,\n        middlewares: List<Middleware> = this.middlewares,\n    ) = Request(\n        url, method, headers, body, referrer, referrerPolicy,\n        mode, credentials, cache, redirect, integrity, keepalive,\n        reqWindow, middlewares\n    )\n\n    /**\n     * executes the HTTP call and sends it to the server, awaits the response (async) and returns a [Response].\n     */\n    suspend fun execute(): Response {\n\n        var request = this\n        for (interceptor in middlewares) request = interceptor.enrichRequest(request)\n\n        val init = request.buildInit()\n\n        var response = Response(browserWindow.fetch(url, init).await(), request)\n        for (interceptor in middlewares.reversed()) {\n            if (!response.propagate) break\n            response = interceptor.handleResponse(response)\n        }\n\n        return response\n    }\n\n\n    /**\n     * builds a [RequestInit] object.\n     */\n    private fun buildInit(): RequestInit {\n        // Headers class has no methods for reading key-value-pairs\n        val reqHeader = Headers()\n        for ((k, v) in headers) reqHeader.set(k, v)\n        return RequestInit(\n            method = method,\n            body = body,\n            headers = reqHeader,\n            referrer = referrer,\n            referrerPolicy = referrerPolicy,\n            mode = mode,\n            credentials = credentials,\n            cache = cache,\n            redirect = redirect,\n            integrity = integrity,\n            keepalive = keepalive,\n            window = reqWindow\n        )\n    }\n\n    /**\n     * issues a get request returning a flow of it's response\n     *\n     * @param subUrl endpoint url which getting appended to the [url] with `/`\n     * @param parameters query parameters which are encoded and appended to the [url]\n     */\n    suspend fun get(subUrl: String? = null, parameters: Map<String, String>? = null): Response =\n        (subUrl?.let { append(it) } ?: this)\n            .run { parameters?.let { queryParameters(parameters) } ?: this }\n            .copy(method = \"GET\").execute()\n\n    /**\n     * issues a head request returning a flow of it's response\n     *\n     * @param subUrl endpoint url which getting appended to the [url] with `/`\n     */\n    suspend fun head(subUrl: String? = null): Response =\n        (subUrl?.let { append(it) } ?: this).copy(method = \"HEAD\").execute()\n\n    /**\n     * issues a connect request returning a flow of it's response\n     *\n     * @param subUrl endpoint url which getting appended to the [url] with `/`\n     */\n    suspend fun connect(subUrl: String? = null): Response =\n        (subUrl?.let { append(it) } ?: this).copy(method = \"CONNECT\").execute()\n\n    /**\n     * issues a options request returning a flow of it's response\n     *\n     * @param subUrl endpoint url which getting appended to the [url] with `/`\n     */\n    suspend fun options(subUrl: String? = null): Response =\n        (subUrl?.let { append(it) } ?: this).copy(method = \"OPTIONS\").execute()\n\n    /**\n     * issues a delete request returning a flow of it's response\n     *\n     * @param subUrl endpoint url which getting appended to the [url] with `/`\n     */\n    open suspend fun delete(subUrl: String? = null): Response =\n        (subUrl?.let { append(it) } ?: this).copy(method = \"DELETE\").execute()\n\n    /**\n     * issues a post request returning a flow of it's response\n     *\n     * @param subUrl endpoint url which getting appended to the [url] with `/`\n     */\n    suspend fun post(subUrl: String? = null): Response =\n        (subUrl?.let { append(it) } ?: this).copy(method = \"POST\").execute()\n\n    /**\n     * issues a put request returning a flow of it's response\n     *\n     * @param subUrl endpoint url which getting appended to the [url] with `/`\n     */\n    suspend fun put(subUrl: String? = null): Response =\n        (subUrl?.let { append(it) } ?: this).copy(method = \"PUT\").execute()\n\n\n    /**\n     * issues a patch request returning a flow of it's response\n     *\n     * @param subUrl endpoint url which getting appended to the [url] with `/`\n     */\n    suspend fun patch(subUrl: String? = null): Response =\n        (subUrl?.let { append(it) } ?: this).copy(method = \"PATCH\").execute()\n\n    /**\n     * appends the given [subUrl] to the [url]\n     *\n     * @param subUrl url which getting appended to the [url] with `/`\n     */\n    fun append(subUrl: String): Request = copy(url = \"${url.trimEnd('/')}/${subUrl.trimStart('/')}\")\n\n    /**\n     * appends the given [parameters] to the [url]\n     *\n     * @param parameters set of key-value pairs to be added\n     */\n    fun queryParameters(parameters: Map<String, String>): Request {\n        val params = URLSearchParams()\n        parameters.forEach { (k, v) -> params.append(k, v) }\n        return this.copy(url = \"$url?$params\")\n    }\n\n    /**\n     * sets the body content to the request\n     *\n     * @param content body as [String]\n     */\n    fun body(content: String): Request = copy(body = content)\n\n    /**\n     * sets the [ArrayBuffer] content to the request\n     *\n     * @param content body as [ArrayBuffer]\n     */\n    fun arrayBuffer(content: ArrayBuffer): Request = copy(body = content)\n\n    /**\n     * sets the [FormData] content to the request\n     *\n     * @param content body as [FormData]\n     */\n    fun formData(content: FormData): Request = copy(body = content)\n\n    /**\n     * sets the [Blob] content to the request\n     *\n     * @param content body as [Blob]\n     */\n    fun blob(content: Blob): Request = copy(body = content)\n\n    /**\n     * adds the given http header to the request\n     *\n     * @param name name of the http header to add\n     * @param value value of the header field\n     */\n    fun header(name: String, value: String): Request = copy(headers = headers + (name to value))\n\n    /**\n     * adds the given [Content-Type](https://developer.mozilla.org/en/docs/Web/HTTP/Headers/Content-Type)\n     * value to the http headers\n     *\n     * @param value cache-control value\n     */\n    fun contentType(value: String): Request = header(\"Content-Type\", value)\n\n    /**\n     * Adds the basic [Authorization](https://developer.mozilla.org/en/docs/Web/HTTP/Headers/Authorization)\n     * header for the given username and password.\n     *\n     * __Note__: Both [username] and [password] need to be encoded in an ascii-compatible encoding!\n     *\n     * @param username name of the user\n     * @param password password of the user\n     */\n    fun basicAuth(username: String, password: String): Request =\n        header(\"Authorization\", \"Basic ${btoa(\"$username:$password\")}\")\n\n    /**\n     * adds the given [Cache-Control](https://developer.mozilla.org/en/docs/Web/HTTP/Headers/Cache-Control)\n     * value to the http headers\n     *\n     * @param value cache-control value\n     */\n    fun cacheControl(value: String): Request = header(\"Cache-Control\", value)\n\n    /**\n     * adds the given [Accept](https://developer.mozilla.org/en/docs/Web/HTTP/Headers/Accept)\n     * value to the http headers, e.g \"application/pdf\"\n     *\n     * @param value media type to accept\n     */\n    fun accept(value: String): Request = header(\"Accept\", value)\n\n    /**\n     * adds a header to accept JSON as response\n     */\n    fun acceptJson(): Request = accept(\"application/json\")\n\n    /**\n     * sets the referrer property of the [Request]\n     *\n     * @param value of the property\n     */\n    fun referrer(value: String): Request = copy(referrer = value)\n\n    /**\n     * sets the referrerPolicy property of the [Request]\n     *\n     * @param value of the property\n     */\n    fun referrerPolicy(value: dynamic): Request = copy(referrerPolicy = value)\n\n    /**\n     * sets the requestMode property of the [Request]\n     *\n     * @param value of the property\n     */\n    fun requestMode(value: RequestMode): Request = copy(mode = value)\n\n    /**\n     * sets the credentials property of the [Request]\n     *\n     * @param value of the property\n     */\n    fun credentials(value: RequestCredentials): Request = copy(credentials = value)\n\n    /**\n     * sets the cache property of the [Request]\n     *\n     * @param value of the property\n     */\n    fun cache(value: RequestCache): Request = copy(cache = value)\n\n    /**\n     * sets the redirect property of the [Request]\n     *\n     * @param value of the property\n     */\n    fun redirect(value: RequestRedirect): Request = copy(redirect = value)\n\n    /**\n     * sets the integrity property of the [Request]\n     *\n     * @param value of the property\n     */\n    fun integrity(value: String): Request = copy(integrity = value)\n\n    /**\n     * sets the keepalive property of the [Request]\n     *\n     * @param value of the property\n     */\n    fun keepalive(value: Boolean): Request = copy(keepalive = value)\n\n    /**\n     * sets the reqWindow property of the [Request]\n     *\n     * @param value of the property\n     */\n    fun reqWindow(value: Any): Request = copy(reqWindow = value)\n\n    /**\n     * adds an [Middleware] to handle all requests and responses.\n     *\n     * @param middleware [Middleware] to use by this request\n     */\n    fun use(middleware: Middleware): Request = copy(middlewares = middlewares + middleware)\n\n    /**\n     * adds [Middleware]s to handle all requests and responses.\n     *\n     * @param middlewares [Middleware] to use by this request\n     */\n    fun use(vararg middlewares: Middleware): Request = copy(middlewares = this.middlewares + middlewares.asList())\n\n}\n\n/**\n * creates a new [Request]\n *\n * @param baseUrl the common base of all urls that you want to call using the template\n */\nfun http(baseUrl: String = \"\") = Request(url = baseUrl)\n\n",null,null,null,null,"@file:Suppress(\"unused\")\n\npackage dev.fritz2.core\n\nimport kotlinx.coroutines.flow.Flow\nimport org.w3c.dom.*\nimport org.w3c.fetch.RequestDestination\n\nfun SvgTag.viewBox(value: String) = attr(\"viewBox\", value)\nfun SvgTag.viewBox(value: Flow<String>) = attr(\"viewBox\", value)\n\nfun SvgTag.fill(value: String) = attr(\"fill\", value)\nfun SvgTag.fill(value: Flow<String>) = attr(\"fill\", value)\n\nfun SvgTag.d(value: String) = attr(\"d\", value)\nfun SvgTag.d(value: Flow<String>) = attr(\"d\", value)\n\n/*\n * Generated by https://github.com/chausknecht/HtmlTagAttributesExtractor\n * Pay attention to local modifications before pasting an updated output here!\n * Add manual extensions above this section (like the SVG attributes).\n */\n\n/*\n * HTMLElement attributes\n */\nfun Tag<HTMLElement>.title(value: String) = attr(\"title\", value)\nfun Tag<HTMLElement>.title(value: Flow<String>) = attr(\"title\", value)\n\nfun Tag<HTMLElement>.lang(value: String) = attr(\"lang\", value)\nfun Tag<HTMLElement>.lang(value: Flow<String>) = attr(\"lang\", value)\n\nfun Tag<HTMLElement>.translate(value: Boolean, trueValue: String = \"\") = attr(\"translate\", value, trueValue)\nfun Tag<HTMLElement>.translate(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"translate\", value, trueValue)\n\nfun Tag<HTMLElement>.dir(value: String) = attr(\"dir\", value)\nfun Tag<HTMLElement>.dir(value: Flow<String>) = attr(\"dir\", value)\n\nfun Tag<HTMLElement>.hidden(value: Boolean, trueValue: String = \"\") = attr(\"hidden\", value, trueValue)\nfun Tag<HTMLElement>.hidden(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"hidden\", value, trueValue)\n\nfun Tag<HTMLElement>.tabIndex(value: Int) = attr(\"tabindex\", value)\nfun Tag<HTMLElement>.tabIndex(value: Flow<Int>) = attr(\"tabindex\", value)\n\nfun Tag<HTMLElement>.accessKey(value: String) = attr(\"accesskey\", value)\nfun Tag<HTMLElement>.accessKey(value: Flow<String>) = attr(\"accesskey\", value)\n\nfun Tag<HTMLElement>.draggable(value: Boolean, trueValue: String = \"\") = attr(\"draggable\", value, trueValue)\nfun Tag<HTMLElement>.draggable(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"draggable\", value, trueValue)\n\nfun Tag<HTMLElement>.contextMenu(value: HTMLMenuElement?) = attr(\"contextmenu\", value)\nfun Tag<HTMLElement>.contextMenu(value: Flow<HTMLMenuElement?>) = attr(\"contextmenu\", value)\n\nfun Tag<HTMLElement>.spellcheck(value: Boolean, trueValue: String = \"\") = attr(\"spellcheck\", value, trueValue)\nfun Tag<HTMLElement>.spellcheck(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"spellcheck\", value, trueValue)\n\nfun Tag<HTMLElement>.innerText(value: String) = attr(\"innertext\", value)\nfun Tag<HTMLElement>.innerText(value: Flow<String>) = attr(\"innertext\", value)\n\n// inherited attributes from supertype Element\nfun Tag<HTMLElement>.id(value: String) = attr(\"id\", value)\nfun Tag<HTMLElement>.id(value: Flow<String>) = attr(\"id\", value)\n\nfun Tag<HTMLElement>.slot(value: String) = attr(\"slot\", value)\nfun Tag<HTMLElement>.slot(value: Flow<String>) = attr(\"slot\", value)\n\nfun Tag<HTMLElement>.scrollTop(value: Double) = attr(\"scrolltop\", value)\nfun Tag<HTMLElement>.scrollTop(value: Flow<Double>) = attr(\"scrolltop\", value)\n\nfun Tag<HTMLElement>.scrollLeft(value: Double) = attr(\"scrollleft\", value)\nfun Tag<HTMLElement>.scrollLeft(value: Flow<Double>) = attr(\"scrollleft\", value)\n\nfun Tag<HTMLElement>.innerHTML(value: String) = attr(\"innerhtml\", value)\nfun Tag<HTMLElement>.innerHTML(value: Flow<String>) = attr(\"innerhtml\", value)\n\nfun Tag<HTMLElement>.outerHTML(value: String) = attr(\"outerhtml\", value)\nfun Tag<HTMLElement>.outerHTML(value: Flow<String>) = attr(\"outerhtml\", value)\n\n// inherited attributes from supertype Node\nfun Tag<HTMLElement>.nodeValue(value: String?) = attr(\"nodevalue\", value)\nfun Tag<HTMLElement>.nodeValue(value: Flow<String?>) = attr(\"nodevalue\", value)\n\nfun Tag<HTMLElement>.textContent(value: String?) = attr(\"textcontent\", value)\nfun Tag<HTMLElement>.textContent(value: Flow<String?>) = attr(\"textcontent\", value)\n\n// inherited attributes from supertype ElementContentEditable\nfun Tag<HTMLElement>.contentEditable(value: String) = attr(\"contenteditable\", value)\nfun Tag<HTMLElement>.contentEditable(value: Flow<String>) = attr(\"contenteditable\", value)\n\n\n/*\n * HTMLBaseElement attributes\n */\nfun Tag<HTMLBaseElement>.href(value: String) = attr(\"href\", value)\nfun Tag<HTMLBaseElement>.href(value: Flow<String>) = attr(\"href\", value)\n\nfun Tag<HTMLBaseElement>.target(value: String) = attr(\"target\", value)\nfun Tag<HTMLBaseElement>.target(value: Flow<String>) = attr(\"target\", value)\n\n\n/*\n * HTMLLinkElement attributes\n */\nfun Tag<HTMLLinkElement>.href(value: String) = attr(\"href\", value)\nfun Tag<HTMLLinkElement>.href(value: Flow<String>) = attr(\"href\", value)\n\nfun Tag<HTMLLinkElement>.crossOrigin(value: String?) = attr(\"crossorigin\", value)\nfun Tag<HTMLLinkElement>.crossOrigin(value: Flow<String?>) = attr(\"crossorigin\", value)\n\nfun Tag<HTMLLinkElement>.rel(value: String) = attr(\"rel\", value)\nfun Tag<HTMLLinkElement>.rel(value: Flow<String>) = attr(\"rel\", value)\n\nfun Tag<HTMLLinkElement>.`as`(value: RequestDestination) = attr(\"as\", value)\nfun Tag<HTMLLinkElement>.`as`(value: Flow<RequestDestination>) = attr(\"as\", value)\n\nfun Tag<HTMLLinkElement>.media(value: String) = attr(\"media\", value)\nfun Tag<HTMLLinkElement>.media(value: Flow<String>) = attr(\"media\", value)\n\nfun Tag<HTMLLinkElement>.nonce(value: String) = attr(\"nonce\", value)\nfun Tag<HTMLLinkElement>.nonce(value: Flow<String>) = attr(\"nonce\", value)\n\nfun Tag<HTMLLinkElement>.hreflang(value: String) = attr(\"hreflang\", value)\nfun Tag<HTMLLinkElement>.hreflang(value: Flow<String>) = attr(\"hreflang\", value)\n\nfun Tag<HTMLLinkElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLLinkElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLLinkElement>.referrerPolicy(value: String) = attr(\"referrerpolicy\", value)\nfun Tag<HTMLLinkElement>.referrerPolicy(value: Flow<String>) = attr(\"referrerpolicy\", value)\n\nfun Tag<HTMLLinkElement>.charset(value: String) = attr(\"charset\", value)\nfun Tag<HTMLLinkElement>.charset(value: Flow<String>) = attr(\"charset\", value)\n\nfun Tag<HTMLLinkElement>.rev(value: String) = attr(\"rev\", value)\nfun Tag<HTMLLinkElement>.rev(value: Flow<String>) = attr(\"rev\", value)\n\nfun Tag<HTMLLinkElement>.target(value: String) = attr(\"target\", value)\nfun Tag<HTMLLinkElement>.target(value: Flow<String>) = attr(\"target\", value)\n\nfun Tag<HTMLLinkElement>.scope(value: String) = attr(\"scope\", value)\nfun Tag<HTMLLinkElement>.scope(value: Flow<String>) = attr(\"scope\", value)\n\nfun Tag<HTMLLinkElement>.workerType(value: WorkerType) = attr(\"workertype\", value)\nfun Tag<HTMLLinkElement>.workerType(value: Flow<WorkerType>) = attr(\"workertype\", value)\n\n\n/*\n * HTMLMetaElement attributes\n */\nfun Tag<HTMLMetaElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLMetaElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLMetaElement>.httpEquiv(value: String) = attr(\"httpequiv\", value)\nfun Tag<HTMLMetaElement>.httpEquiv(value: Flow<String>) = attr(\"httpequiv\", value)\n\nfun Tag<HTMLMetaElement>.content(value: String) = attr(\"content\", value)\nfun Tag<HTMLMetaElement>.content(value: Flow<String>) = attr(\"content\", value)\n\nfun Tag<HTMLMetaElement>.scheme(value: String) = attr(\"scheme\", value)\nfun Tag<HTMLMetaElement>.scheme(value: Flow<String>) = attr(\"scheme\", value)\n\n\n/*\n * HTMLStyleElement attributes\n */\nfun Tag<HTMLStyleElement>.media(value: String) = attr(\"media\", value)\nfun Tag<HTMLStyleElement>.media(value: Flow<String>) = attr(\"media\", value)\n\nfun Tag<HTMLStyleElement>.nonce(value: String) = attr(\"nonce\", value)\nfun Tag<HTMLStyleElement>.nonce(value: Flow<String>) = attr(\"nonce\", value)\n\nfun Tag<HTMLStyleElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLStyleElement>.type(value: Flow<String>) = attr(\"type\", value)\n\n\n/*\n * HTMLBodyElement attributes\n */\nfun Tag<HTMLBodyElement>.link(value: String) = attr(\"link\", value)\nfun Tag<HTMLBodyElement>.link(value: Flow<String>) = attr(\"link\", value)\n\nfun Tag<HTMLBodyElement>.vLink(value: String) = attr(\"vlink\", value)\nfun Tag<HTMLBodyElement>.vLink(value: Flow<String>) = attr(\"vlink\", value)\n\nfun Tag<HTMLBodyElement>.aLink(value: String) = attr(\"alink\", value)\nfun Tag<HTMLBodyElement>.aLink(value: Flow<String>) = attr(\"alink\", value)\n\nfun Tag<HTMLBodyElement>.bgColor(value: String) = attr(\"bgcolor\", value)\nfun Tag<HTMLBodyElement>.bgColor(value: Flow<String>) = attr(\"bgcolor\", value)\n\nfun Tag<HTMLBodyElement>.background(value: String) = attr(\"background\", value)\nfun Tag<HTMLBodyElement>.background(value: Flow<String>) = attr(\"background\", value)\n\n\n/*\n * HTMLHeadingElement attributes\n */\nfun Tag<HTMLHeadingElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLHeadingElement>.align(value: Flow<String>) = attr(\"align\", value)\n\n\n/*\n * HTMLParagraphElement attributes\n */\nfun Tag<HTMLParagraphElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLParagraphElement>.align(value: Flow<String>) = attr(\"align\", value)\n\n\n/*\n * HTMLHRElement attributes\n */\nfun Tag<HTMLHRElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLHRElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLHRElement>.color(value: String) = attr(\"color\", value)\nfun Tag<HTMLHRElement>.color(value: Flow<String>) = attr(\"color\", value)\n\nfun Tag<HTMLHRElement>.noShade(value: Boolean, trueValue: String = \"\") = attr(\"noshade\", value, trueValue)\nfun Tag<HTMLHRElement>.noShade(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"noshade\", value, trueValue)\n\nfun Tag<HTMLHRElement>.size(value: String) = attr(\"size\", value)\nfun Tag<HTMLHRElement>.size(value: Flow<String>) = attr(\"size\", value)\n\nfun Tag<HTMLHRElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLHRElement>.width(value: Flow<String>) = attr(\"width\", value)\n\n\n/*\n * HTMLPreElement attributes\n */\nfun Tag<HTMLPreElement>.width(value: Int) = attr(\"width\", value)\nfun Tag<HTMLPreElement>.width(value: Flow<Int>) = attr(\"width\", value)\n\n\n/*\n * HTMLQuoteElement attributes\n */\nfun Tag<HTMLQuoteElement>.cite(value: String) = attr(\"cite\", value)\nfun Tag<HTMLQuoteElement>.cite(value: Flow<String>) = attr(\"cite\", value)\n\n\n/*\n * HTMLOListElement attributes\n */\nfun Tag<HTMLOListElement>.reversed(value: Boolean, trueValue: String = \"\") = attr(\"reversed\", value, trueValue)\nfun Tag<HTMLOListElement>.reversed(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"reversed\", value, trueValue)\n\nfun Tag<HTMLOListElement>.start(value: Int) = attr(\"start\", value)\nfun Tag<HTMLOListElement>.start(value: Flow<Int>) = attr(\"start\", value)\n\nfun Tag<HTMLOListElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLOListElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLOListElement>.compact(value: Boolean, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\nfun Tag<HTMLOListElement>.compact(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\n\n\n/*\n * HTMLUListElement attributes\n */\nfun Tag<HTMLUListElement>.compact(value: Boolean, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\nfun Tag<HTMLUListElement>.compact(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\n\nfun Tag<HTMLUListElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLUListElement>.type(value: Flow<String>) = attr(\"type\", value)\n\n\n/*\n * HTMLLIElement attributes\n */\nfun Tag<HTMLLIElement>.value(value: Int) = attr(\"value\", value)\nfun Tag<HTMLLIElement>.value(value: Flow<Int>) = attr(\"value\", value)\n\nfun Tag<HTMLLIElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLLIElement>.type(value: Flow<String>) = attr(\"type\", value)\n\n\n/*\n * HTMLDListElement attributes\n */\nfun Tag<HTMLDListElement>.compact(value: Boolean, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\nfun Tag<HTMLDListElement>.compact(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\n\n\n/*\n * HTMLDivElement attributes\n */\nfun Tag<HTMLDivElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLDivElement>.align(value: Flow<String>) = attr(\"align\", value)\n\n\n/*\n * HTMLAnchorElement attributes\n */\nfun Tag<HTMLAnchorElement>.target(value: String) = attr(\"target\", value)\nfun Tag<HTMLAnchorElement>.target(value: Flow<String>) = attr(\"target\", value)\n\nfun Tag<HTMLAnchorElement>.download(value: String) = attr(\"download\", value)\nfun Tag<HTMLAnchorElement>.download(value: Flow<String>) = attr(\"download\", value)\n\nfun Tag<HTMLAnchorElement>.ping(value: String) = attr(\"ping\", value)\nfun Tag<HTMLAnchorElement>.ping(value: Flow<String>) = attr(\"ping\", value)\n\nfun Tag<HTMLAnchorElement>.rel(value: String) = attr(\"rel\", value)\nfun Tag<HTMLAnchorElement>.rel(value: Flow<String>) = attr(\"rel\", value)\n\nfun Tag<HTMLAnchorElement>.hreflang(value: String) = attr(\"hreflang\", value)\nfun Tag<HTMLAnchorElement>.hreflang(value: Flow<String>) = attr(\"hreflang\", value)\n\nfun Tag<HTMLAnchorElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLAnchorElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLAnchorElement>.referrerPolicy(value: String) = attr(\"referrerpolicy\", value)\nfun Tag<HTMLAnchorElement>.referrerPolicy(value: Flow<String>) = attr(\"referrerpolicy\", value)\n\nfun Tag<HTMLAnchorElement>.coords(value: String) = attr(\"coords\", value)\nfun Tag<HTMLAnchorElement>.coords(value: Flow<String>) = attr(\"coords\", value)\n\nfun Tag<HTMLAnchorElement>.charset(value: String) = attr(\"charset\", value)\nfun Tag<HTMLAnchorElement>.charset(value: Flow<String>) = attr(\"charset\", value)\n\nfun Tag<HTMLAnchorElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLAnchorElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLAnchorElement>.rev(value: String) = attr(\"rev\", value)\nfun Tag<HTMLAnchorElement>.rev(value: Flow<String>) = attr(\"rev\", value)\n\nfun Tag<HTMLAnchorElement>.shape(value: String) = attr(\"shape\", value)\nfun Tag<HTMLAnchorElement>.shape(value: Flow<String>) = attr(\"shape\", value)\n\n// inherited attributes from supertype HTMLHyperlinkElementUtils\nfun Tag<HTMLAnchorElement>.href(value: String) = attr(\"href\", value)\nfun Tag<HTMLAnchorElement>.href(value: Flow<String>) = attr(\"href\", value)\n\nfun Tag<HTMLAnchorElement>.protocol(value: String) = attr(\"protocol\", value)\nfun Tag<HTMLAnchorElement>.protocol(value: Flow<String>) = attr(\"protocol\", value)\n\nfun Tag<HTMLAnchorElement>.username(value: String) = attr(\"username\", value)\nfun Tag<HTMLAnchorElement>.username(value: Flow<String>) = attr(\"username\", value)\n\nfun Tag<HTMLAnchorElement>.password(value: String) = attr(\"password\", value)\nfun Tag<HTMLAnchorElement>.password(value: Flow<String>) = attr(\"password\", value)\n\nfun Tag<HTMLAnchorElement>.host(value: String) = attr(\"host\", value)\nfun Tag<HTMLAnchorElement>.host(value: Flow<String>) = attr(\"host\", value)\n\nfun Tag<HTMLAnchorElement>.hostname(value: String) = attr(\"hostname\", value)\nfun Tag<HTMLAnchorElement>.hostname(value: Flow<String>) = attr(\"hostname\", value)\n\nfun Tag<HTMLAnchorElement>.port(value: String) = attr(\"port\", value)\nfun Tag<HTMLAnchorElement>.port(value: Flow<String>) = attr(\"port\", value)\n\nfun Tag<HTMLAnchorElement>.pathname(value: String) = attr(\"pathname\", value)\nfun Tag<HTMLAnchorElement>.pathname(value: Flow<String>) = attr(\"pathname\", value)\n\nfun Tag<HTMLAnchorElement>.search(value: String) = attr(\"search\", value)\nfun Tag<HTMLAnchorElement>.search(value: Flow<String>) = attr(\"search\", value)\n\nfun Tag<HTMLAnchorElement>.hash(value: String) = attr(\"hash\", value)\nfun Tag<HTMLAnchorElement>.hash(value: Flow<String>) = attr(\"hash\", value)\n\n\n/*\n * HTMLDataElement attributes\n */\nfun Tag<HTMLDataElement>.value(value: String) = attr(\"value\", value)\nfun Tag<HTMLDataElement>.value(value: Flow<String>) = attr(\"value\", value)\n\n\n/*\n * HTMLTimeElement attributes\n */\nfun Tag<HTMLTimeElement>.dateTime(value: String) = attr(\"datetime\", value)\nfun Tag<HTMLTimeElement>.dateTime(value: Flow<String>) = attr(\"datetime\", value)\n\n\n/*\n * HTMLBRElement attributes\n */\nfun Tag<HTMLBRElement>.clear(value: String) = attr(\"clear\", value)\nfun Tag<HTMLBRElement>.clear(value: Flow<String>) = attr(\"clear\", value)\n\n\n/*\n * HTMLModElement attributes\n */\nfun Tag<HTMLModElement>.cite(value: String) = attr(\"cite\", value)\nfun Tag<HTMLModElement>.cite(value: Flow<String>) = attr(\"cite\", value)\n\nfun Tag<HTMLModElement>.dateTime(value: String) = attr(\"datetime\", value)\nfun Tag<HTMLModElement>.dateTime(value: Flow<String>) = attr(\"datetime\", value)\n\n\n/*\n * HTMLSourceElement attributes\n */\nfun Tag<HTMLSourceElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLSourceElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLSourceElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLSourceElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLSourceElement>.srcset(value: String) = attr(\"srcset\", value)\nfun Tag<HTMLSourceElement>.srcset(value: Flow<String>) = attr(\"srcset\", value)\n\nfun Tag<HTMLSourceElement>.sizes(value: String) = attr(\"sizes\", value)\nfun Tag<HTMLSourceElement>.sizes(value: Flow<String>) = attr(\"sizes\", value)\n\nfun Tag<HTMLSourceElement>.media(value: String) = attr(\"media\", value)\nfun Tag<HTMLSourceElement>.media(value: Flow<String>) = attr(\"media\", value)\n\n\n/*\n * HTMLImageElement attributes\n */\nfun Tag<HTMLImageElement>.alt(value: String) = attr(\"alt\", value)\nfun Tag<HTMLImageElement>.alt(value: Flow<String>) = attr(\"alt\", value)\n\nfun Tag<HTMLImageElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLImageElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLImageElement>.srcset(value: String) = attr(\"srcset\", value)\nfun Tag<HTMLImageElement>.srcset(value: Flow<String>) = attr(\"srcset\", value)\n\nfun Tag<HTMLImageElement>.sizes(value: String) = attr(\"sizes\", value)\nfun Tag<HTMLImageElement>.sizes(value: Flow<String>) = attr(\"sizes\", value)\n\nfun Tag<HTMLImageElement>.crossOrigin(value: String?) = attr(\"crossorigin\", value)\nfun Tag<HTMLImageElement>.crossOrigin(value: Flow<String?>) = attr(\"crossorigin\", value)\n\nfun Tag<HTMLImageElement>.useMap(value: String) = attr(\"usemap\", value)\nfun Tag<HTMLImageElement>.useMap(value: Flow<String>) = attr(\"usemap\", value)\n\nfun Tag<HTMLImageElement>.isMap(value: Boolean, trueValue: String = \"\") = attr(\"ismap\", value, trueValue)\nfun Tag<HTMLImageElement>.isMap(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"ismap\", value, trueValue)\n\nfun Tag<HTMLImageElement>.width(value: Int) = attr(\"width\", value)\nfun Tag<HTMLImageElement>.width(value: Flow<Int>) = attr(\"width\", value)\n\nfun Tag<HTMLImageElement>.height(value: Int) = attr(\"height\", value)\nfun Tag<HTMLImageElement>.height(value: Flow<Int>) = attr(\"height\", value)\n\nfun Tag<HTMLImageElement>.referrerPolicy(value: String) = attr(\"referrerpolicy\", value)\nfun Tag<HTMLImageElement>.referrerPolicy(value: Flow<String>) = attr(\"referrerpolicy\", value)\n\nfun Tag<HTMLImageElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLImageElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLImageElement>.lowsrc(value: String) = attr(\"lowsrc\", value)\nfun Tag<HTMLImageElement>.lowsrc(value: Flow<String>) = attr(\"lowsrc\", value)\n\nfun Tag<HTMLImageElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLImageElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLImageElement>.hspace(value: Int) = attr(\"hspace\", value)\nfun Tag<HTMLImageElement>.hspace(value: Flow<Int>) = attr(\"hspace\", value)\n\nfun Tag<HTMLImageElement>.vspace(value: Int) = attr(\"vspace\", value)\nfun Tag<HTMLImageElement>.vspace(value: Flow<Int>) = attr(\"vspace\", value)\n\nfun Tag<HTMLImageElement>.longDesc(value: String) = attr(\"longdesc\", value)\nfun Tag<HTMLImageElement>.longDesc(value: Flow<String>) = attr(\"longdesc\", value)\n\nfun Tag<HTMLImageElement>.border(value: String) = attr(\"border\", value)\nfun Tag<HTMLImageElement>.border(value: Flow<String>) = attr(\"border\", value)\n\n\n/*\n * HTMLIFrameElement attributes\n */\nfun Tag<HTMLIFrameElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLIFrameElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLIFrameElement>.srcdoc(value: String) = attr(\"srcdoc\", value)\nfun Tag<HTMLIFrameElement>.srcdoc(value: Flow<String>) = attr(\"srcdoc\", value)\n\nfun Tag<HTMLIFrameElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLIFrameElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLIFrameElement>.allowFullscreen(value: Boolean, trueValue: String = \"\") = attr(\"allowfullscreen\", value, trueValue)\nfun Tag<HTMLIFrameElement>.allowFullscreen(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"allowfullscreen\", value, trueValue)\n\nfun Tag<HTMLIFrameElement>.allowUserMedia(value: Boolean, trueValue: String = \"\") = attr(\"allowusermedia\", value, trueValue)\nfun Tag<HTMLIFrameElement>.allowUserMedia(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"allowusermedia\", value, trueValue)\n\nfun Tag<HTMLIFrameElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLIFrameElement>.width(value: Flow<String>) = attr(\"width\", value)\n\nfun Tag<HTMLIFrameElement>.height(value: String) = attr(\"height\", value)\nfun Tag<HTMLIFrameElement>.height(value: Flow<String>) = attr(\"height\", value)\n\nfun Tag<HTMLIFrameElement>.referrerPolicy(value: String) = attr(\"referrerpolicy\", value)\nfun Tag<HTMLIFrameElement>.referrerPolicy(value: Flow<String>) = attr(\"referrerpolicy\", value)\n\nfun Tag<HTMLIFrameElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLIFrameElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLIFrameElement>.scrolling(value: String) = attr(\"scrolling\", value)\nfun Tag<HTMLIFrameElement>.scrolling(value: Flow<String>) = attr(\"scrolling\", value)\n\nfun Tag<HTMLIFrameElement>.frameBorder(value: String) = attr(\"frameborder\", value)\nfun Tag<HTMLIFrameElement>.frameBorder(value: Flow<String>) = attr(\"frameborder\", value)\n\nfun Tag<HTMLIFrameElement>.longDesc(value: String) = attr(\"longdesc\", value)\nfun Tag<HTMLIFrameElement>.longDesc(value: Flow<String>) = attr(\"longdesc\", value)\n\nfun Tag<HTMLIFrameElement>.marginHeight(value: String) = attr(\"marginheight\", value)\nfun Tag<HTMLIFrameElement>.marginHeight(value: Flow<String>) = attr(\"marginheight\", value)\n\nfun Tag<HTMLIFrameElement>.marginWidth(value: String) = attr(\"marginwidth\", value)\nfun Tag<HTMLIFrameElement>.marginWidth(value: Flow<String>) = attr(\"marginwidth\", value)\n\n\n/*\n * HTMLEmbedElement attributes\n */\nfun Tag<HTMLEmbedElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLEmbedElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLEmbedElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLEmbedElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLEmbedElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLEmbedElement>.width(value: Flow<String>) = attr(\"width\", value)\n\nfun Tag<HTMLEmbedElement>.height(value: String) = attr(\"height\", value)\nfun Tag<HTMLEmbedElement>.height(value: Flow<String>) = attr(\"height\", value)\n\nfun Tag<HTMLEmbedElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLEmbedElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLEmbedElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLEmbedElement>.name(value: Flow<String>) = attr(\"name\", value)\n\n\n/*\n * HTMLObjectElement attributes\n */\nfun Tag<HTMLObjectElement>.data(value: String) = attr(\"data\", value)\nfun Tag<HTMLObjectElement>.data(value: Flow<String>) = attr(\"data\", value)\n\nfun Tag<HTMLObjectElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLObjectElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLObjectElement>.typeMustMatch(value: Boolean, trueValue: String = \"\") = attr(\"typemustmatch\", value, trueValue)\nfun Tag<HTMLObjectElement>.typeMustMatch(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"typemustmatch\", value, trueValue)\n\nfun Tag<HTMLObjectElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLObjectElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLObjectElement>.useMap(value: String) = attr(\"usemap\", value)\nfun Tag<HTMLObjectElement>.useMap(value: Flow<String>) = attr(\"usemap\", value)\n\nfun Tag<HTMLObjectElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLObjectElement>.width(value: Flow<String>) = attr(\"width\", value)\n\nfun Tag<HTMLObjectElement>.height(value: String) = attr(\"height\", value)\nfun Tag<HTMLObjectElement>.height(value: Flow<String>) = attr(\"height\", value)\n\nfun Tag<HTMLObjectElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLObjectElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLObjectElement>.archive(value: String) = attr(\"archive\", value)\nfun Tag<HTMLObjectElement>.archive(value: Flow<String>) = attr(\"archive\", value)\n\nfun Tag<HTMLObjectElement>.code(value: String) = attr(\"code\", value)\nfun Tag<HTMLObjectElement>.code(value: Flow<String>) = attr(\"code\", value)\n\nfun Tag<HTMLObjectElement>.declare(value: Boolean, trueValue: String = \"\") = attr(\"declare\", value, trueValue)\nfun Tag<HTMLObjectElement>.declare(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"declare\", value, trueValue)\n\nfun Tag<HTMLObjectElement>.hspace(value: Int) = attr(\"hspace\", value)\nfun Tag<HTMLObjectElement>.hspace(value: Flow<Int>) = attr(\"hspace\", value)\n\nfun Tag<HTMLObjectElement>.standby(value: String) = attr(\"standby\", value)\nfun Tag<HTMLObjectElement>.standby(value: Flow<String>) = attr(\"standby\", value)\n\nfun Tag<HTMLObjectElement>.vspace(value: Int) = attr(\"vspace\", value)\nfun Tag<HTMLObjectElement>.vspace(value: Flow<Int>) = attr(\"vspace\", value)\n\nfun Tag<HTMLObjectElement>.codeBase(value: String) = attr(\"codebase\", value)\nfun Tag<HTMLObjectElement>.codeBase(value: Flow<String>) = attr(\"codebase\", value)\n\nfun Tag<HTMLObjectElement>.codeType(value: String) = attr(\"codetype\", value)\nfun Tag<HTMLObjectElement>.codeType(value: Flow<String>) = attr(\"codetype\", value)\n\nfun Tag<HTMLObjectElement>.border(value: String) = attr(\"border\", value)\nfun Tag<HTMLObjectElement>.border(value: Flow<String>) = attr(\"border\", value)\n\n\n/*\n * HTMLParamElement attributes\n */\nfun Tag<HTMLParamElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLParamElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLParamElement>.value(value: String) = attr(\"value\", value)\nfun Tag<HTMLParamElement>.value(value: Flow<String>) = attr(\"value\", value)\n\nfun Tag<HTMLParamElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLParamElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLParamElement>.valueType(value: String) = attr(\"valuetype\", value)\nfun Tag<HTMLParamElement>.valueType(value: Flow<String>) = attr(\"valuetype\", value)\n\n\n/*\n * HTMLVideoElement attributes\n */\nfun Tag<HTMLVideoElement>.width(value: Int) = attr(\"width\", value)\nfun Tag<HTMLVideoElement>.width(value: Flow<Int>) = attr(\"width\", value)\n\nfun Tag<HTMLVideoElement>.height(value: Int) = attr(\"height\", value)\nfun Tag<HTMLVideoElement>.height(value: Flow<Int>) = attr(\"height\", value)\n\nfun Tag<HTMLVideoElement>.poster(value: String) = attr(\"poster\", value)\nfun Tag<HTMLVideoElement>.poster(value: Flow<String>) = attr(\"poster\", value)\n\nfun Tag<HTMLVideoElement>.playsInline(value: Boolean, trueValue: String = \"\") = attr(\"playsinline\", value, trueValue)\nfun Tag<HTMLVideoElement>.playsInline(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"playsinline\", value, trueValue)\n\n\n/*\n * HTMLTrackElement attributes\n */\nfun Tag<HTMLTrackElement>.kind(value: String) = attr(\"kind\", value)\nfun Tag<HTMLTrackElement>.kind(value: Flow<String>) = attr(\"kind\", value)\n\nfun Tag<HTMLTrackElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLTrackElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLTrackElement>.srclang(value: String) = attr(\"srclang\", value)\nfun Tag<HTMLTrackElement>.srclang(value: Flow<String>) = attr(\"srclang\", value)\n\nfun Tag<HTMLTrackElement>.label(value: String) = attr(\"label\", value)\nfun Tag<HTMLTrackElement>.label(value: Flow<String>) = attr(\"label\", value)\n\nfun Tag<HTMLTrackElement>.default(value: Boolean, trueValue: String = \"\") = attr(\"default\", value, trueValue)\nfun Tag<HTMLTrackElement>.default(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"default\", value, trueValue)\n\n\n/*\n * HTMLMediaElement attributes\n */\nfun Tag<HTMLMediaElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLMediaElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLMediaElement>.srcObject(value: MediaProvider?) = attr(\"srcobject\", value)\nfun Tag<HTMLMediaElement>.srcObject(value: Flow<MediaProvider?>) = attr(\"srcobject\", value)\n\nfun Tag<HTMLMediaElement>.crossOrigin(value: String?) = attr(\"crossorigin\", value)\nfun Tag<HTMLMediaElement>.crossOrigin(value: Flow<String?>) = attr(\"crossorigin\", value)\n\nfun Tag<HTMLMediaElement>.preload(value: String) = attr(\"preload\", value)\nfun Tag<HTMLMediaElement>.preload(value: Flow<String>) = attr(\"preload\", value)\n\nfun Tag<HTMLMediaElement>.currentTime(value: Double) = attr(\"currenttime\", value)\nfun Tag<HTMLMediaElement>.currentTime(value: Flow<Double>) = attr(\"currenttime\", value)\n\nfun Tag<HTMLMediaElement>.defaultPlaybackRate(value: Double) = attr(\"defaultplaybackrate\", value)\nfun Tag<HTMLMediaElement>.defaultPlaybackRate(value: Flow<Double>) = attr(\"defaultplaybackrate\", value)\n\nfun Tag<HTMLMediaElement>.playbackRate(value: Double) {\n    domNode.playbackRate = value\n    domNode.defaultPlaybackRate = value\n    domNode.setAttribute(\"playbackrate\", value.toString())\n}\n\nfun Tag<HTMLMediaElement>.playbackRate(value: Flow<Double>) {\n    mountSimple(job, value) { v -> playbackRate(v) }\n}\n\nfun Tag<HTMLMediaElement>.autoplay(value: Boolean, trueValue: String = \"\") = attr(\"autoplay\", value, trueValue)\nfun Tag<HTMLMediaElement>.autoplay(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"autoplay\", value, trueValue)\n\nfun Tag<HTMLMediaElement>.loop(value: Boolean, trueValue: String = \"\") = attr(\"loop\", value, trueValue)\nfun Tag<HTMLMediaElement>.loop(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"loop\", value, trueValue)\n\nfun Tag<HTMLMediaElement>.controls(value: Boolean, trueValue: String = \"\") = attr(\"controls\", value, trueValue)\nfun Tag<HTMLMediaElement>.controls(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"controls\", value, trueValue)\n\nfun Tag<HTMLMediaElement>.volume(value: Double) = attr(\"volume\", value)\nfun Tag<HTMLMediaElement>.volume(value: Flow<Double>) = attr(\"volume\", value)\n\nfun Tag<HTMLMediaElement>.muted(value: Boolean, trueValue: String = \"\") {\n    domNode.muted = value\n    domNode.defaultMuted = value\n    if (value) domNode.setAttribute(\"muted\", trueValue)\n    else domNode.removeAttribute(\"muted\")\n}\n\nfun Tag<HTMLMediaElement>.muted(value: Flow<Boolean>, trueValue: String = \"\") {\n    mountSimple(job, value) { v -> muted(v, trueValue) }\n}\n\nfun Tag<HTMLMediaElement>.defaultMuted(value: Boolean, trueValue: String = \"\") = attr(\"defaultmuted\", value, trueValue)\nfun Tag<HTMLMediaElement>.defaultMuted(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"defaultmuted\", value, trueValue)\n\n\n/*\n * HTMLMapElement attributes\n */\nfun Tag<HTMLMapElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLMapElement>.name(value: Flow<String>) = attr(\"name\", value)\n\n\n/*\n * HTMLAreaElement attributes\n */\nfun Tag<HTMLAreaElement>.alt(value: String) = attr(\"alt\", value)\nfun Tag<HTMLAreaElement>.alt(value: Flow<String>) = attr(\"alt\", value)\n\nfun Tag<HTMLAreaElement>.coords(value: String) = attr(\"coords\", value)\nfun Tag<HTMLAreaElement>.coords(value: Flow<String>) = attr(\"coords\", value)\n\nfun Tag<HTMLAreaElement>.shape(value: String) = attr(\"shape\", value)\nfun Tag<HTMLAreaElement>.shape(value: Flow<String>) = attr(\"shape\", value)\n\nfun Tag<HTMLAreaElement>.target(value: String) = attr(\"target\", value)\nfun Tag<HTMLAreaElement>.target(value: Flow<String>) = attr(\"target\", value)\n\nfun Tag<HTMLAreaElement>.download(value: String) = attr(\"download\", value)\nfun Tag<HTMLAreaElement>.download(value: Flow<String>) = attr(\"download\", value)\n\nfun Tag<HTMLAreaElement>.ping(value: String) = attr(\"ping\", value)\nfun Tag<HTMLAreaElement>.ping(value: Flow<String>) = attr(\"ping\", value)\n\nfun Tag<HTMLAreaElement>.rel(value: String) = attr(\"rel\", value)\nfun Tag<HTMLAreaElement>.rel(value: Flow<String>) = attr(\"rel\", value)\n\nfun Tag<HTMLAreaElement>.referrerPolicy(value: String) = attr(\"referrerpolicy\", value)\nfun Tag<HTMLAreaElement>.referrerPolicy(value: Flow<String>) = attr(\"referrerpolicy\", value)\n\nfun Tag<HTMLAreaElement>.noHref(value: Boolean, trueValue: String = \"\") = attr(\"nohref\", value, trueValue)\nfun Tag<HTMLAreaElement>.noHref(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"nohref\", value, trueValue)\n\n// inherited attributes from supertype HTMLHyperlinkElementUtils\nfun Tag<HTMLAreaElement>.href(value: String) = attr(\"href\", value)\nfun Tag<HTMLAreaElement>.href(value: Flow<String>) = attr(\"href\", value)\n\nfun Tag<HTMLAreaElement>.protocol(value: String) = attr(\"protocol\", value)\nfun Tag<HTMLAreaElement>.protocol(value: Flow<String>) = attr(\"protocol\", value)\n\nfun Tag<HTMLAreaElement>.username(value: String) = attr(\"username\", value)\nfun Tag<HTMLAreaElement>.username(value: Flow<String>) = attr(\"username\", value)\n\nfun Tag<HTMLAreaElement>.password(value: String) = attr(\"password\", value)\nfun Tag<HTMLAreaElement>.password(value: Flow<String>) = attr(\"password\", value)\n\nfun Tag<HTMLAreaElement>.host(value: String) = attr(\"host\", value)\nfun Tag<HTMLAreaElement>.host(value: Flow<String>) = attr(\"host\", value)\n\nfun Tag<HTMLAreaElement>.hostname(value: String) = attr(\"hostname\", value)\nfun Tag<HTMLAreaElement>.hostname(value: Flow<String>) = attr(\"hostname\", value)\n\nfun Tag<HTMLAreaElement>.port(value: String) = attr(\"port\", value)\nfun Tag<HTMLAreaElement>.port(value: Flow<String>) = attr(\"port\", value)\n\nfun Tag<HTMLAreaElement>.pathname(value: String) = attr(\"pathname\", value)\nfun Tag<HTMLAreaElement>.pathname(value: Flow<String>) = attr(\"pathname\", value)\n\nfun Tag<HTMLAreaElement>.search(value: String) = attr(\"search\", value)\nfun Tag<HTMLAreaElement>.search(value: Flow<String>) = attr(\"search\", value)\n\nfun Tag<HTMLAreaElement>.hash(value: String) = attr(\"hash\", value)\nfun Tag<HTMLAreaElement>.hash(value: Flow<String>) = attr(\"hash\", value)\n\n\n/*\n * HTMLTableElement attributes\n */\nfun Tag<HTMLTableElement>.caption(value: HTMLTableCaptionElement?) = attr(\"caption\", value)\nfun Tag<HTMLTableElement>.caption(value: Flow<HTMLTableCaptionElement?>) = attr(\"caption\", value)\n\nfun Tag<HTMLTableElement>.tHead(value: HTMLTableSectionElement?) = attr(\"thead\", value)\nfun Tag<HTMLTableElement>.tHead(value: Flow<HTMLTableSectionElement?>) = attr(\"thead\", value)\n\nfun Tag<HTMLTableElement>.tFoot(value: HTMLTableSectionElement?) = attr(\"tfoot\", value)\nfun Tag<HTMLTableElement>.tFoot(value: Flow<HTMLTableSectionElement?>) = attr(\"tfoot\", value)\n\nfun Tag<HTMLTableElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLTableElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLTableElement>.border(value: String) = attr(\"border\", value)\nfun Tag<HTMLTableElement>.border(value: Flow<String>) = attr(\"border\", value)\n\nfun Tag<HTMLTableElement>.frame(value: String) = attr(\"frame\", value)\nfun Tag<HTMLTableElement>.frame(value: Flow<String>) = attr(\"frame\", value)\n\nfun Tag<HTMLTableElement>.rules(value: String) = attr(\"rules\", value)\nfun Tag<HTMLTableElement>.rules(value: Flow<String>) = attr(\"rules\", value)\n\nfun Tag<HTMLTableElement>.summary(value: String) = attr(\"summary\", value)\nfun Tag<HTMLTableElement>.summary(value: Flow<String>) = attr(\"summary\", value)\n\nfun Tag<HTMLTableElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLTableElement>.width(value: Flow<String>) = attr(\"width\", value)\n\nfun Tag<HTMLTableElement>.bgColor(value: String) = attr(\"bgcolor\", value)\nfun Tag<HTMLTableElement>.bgColor(value: Flow<String>) = attr(\"bgcolor\", value)\n\nfun Tag<HTMLTableElement>.cellPadding(value: String) = attr(\"cellpadding\", value)\nfun Tag<HTMLTableElement>.cellPadding(value: Flow<String>) = attr(\"cellpadding\", value)\n\nfun Tag<HTMLTableElement>.cellSpacing(value: String) = attr(\"cellspacing\", value)\nfun Tag<HTMLTableElement>.cellSpacing(value: Flow<String>) = attr(\"cellspacing\", value)\n\n\n/*\n * HTMLTableCaptionElement attributes\n */\nfun Tag<HTMLTableCaptionElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLTableCaptionElement>.align(value: Flow<String>) = attr(\"align\", value)\n\n\n/*\n * HTMLTableColElement attributes\n */\nfun Tag<HTMLTableColElement>.span(value: Int) = attr(\"span\", value)\nfun Tag<HTMLTableColElement>.span(value: Flow<Int>) = attr(\"span\", value)\n\nfun Tag<HTMLTableColElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLTableColElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLTableColElement>.ch(value: String) = attr(\"ch\", value)\nfun Tag<HTMLTableColElement>.ch(value: Flow<String>) = attr(\"ch\", value)\n\nfun Tag<HTMLTableColElement>.chOff(value: String) = attr(\"choff\", value)\nfun Tag<HTMLTableColElement>.chOff(value: Flow<String>) = attr(\"choff\", value)\n\nfun Tag<HTMLTableColElement>.vAlign(value: String) = attr(\"valign\", value)\nfun Tag<HTMLTableColElement>.vAlign(value: Flow<String>) = attr(\"valign\", value)\n\nfun Tag<HTMLTableColElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLTableColElement>.width(value: Flow<String>) = attr(\"width\", value)\n\n\n/*\n * HTMLTableSectionElement attributes\n */\nfun Tag<HTMLTableSectionElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLTableSectionElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLTableSectionElement>.ch(value: String) = attr(\"ch\", value)\nfun Tag<HTMLTableSectionElement>.ch(value: Flow<String>) = attr(\"ch\", value)\n\nfun Tag<HTMLTableSectionElement>.chOff(value: String) = attr(\"choff\", value)\nfun Tag<HTMLTableSectionElement>.chOff(value: Flow<String>) = attr(\"choff\", value)\n\nfun Tag<HTMLTableSectionElement>.vAlign(value: String) = attr(\"valign\", value)\nfun Tag<HTMLTableSectionElement>.vAlign(value: Flow<String>) = attr(\"valign\", value)\n\n\n/*\n * HTMLTableRowElement attributes\n */\nfun Tag<HTMLTableRowElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLTableRowElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLTableRowElement>.ch(value: String) = attr(\"ch\", value)\nfun Tag<HTMLTableRowElement>.ch(value: Flow<String>) = attr(\"ch\", value)\n\nfun Tag<HTMLTableRowElement>.chOff(value: String) = attr(\"choff\", value)\nfun Tag<HTMLTableRowElement>.chOff(value: Flow<String>) = attr(\"choff\", value)\n\nfun Tag<HTMLTableRowElement>.vAlign(value: String) = attr(\"valign\", value)\nfun Tag<HTMLTableRowElement>.vAlign(value: Flow<String>) = attr(\"valign\", value)\n\nfun Tag<HTMLTableRowElement>.bgColor(value: String) = attr(\"bgcolor\", value)\nfun Tag<HTMLTableRowElement>.bgColor(value: Flow<String>) = attr(\"bgcolor\", value)\n\n\n/*\n * HTMLTableCellElement attributes\n */\nfun Tag<HTMLTableCellElement>.colSpan(value: Int) = attr(\"colspan\", value)\nfun Tag<HTMLTableCellElement>.colSpan(value: Flow<Int>) = attr(\"colspan\", value)\n\nfun Tag<HTMLTableCellElement>.rowSpan(value: Int) = attr(\"rowspan\", value)\nfun Tag<HTMLTableCellElement>.rowSpan(value: Flow<Int>) = attr(\"rowspan\", value)\n\nfun Tag<HTMLTableCellElement>.headers(value: String) = attr(\"headers\", value)\nfun Tag<HTMLTableCellElement>.headers(value: Flow<String>) = attr(\"headers\", value)\n\nfun Tag<HTMLTableCellElement>.scope(value: String) = attr(\"scope\", value)\nfun Tag<HTMLTableCellElement>.scope(value: Flow<String>) = attr(\"scope\", value)\n\nfun Tag<HTMLTableCellElement>.abbr(value: String) = attr(\"abbr\", value)\nfun Tag<HTMLTableCellElement>.abbr(value: Flow<String>) = attr(\"abbr\", value)\n\nfun Tag<HTMLTableCellElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLTableCellElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLTableCellElement>.axis(value: String) = attr(\"axis\", value)\nfun Tag<HTMLTableCellElement>.axis(value: Flow<String>) = attr(\"axis\", value)\n\nfun Tag<HTMLTableCellElement>.height(value: String) = attr(\"height\", value)\nfun Tag<HTMLTableCellElement>.height(value: Flow<String>) = attr(\"height\", value)\n\nfun Tag<HTMLTableCellElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLTableCellElement>.width(value: Flow<String>) = attr(\"width\", value)\n\nfun Tag<HTMLTableCellElement>.ch(value: String) = attr(\"ch\", value)\nfun Tag<HTMLTableCellElement>.ch(value: Flow<String>) = attr(\"ch\", value)\n\nfun Tag<HTMLTableCellElement>.chOff(value: String) = attr(\"choff\", value)\nfun Tag<HTMLTableCellElement>.chOff(value: Flow<String>) = attr(\"choff\", value)\n\nfun Tag<HTMLTableCellElement>.noWrap(value: Boolean, trueValue: String = \"\") = attr(\"nowrap\", value, trueValue)\nfun Tag<HTMLTableCellElement>.noWrap(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"nowrap\", value, trueValue)\n\nfun Tag<HTMLTableCellElement>.vAlign(value: String) = attr(\"valign\", value)\nfun Tag<HTMLTableCellElement>.vAlign(value: Flow<String>) = attr(\"valign\", value)\n\nfun Tag<HTMLTableCellElement>.bgColor(value: String) = attr(\"bgcolor\", value)\nfun Tag<HTMLTableCellElement>.bgColor(value: Flow<String>) = attr(\"bgcolor\", value)\n\n\n/*\n * HTMLFormElement attributes\n */\nfun Tag<HTMLFormElement>.acceptCharset(value: String) = attr(\"acceptcharset\", value)\nfun Tag<HTMLFormElement>.acceptCharset(value: Flow<String>) = attr(\"acceptcharset\", value)\n\nfun Tag<HTMLFormElement>.action(value: String) = attr(\"action\", value)\nfun Tag<HTMLFormElement>.action(value: Flow<String>) = attr(\"action\", value)\n\nfun Tag<HTMLFormElement>.autocomplete(value: String) = attr(\"autocomplete\", value)\nfun Tag<HTMLFormElement>.autocomplete(value: Flow<String>) = attr(\"autocomplete\", value)\n\nfun Tag<HTMLFormElement>.enctype(value: String) = attr(\"enctype\", value)\nfun Tag<HTMLFormElement>.enctype(value: Flow<String>) = attr(\"enctype\", value)\n\nfun Tag<HTMLFormElement>.encoding(value: String) = attr(\"encoding\", value)\nfun Tag<HTMLFormElement>.encoding(value: Flow<String>) = attr(\"encoding\", value)\n\nfun Tag<HTMLFormElement>.method(value: String) = attr(\"method\", value)\nfun Tag<HTMLFormElement>.method(value: Flow<String>) = attr(\"method\", value)\n\nfun Tag<HTMLFormElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLFormElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLFormElement>.noValidate(value: Boolean, trueValue: String = \"\") = attr(\"novalidate\", value, trueValue)\nfun Tag<HTMLFormElement>.noValidate(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"novalidate\", value, trueValue)\n\nfun Tag<HTMLFormElement>.target(value: String) = attr(\"target\", value)\nfun Tag<HTMLFormElement>.target(value: Flow<String>) = attr(\"target\", value)\n\n\n/*\n * HTMLLabelElement attributes\n */\nfun Tag<HTMLLabelElement>.`for`(value: String) = attr(\"for\", value)\nfun Tag<HTMLLabelElement>.`for`(value: Flow<String>) = attr(\"for\", value)\n\n\n/*\n * HTMLInputElement attributes\n */\nfun Tag<HTMLInputElement>.accept(value: String) = attr(\"accept\", value)\nfun Tag<HTMLInputElement>.accept(value: Flow<String>) = attr(\"accept\", value)\n\nfun Tag<HTMLInputElement>.alt(value: String) = attr(\"alt\", value)\nfun Tag<HTMLInputElement>.alt(value: Flow<String>) = attr(\"alt\", value)\n\nfun Tag<HTMLInputElement>.autocomplete(value: String) = attr(\"autocomplete\", value)\nfun Tag<HTMLInputElement>.autocomplete(value: Flow<String>) = attr(\"autocomplete\", value)\n\nfun Tag<HTMLInputElement>.autofocus(value: Boolean, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\nfun Tag<HTMLInputElement>.autofocus(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\n\nfun Tag<HTMLInputElement>.defaultChecked(value: Boolean, trueValue: String = \"\") = attr(\"defaultchecked\", value, trueValue)\nfun Tag<HTMLInputElement>.defaultChecked(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"defaultchecked\", value, trueValue)\n\nfun Tag<HTMLInputElement>.checked(value: Boolean, trueValue: String = \"\") {\n    domNode.checked = value\n    domNode.defaultChecked = value\n    if (value) domNode.setAttribute(\"checked\", trueValue)\n    else domNode.removeAttribute(\"checked\")\n}\n\nfun Tag<HTMLInputElement>.checked(value: Flow<Boolean>, trueValue: String = \"\") {\n    mountSimple(job, value) { v -> checked(v, trueValue) }\n}\n\nfun Tag<HTMLInputElement>.dirName(value: String) = attr(\"dirname\", value)\nfun Tag<HTMLInputElement>.dirName(value: Flow<String>) = attr(\"dirname\", value)\n\nfun Tag<HTMLInputElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLInputElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLInputElement>.formAction(value: String) = attr(\"formaction\", value)\nfun Tag<HTMLInputElement>.formAction(value: Flow<String>) = attr(\"formaction\", value)\n\nfun Tag<HTMLInputElement>.formEnctype(value: String) = attr(\"formenctype\", value)\nfun Tag<HTMLInputElement>.formEnctype(value: Flow<String>) = attr(\"formenctype\", value)\n\nfun Tag<HTMLInputElement>.formMethod(value: String) = attr(\"formmethod\", value)\nfun Tag<HTMLInputElement>.formMethod(value: Flow<String>) = attr(\"formmethod\", value)\n\nfun Tag<HTMLInputElement>.formNoValidate(value: Boolean, trueValue: String = \"\") = attr(\"formnovalidate\", value, trueValue)\nfun Tag<HTMLInputElement>.formNoValidate(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"formnovalidate\", value, trueValue)\n\nfun Tag<HTMLInputElement>.formTarget(value: String) = attr(\"formtarget\", value)\nfun Tag<HTMLInputElement>.formTarget(value: Flow<String>) = attr(\"formtarget\", value)\n\nfun Tag<HTMLInputElement>.height(value: Int) = attr(\"height\", value)\nfun Tag<HTMLInputElement>.height(value: Flow<Int>) = attr(\"height\", value)\n\nfun Tag<HTMLInputElement>.indeterminate(value: Boolean, trueValue: String = \"\") = attr(\"indeterminate\", value, trueValue)\nfun Tag<HTMLInputElement>.indeterminate(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"indeterminate\", value, trueValue)\n\nfun Tag<HTMLInputElement>.inputMode(value: String) = attr(\"inputmode\", value)\nfun Tag<HTMLInputElement>.inputMode(value: Flow<String>) = attr(\"inputmode\", value)\n\nfun Tag<HTMLInputElement>.max(value: String) = attr(\"max\", value)\nfun Tag<HTMLInputElement>.max(value: Flow<String>) = attr(\"max\", value)\n\nfun Tag<HTMLInputElement>.maxLength(value: Int) = attr(\"maxlength\", value)\nfun Tag<HTMLInputElement>.maxLength(value: Flow<Int>) = attr(\"maxlength\", value)\n\nfun Tag<HTMLInputElement>.min(value: String) = attr(\"min\", value)\nfun Tag<HTMLInputElement>.min(value: Flow<String>) = attr(\"min\", value)\n\nfun Tag<HTMLInputElement>.minLength(value: Int) = attr(\"minlength\", value)\nfun Tag<HTMLInputElement>.minLength(value: Flow<Int>) = attr(\"minlength\", value)\n\nfun Tag<HTMLInputElement>.multiple(value: Boolean, trueValue: String = \"\") = attr(\"multiple\", value, trueValue)\nfun Tag<HTMLInputElement>.multiple(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"multiple\", value, trueValue)\n\nfun Tag<HTMLInputElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLInputElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLInputElement>.pattern(value: String) = attr(\"pattern\", value)\nfun Tag<HTMLInputElement>.pattern(value: Flow<String>) = attr(\"pattern\", value)\n\nfun Tag<HTMLInputElement>.placeholder(value: String) = attr(\"placeholder\", value)\nfun Tag<HTMLInputElement>.placeholder(value: Flow<String>) = attr(\"placeholder\", value)\n\nfun Tag<HTMLInputElement>.readOnly(value: Boolean, trueValue: String = \"\") = attr(\"readonly\", value, trueValue)\nfun Tag<HTMLInputElement>.readOnly(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"readonly\", value, trueValue)\n\nfun Tag<HTMLInputElement>.required(value: Boolean, trueValue: String = \"\") = attr(\"required\", value, trueValue)\nfun Tag<HTMLInputElement>.required(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"required\", value, trueValue)\n\nfun Tag<HTMLInputElement>.size(value: Int) = attr(\"size\", value)\nfun Tag<HTMLInputElement>.size(value: Flow<Int>) = attr(\"size\", value)\n\nfun Tag<HTMLInputElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLInputElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLInputElement>.step(value: String) = attr(\"step\", value)\nfun Tag<HTMLInputElement>.step(value: Flow<String>) = attr(\"step\", value)\n\nfun Tag<HTMLInputElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLInputElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLInputElement>.defaultValue(value: String) = attr(\"defaultvalue\", value)\nfun Tag<HTMLInputElement>.defaultValue(value: Flow<String>) = attr(\"defaultvalue\", value)\n\nfun Tag<HTMLInputElement>.value(value: String) {\n    domNode.value = value\n    domNode.defaultValue = value\n    domNode.setAttribute(\"value\", value)\n}\n\nfun Tag<HTMLInputElement>.value(value: Flow<String>) {\n    mountSimple(job, value) { v -> value(v) }\n}\n\nfun Tag<HTMLInputElement>.valueAsDate(value: String) = attr(\"valueasdate\", value)\nfun Tag<HTMLInputElement>.valueAsDate(value: Flow<String>) = attr(\"valueasdate\", value)\n\nfun Tag<HTMLInputElement>.valueAsNumber(value: Double) = attr(\"valueasnumber\", value)\nfun Tag<HTMLInputElement>.valueAsNumber(value: Flow<Double>) = attr(\"valueasnumber\", value)\n\nfun Tag<HTMLInputElement>.width(value: Int) = attr(\"width\", value)\nfun Tag<HTMLInputElement>.width(value: Flow<Int>) = attr(\"width\", value)\n\nfun Tag<HTMLInputElement>.selectionStart(value: Int?) = attr(\"selectionstart\", value)\nfun Tag<HTMLInputElement>.selectionStart(value: Flow<Int?>) = attr(\"selectionstart\", value)\n\nfun Tag<HTMLInputElement>.selectionEnd(value: Int?) = attr(\"selectionend\", value)\nfun Tag<HTMLInputElement>.selectionEnd(value: Flow<Int?>) = attr(\"selectionend\", value)\n\nfun Tag<HTMLInputElement>.selectionDirection(value: String?) = attr(\"selectiondirection\", value)\nfun Tag<HTMLInputElement>.selectionDirection(value: Flow<String?>) = attr(\"selectiondirection\", value)\n\nfun Tag<HTMLInputElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLInputElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLInputElement>.useMap(value: String) = attr(\"usemap\", value)\nfun Tag<HTMLInputElement>.useMap(value: Flow<String>) = attr(\"usemap\", value)\n\n\n/*\n * HTMLButtonElement attributes\n */\nfun Tag<HTMLButtonElement>.autofocus(value: Boolean, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\nfun Tag<HTMLButtonElement>.autofocus(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\n\nfun Tag<HTMLButtonElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLButtonElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLButtonElement>.formAction(value: String) = attr(\"formaction\", value)\nfun Tag<HTMLButtonElement>.formAction(value: Flow<String>) = attr(\"formaction\", value)\n\nfun Tag<HTMLButtonElement>.formEnctype(value: String) = attr(\"formenctype\", value)\nfun Tag<HTMLButtonElement>.formEnctype(value: Flow<String>) = attr(\"formenctype\", value)\n\nfun Tag<HTMLButtonElement>.formMethod(value: String) = attr(\"formmethod\", value)\nfun Tag<HTMLButtonElement>.formMethod(value: Flow<String>) = attr(\"formmethod\", value)\n\nfun Tag<HTMLButtonElement>.formNoValidate(value: Boolean, trueValue: String = \"\") = attr(\"formnovalidate\", value, trueValue)\nfun Tag<HTMLButtonElement>.formNoValidate(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"formnovalidate\", value, trueValue)\n\nfun Tag<HTMLButtonElement>.formTarget(value: String) = attr(\"formtarget\", value)\nfun Tag<HTMLButtonElement>.formTarget(value: Flow<String>) = attr(\"formtarget\", value)\n\nfun Tag<HTMLButtonElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLButtonElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLButtonElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLButtonElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLButtonElement>.value(value: String) = attr(\"value\", value)\nfun Tag<HTMLButtonElement>.value(value: Flow<String>) = attr(\"value\", value)\n\nfun Tag<HTMLButtonElement>.menu(value: HTMLMenuElement?) = attr(\"menu\", value)\nfun Tag<HTMLButtonElement>.menu(value: Flow<HTMLMenuElement?>) = attr(\"menu\", value)\n\n\n/*\n * HTMLSelectElement attributes\n */\nfun Tag<HTMLSelectElement>.autocomplete(value: String) = attr(\"autocomplete\", value)\nfun Tag<HTMLSelectElement>.autocomplete(value: Flow<String>) = attr(\"autocomplete\", value)\n\nfun Tag<HTMLSelectElement>.autofocus(value: Boolean, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\nfun Tag<HTMLSelectElement>.autofocus(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\n\nfun Tag<HTMLSelectElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLSelectElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLSelectElement>.multiple(value: Boolean, trueValue: String = \"\") = attr(\"multiple\", value, trueValue)\nfun Tag<HTMLSelectElement>.multiple(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"multiple\", value, trueValue)\n\nfun Tag<HTMLSelectElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLSelectElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLSelectElement>.required(value: Boolean, trueValue: String = \"\") = attr(\"required\", value, trueValue)\nfun Tag<HTMLSelectElement>.required(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"required\", value, trueValue)\n\nfun Tag<HTMLSelectElement>.size(value: Int) = attr(\"size\", value)\nfun Tag<HTMLSelectElement>.size(value: Flow<Int>) = attr(\"size\", value)\n\nfun Tag<HTMLSelectElement>.length(value: Int) = attr(\"length\", value)\nfun Tag<HTMLSelectElement>.length(value: Flow<Int>) = attr(\"length\", value)\n\nfun Tag<HTMLSelectElement>.selectedIndex(value: Int) = attr(\"selectedindex\", value)\nfun Tag<HTMLSelectElement>.selectedIndex(value: Flow<Int>) = attr(\"selectedindex\", value)\n\nfun Tag<HTMLSelectElement>.value(value: String) = attr(\"value\", value)\nfun Tag<HTMLSelectElement>.value(value: Flow<String>) = attr(\"value\", value)\n\n\n/*\n * HTMLOptGroupElement attributes\n */\nfun Tag<HTMLOptGroupElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLOptGroupElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLOptGroupElement>.label(value: String) = attr(\"label\", value)\nfun Tag<HTMLOptGroupElement>.label(value: Flow<String>) = attr(\"label\", value)\n\n\n/*\n * HTMLOptionElement attributes\n */\nfun Tag<HTMLOptionElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLOptionElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLOptionElement>.label(value: String) = attr(\"label\", value)\nfun Tag<HTMLOptionElement>.label(value: Flow<String>) = attr(\"label\", value)\n\nfun Tag<HTMLOptionElement>.defaultSelected(value: Boolean, trueValue: String = \"\") = attr(\"defaultselected\", value, trueValue)\nfun Tag<HTMLOptionElement>.defaultSelected(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"defaultselected\", value, trueValue)\n\nfun Tag<HTMLOptionElement>.selected(value: Boolean, trueValue: String = \"\") {\n    domNode.selected = value\n    domNode.defaultSelected = value\n    if (value) domNode.setAttribute(\"selected\", trueValue)\n    else domNode.removeAttribute(\"selected\")\n}\n\nfun Tag<HTMLOptionElement>.selected(value: Flow<Boolean>, trueValue: String = \"\") {\n    mountSimple(job, value) { v -> selected(v, trueValue) }\n}\n\nfun Tag<HTMLOptionElement>.value(value: String) = attr(\"value\", value)\nfun Tag<HTMLOptionElement>.value(value: Flow<String>) = attr(\"value\", value)\n\n/*\n * HTMLTextAreaElement attributes\n */\nfun Tag<HTMLTextAreaElement>.autocomplete(value: String) = attr(\"autocomplete\", value)\nfun Tag<HTMLTextAreaElement>.autocomplete(value: Flow<String>) = attr(\"autocomplete\", value)\n\nfun Tag<HTMLTextAreaElement>.autofocus(value: Boolean, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\nfun Tag<HTMLTextAreaElement>.autofocus(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\n\nfun Tag<HTMLTextAreaElement>.cols(value: Int) = attr(\"cols\", value)\nfun Tag<HTMLTextAreaElement>.cols(value: Flow<Int>) = attr(\"cols\", value)\n\nfun Tag<HTMLTextAreaElement>.dirName(value: String) = attr(\"dirname\", value)\nfun Tag<HTMLTextAreaElement>.dirName(value: Flow<String>) = attr(\"dirname\", value)\n\nfun Tag<HTMLTextAreaElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLTextAreaElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLTextAreaElement>.inputMode(value: String) = attr(\"inputmode\", value)\nfun Tag<HTMLTextAreaElement>.inputMode(value: Flow<String>) = attr(\"inputmode\", value)\n\nfun Tag<HTMLTextAreaElement>.maxLength(value: Int) = attr(\"maxlength\", value)\nfun Tag<HTMLTextAreaElement>.maxLength(value: Flow<Int>) = attr(\"maxlength\", value)\n\nfun Tag<HTMLTextAreaElement>.minLength(value: Int) = attr(\"minlength\", value)\nfun Tag<HTMLTextAreaElement>.minLength(value: Flow<Int>) = attr(\"minlength\", value)\n\nfun Tag<HTMLTextAreaElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLTextAreaElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLTextAreaElement>.placeholder(value: String) = attr(\"placeholder\", value)\nfun Tag<HTMLTextAreaElement>.placeholder(value: Flow<String>) = attr(\"placeholder\", value)\n\nfun Tag<HTMLTextAreaElement>.readOnly(value: Boolean, trueValue: String = \"\") = attr(\"readonly\", value, trueValue)\nfun Tag<HTMLTextAreaElement>.readOnly(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"readonly\", value, trueValue)\n\nfun Tag<HTMLTextAreaElement>.required(value: Boolean, trueValue: String = \"\") = attr(\"required\", value, trueValue)\nfun Tag<HTMLTextAreaElement>.required(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"required\", value, trueValue)\n\nfun Tag<HTMLTextAreaElement>.rows(value: Int) = attr(\"rows\", value)\nfun Tag<HTMLTextAreaElement>.rows(value: Flow<Int>) = attr(\"rows\", value)\n\nfun Tag<HTMLTextAreaElement>.wrap(value: String) = attr(\"wrap\", value)\nfun Tag<HTMLTextAreaElement>.wrap(value: Flow<String>) = attr(\"wrap\", value)\n\nfun Tag<HTMLTextAreaElement>.defaultValue(value: String) = attr(\"defaultvalue\", value)\nfun Tag<HTMLTextAreaElement>.defaultValue(value: Flow<String>) = attr(\"defaultvalue\", value)\n\nfun Tag<HTMLTextAreaElement>.value(value: String) {\n    domNode.value = value\n    domNode.defaultValue = value\n    domNode.setAttribute(\"value\", value)\n}\n\nfun Tag<HTMLTextAreaElement>.value(value: Flow<String>) {\n    mountSimple(job, value) { v -> value(v) }\n}\n\nfun Tag<HTMLTextAreaElement>.selectionStart(value: Int?) = attr(\"selectionstart\", value)\nfun Tag<HTMLTextAreaElement>.selectionStart(value: Flow<Int?>) = attr(\"selectionstart\", value)\n\nfun Tag<HTMLTextAreaElement>.selectionEnd(value: Int?) = attr(\"selectionend\", value)\nfun Tag<HTMLTextAreaElement>.selectionEnd(value: Flow<Int?>) = attr(\"selectionend\", value)\n\nfun Tag<HTMLTextAreaElement>.selectionDirection(value: String?) = attr(\"selectiondirection\", value)\nfun Tag<HTMLTextAreaElement>.selectionDirection(value: Flow<String?>) = attr(\"selectiondirection\", value)\n\n\n/*\n * HTMLKeygenElement attributes\n */\nfun Tag<HTMLKeygenElement>.autofocus(value: Boolean, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\nfun Tag<HTMLKeygenElement>.autofocus(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"autofocus\", value, trueValue)\n\nfun Tag<HTMLKeygenElement>.challenge(value: String) = attr(\"challenge\", value)\nfun Tag<HTMLKeygenElement>.challenge(value: Flow<String>) = attr(\"challenge\", value)\n\nfun Tag<HTMLKeygenElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLKeygenElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLKeygenElement>.keytype(value: String) = attr(\"keytype\", value)\nfun Tag<HTMLKeygenElement>.keytype(value: Flow<String>) = attr(\"keytype\", value)\n\nfun Tag<HTMLKeygenElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLKeygenElement>.name(value: Flow<String>) = attr(\"name\", value)\n\n\n/*\n * HTMLOutputElement attributes\n */\nfun Tag<HTMLOutputElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLOutputElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLOutputElement>.defaultValue(value: String) = attr(\"defaultvalue\", value)\nfun Tag<HTMLOutputElement>.defaultValue(value: Flow<String>) = attr(\"defaultvalue\", value)\n\nfun Tag<HTMLOutputElement>.value(value: String) {\n    domNode.value = value\n    domNode.defaultValue = value\n    domNode.setAttribute(\"value\", value)\n}\n\nfun Tag<HTMLOutputElement>.value(value: Flow<String>) {\n    mountSimple(job, value) { v -> value(v) }\n}\n\n\n/*\n * HTMLProgressElement attributes\n */\nfun Tag<HTMLProgressElement>.value(value: Double) = attr(\"value\", value)\nfun Tag<HTMLProgressElement>.value(value: Flow<Double>) = attr(\"value\", value)\n\nfun Tag<HTMLProgressElement>.max(value: Double) = attr(\"max\", value)\nfun Tag<HTMLProgressElement>.max(value: Flow<Double>) = attr(\"max\", value)\n\n\n/*\n * HTMLMeterElement attributes\n */\nfun Tag<HTMLMeterElement>.value(value: Double) = attr(\"value\", value)\nfun Tag<HTMLMeterElement>.value(value: Flow<Double>) = attr(\"value\", value)\n\nfun Tag<HTMLMeterElement>.min(value: Double) = attr(\"min\", value)\nfun Tag<HTMLMeterElement>.min(value: Flow<Double>) = attr(\"min\", value)\n\nfun Tag<HTMLMeterElement>.max(value: Double) = attr(\"max\", value)\nfun Tag<HTMLMeterElement>.max(value: Flow<Double>) = attr(\"max\", value)\n\nfun Tag<HTMLMeterElement>.low(value: Double) = attr(\"low\", value)\nfun Tag<HTMLMeterElement>.low(value: Flow<Double>) = attr(\"low\", value)\n\nfun Tag<HTMLMeterElement>.high(value: Double) = attr(\"high\", value)\nfun Tag<HTMLMeterElement>.high(value: Flow<Double>) = attr(\"high\", value)\n\nfun Tag<HTMLMeterElement>.optimum(value: Double) = attr(\"optimum\", value)\nfun Tag<HTMLMeterElement>.optimum(value: Flow<Double>) = attr(\"optimum\", value)\n\n\n/*\n * HTMLFieldSetElement attributes\n */\nfun Tag<HTMLFieldSetElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLFieldSetElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLFieldSetElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLFieldSetElement>.name(value: Flow<String>) = attr(\"name\", value)\n\n\n/*\n * HTMLLegendElement attributes\n */\nfun Tag<HTMLLegendElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLLegendElement>.align(value: Flow<String>) = attr(\"align\", value)\n\n\n/*\n * HTMLDetailsElement attributes\n */\nfun Tag<HTMLDetailsElement>.open(value: Boolean, trueValue: String = \"\") = attr(\"open\", value, trueValue)\nfun Tag<HTMLDetailsElement>.open(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"open\", value, trueValue)\n\n\n/*\n * HTMLMenuElement attributes\n */\nfun Tag<HTMLMenuElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLMenuElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLMenuElement>.label(value: String) = attr(\"label\", value)\nfun Tag<HTMLMenuElement>.label(value: Flow<String>) = attr(\"label\", value)\n\nfun Tag<HTMLMenuElement>.compact(value: Boolean, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\nfun Tag<HTMLMenuElement>.compact(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\n\n\n/*\n * HTMLMenuItemElement attributes\n */\nfun Tag<HTMLMenuItemElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLMenuItemElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLMenuItemElement>.label(value: String) = attr(\"label\", value)\nfun Tag<HTMLMenuItemElement>.label(value: Flow<String>) = attr(\"label\", value)\n\nfun Tag<HTMLMenuItemElement>.icon(value: String) = attr(\"icon\", value)\nfun Tag<HTMLMenuItemElement>.icon(value: Flow<String>) = attr(\"icon\", value)\n\nfun Tag<HTMLMenuItemElement>.disabled(value: Boolean, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\nfun Tag<HTMLMenuItemElement>.disabled(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"disabled\", value, trueValue)\n\nfun Tag<HTMLMenuItemElement>.checked(value: Boolean, trueValue: String = \"\") = attr(\"checked\", value, trueValue)\nfun Tag<HTMLMenuItemElement>.checked(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"checked\", value, trueValue)\n\nfun Tag<HTMLMenuItemElement>.radiogroup(value: String) = attr(\"radiogroup\", value)\nfun Tag<HTMLMenuItemElement>.radiogroup(value: Flow<String>) = attr(\"radiogroup\", value)\n\nfun Tag<HTMLMenuItemElement>.default(value: Boolean, trueValue: String = \"\") = attr(\"default\", value, trueValue)\nfun Tag<HTMLMenuItemElement>.default(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"default\", value, trueValue)\n\n\n/*\n * HTMLDialogElement attributes\n */\nfun Tag<HTMLDialogElement>.open(value: Boolean, trueValue: String = \"\") = attr(\"open\", value, trueValue)\nfun Tag<HTMLDialogElement>.open(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"open\", value, trueValue)\n\nfun Tag<HTMLDialogElement>.returnValue(value: String) = attr(\"returnvalue\", value)\nfun Tag<HTMLDialogElement>.returnValue(value: Flow<String>) = attr(\"returnvalue\", value)\n\n\n/*\n * HTMLScriptElement attributes\n */\nfun Tag<HTMLScriptElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLScriptElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLScriptElement>.type(value: String) = attr(\"type\", value)\nfun Tag<HTMLScriptElement>.type(value: Flow<String>) = attr(\"type\", value)\n\nfun Tag<HTMLScriptElement>.charset(value: String) = attr(\"charset\", value)\nfun Tag<HTMLScriptElement>.charset(value: Flow<String>) = attr(\"charset\", value)\n\nfun Tag<HTMLScriptElement>.async(value: Boolean, trueValue: String = \"\") = attr(\"async\", value, trueValue)\nfun Tag<HTMLScriptElement>.async(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"async\", value, trueValue)\n\nfun Tag<HTMLScriptElement>.defer(value: Boolean, trueValue: String = \"\") = attr(\"defer\", value, trueValue)\nfun Tag<HTMLScriptElement>.defer(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"defer\", value, trueValue)\n\nfun Tag<HTMLScriptElement>.crossOrigin(value: String?) = attr(\"crossorigin\", value)\nfun Tag<HTMLScriptElement>.crossOrigin(value: Flow<String?>) = attr(\"crossorigin\", value)\n\nfun Tag<HTMLScriptElement>.nonce(value: String) = attr(\"nonce\", value)\nfun Tag<HTMLScriptElement>.nonce(value: Flow<String>) = attr(\"nonce\", value)\n\nfun Tag<HTMLScriptElement>.event(value: String) = attr(\"event\", value)\nfun Tag<HTMLScriptElement>.event(value: Flow<String>) = attr(\"event\", value)\n\nfun Tag<HTMLScriptElement>.`for`(value: String) = attr(\"for\", value)\nfun Tag<HTMLScriptElement>.`for`(value: Flow<String>) = attr(\"for\", value)\n\n\n/*\n * HTMLSlotElement attributes\n */\nfun Tag<HTMLSlotElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLSlotElement>.name(value: Flow<String>) = attr(\"name\", value)\n\n\n/*\n * HTMLCanvasElement attributes\n */\nfun Tag<HTMLCanvasElement>.width(value: Int) = attr(\"width\", value)\nfun Tag<HTMLCanvasElement>.width(value: Flow<Int>) = attr(\"width\", value)\n\nfun Tag<HTMLCanvasElement>.height(value: Int) = attr(\"height\", value)\nfun Tag<HTMLCanvasElement>.height(value: Flow<Int>) = attr(\"height\", value)\n\n\n/*\n * HTMLAppletElement attributes\n */\nfun Tag<HTMLAppletElement>.align(value: String) = attr(\"align\", value)\nfun Tag<HTMLAppletElement>.align(value: Flow<String>) = attr(\"align\", value)\n\nfun Tag<HTMLAppletElement>.alt(value: String) = attr(\"alt\", value)\nfun Tag<HTMLAppletElement>.alt(value: Flow<String>) = attr(\"alt\", value)\n\nfun Tag<HTMLAppletElement>.archive(value: String) = attr(\"archive\", value)\nfun Tag<HTMLAppletElement>.archive(value: Flow<String>) = attr(\"archive\", value)\n\nfun Tag<HTMLAppletElement>.code(value: String) = attr(\"code\", value)\nfun Tag<HTMLAppletElement>.code(value: Flow<String>) = attr(\"code\", value)\n\nfun Tag<HTMLAppletElement>.codeBase(value: String) = attr(\"codebase\", value)\nfun Tag<HTMLAppletElement>.codeBase(value: Flow<String>) = attr(\"codebase\", value)\n\nfun Tag<HTMLAppletElement>.height(value: String) = attr(\"height\", value)\nfun Tag<HTMLAppletElement>.height(value: Flow<String>) = attr(\"height\", value)\n\nfun Tag<HTMLAppletElement>.hspace(value: Int) = attr(\"hspace\", value)\nfun Tag<HTMLAppletElement>.hspace(value: Flow<Int>) = attr(\"hspace\", value)\n\nfun Tag<HTMLAppletElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLAppletElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLAppletElement>.`object`(value: String) = attr(\"object\", value)\nfun Tag<HTMLAppletElement>.`object`(value: Flow<String>) = attr(\"object\", value)\n\nfun Tag<HTMLAppletElement>.vspace(value: Int) = attr(\"vspace\", value)\nfun Tag<HTMLAppletElement>.vspace(value: Flow<Int>) = attr(\"vspace\", value)\n\nfun Tag<HTMLAppletElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLAppletElement>.width(value: Flow<String>) = attr(\"width\", value)\n\n\n/*\n * HTMLMarqueeElement attributes\n */\nfun Tag<HTMLMarqueeElement>.behavior(value: String) = attr(\"behavior\", value)\nfun Tag<HTMLMarqueeElement>.behavior(value: Flow<String>) = attr(\"behavior\", value)\n\nfun Tag<HTMLMarqueeElement>.bgColor(value: String) = attr(\"bgcolor\", value)\nfun Tag<HTMLMarqueeElement>.bgColor(value: Flow<String>) = attr(\"bgcolor\", value)\n\nfun Tag<HTMLMarqueeElement>.direction(value: String) = attr(\"direction\", value)\nfun Tag<HTMLMarqueeElement>.direction(value: Flow<String>) = attr(\"direction\", value)\n\nfun Tag<HTMLMarqueeElement>.height(value: String) = attr(\"height\", value)\nfun Tag<HTMLMarqueeElement>.height(value: Flow<String>) = attr(\"height\", value)\n\nfun Tag<HTMLMarqueeElement>.hspace(value: Int) = attr(\"hspace\", value)\nfun Tag<HTMLMarqueeElement>.hspace(value: Flow<Int>) = attr(\"hspace\", value)\n\nfun Tag<HTMLMarqueeElement>.loop(value: Int) = attr(\"loop\", value)\nfun Tag<HTMLMarqueeElement>.loop(value: Flow<Int>) = attr(\"loop\", value)\n\nfun Tag<HTMLMarqueeElement>.scrollAmount(value: Int) = attr(\"scrollamount\", value)\nfun Tag<HTMLMarqueeElement>.scrollAmount(value: Flow<Int>) = attr(\"scrollamount\", value)\n\nfun Tag<HTMLMarqueeElement>.scrollDelay(value: Int) = attr(\"scrolldelay\", value)\nfun Tag<HTMLMarqueeElement>.scrollDelay(value: Flow<Int>) = attr(\"scrolldelay\", value)\n\nfun Tag<HTMLMarqueeElement>.trueSpeed(value: Boolean, trueValue: String = \"\") = attr(\"truespeed\", value, trueValue)\nfun Tag<HTMLMarqueeElement>.trueSpeed(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"truespeed\", value, trueValue)\n\nfun Tag<HTMLMarqueeElement>.vspace(value: Int) = attr(\"vspace\", value)\nfun Tag<HTMLMarqueeElement>.vspace(value: Flow<Int>) = attr(\"vspace\", value)\n\nfun Tag<HTMLMarqueeElement>.width(value: String) = attr(\"width\", value)\nfun Tag<HTMLMarqueeElement>.width(value: Flow<String>) = attr(\"width\", value)\n\n\n/*\n * HTMLFrameSetElement attributes\n */\nfun Tag<HTMLFrameSetElement>.cols(value: String) = attr(\"cols\", value)\nfun Tag<HTMLFrameSetElement>.cols(value: Flow<String>) = attr(\"cols\", value)\n\nfun Tag<HTMLFrameSetElement>.rows(value: String) = attr(\"rows\", value)\nfun Tag<HTMLFrameSetElement>.rows(value: Flow<String>) = attr(\"rows\", value)\n\n\n/*\n * HTMLFrameElement attributes\n */\nfun Tag<HTMLFrameElement>.name(value: String) = attr(\"name\", value)\nfun Tag<HTMLFrameElement>.name(value: Flow<String>) = attr(\"name\", value)\n\nfun Tag<HTMLFrameElement>.scrolling(value: String) = attr(\"scrolling\", value)\nfun Tag<HTMLFrameElement>.scrolling(value: Flow<String>) = attr(\"scrolling\", value)\n\nfun Tag<HTMLFrameElement>.src(value: String) = attr(\"src\", value)\nfun Tag<HTMLFrameElement>.src(value: Flow<String>) = attr(\"src\", value)\n\nfun Tag<HTMLFrameElement>.frameBorder(value: String) = attr(\"frameborder\", value)\nfun Tag<HTMLFrameElement>.frameBorder(value: Flow<String>) = attr(\"frameborder\", value)\n\nfun Tag<HTMLFrameElement>.longDesc(value: String) = attr(\"longdesc\", value)\nfun Tag<HTMLFrameElement>.longDesc(value: Flow<String>) = attr(\"longdesc\", value)\n\nfun Tag<HTMLFrameElement>.noResize(value: Boolean, trueValue: String = \"\") = attr(\"noresize\", value, trueValue)\nfun Tag<HTMLFrameElement>.noResize(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"noresize\", value, trueValue)\n\nfun Tag<HTMLFrameElement>.marginHeight(value: String) = attr(\"marginheight\", value)\nfun Tag<HTMLFrameElement>.marginHeight(value: Flow<String>) = attr(\"marginheight\", value)\n\nfun Tag<HTMLFrameElement>.marginWidth(value: String) = attr(\"marginwidth\", value)\nfun Tag<HTMLFrameElement>.marginWidth(value: Flow<String>) = attr(\"marginwidth\", value)\n\n\n/*\n * HTMLDirectoryElement attributes\n */\nfun Tag<HTMLDirectoryElement>.compact(value: Boolean, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\nfun Tag<HTMLDirectoryElement>.compact(value: Flow<Boolean>, trueValue: String = \"\") = attr(\"compact\", value, trueValue)\n\n\n/*\n * HTMLFontElement attributes\n */\nfun Tag<HTMLFontElement>.color(value: String) = attr(\"color\", value)\nfun Tag<HTMLFontElement>.color(value: Flow<String>) = attr(\"color\", value)\n\nfun Tag<HTMLFontElement>.face(value: String) = attr(\"face\", value)\nfun Tag<HTMLFontElement>.face(value: Flow<String>) = attr(\"face\", value)\n\nfun Tag<HTMLFontElement>.size(value: String) = attr(\"size\", value)\nfun Tag<HTMLFontElement>.size(value: Flow<String>) = attr(\"size\", value)\n","package dev.fritz2.examples.remote\n\nimport dev.fritz2.core.RootStore\nimport dev.fritz2.core.placeholder\nimport dev.fritz2.core.render\nimport dev.fritz2.core.values\nimport dev.fritz2.remote.http\nimport kotlinx.coroutines.Job\n\nfun main() {\n\n    val userStore = object : RootStore<String>(\"\", job = Job()) {\n\n        val users = http(\"https://reqres.in/api/users\")\n\n        val loadAllUsers = handle {\n            users.get().body()\n        }\n\n        val loadUserById = handle { _, s: String ->\n            users.acceptJson().get(s).body()\n        }\n\n        val saveUserWithName = handle { _, s: String ->\n            users.body(\n                \"\"\"\n                    {\n                        \"name\": \"$s\",\n                        \"job\": \"programmer\"\n                    }\n                \"\"\".trimIndent()\n            )\n                .contentType(\"application/json; charset=utf-8\")\n                .acceptJson().post().body()\n        }\n    }\n\n    render(\"#target\") {\n        div {\n            div(\"form-group\") {\n                label(\"load-user\") {\n                    +\"Load user by id\"\n                }\n                input(\"form-control\", id = \"load-user\") {\n                    placeholder(\"Enter user id\")\n                    changes.values() handledBy userStore.loadUserById\n                }\n            }\n\n            hr(\"my-4\") { }\n\n            div(\"form-group\") {\n                label(\"save-user\") {\n                    +\"Save user\"\n                }\n                input(\"form-control\", id = \"save-user\") {\n                    placeholder(\"Enter new user name\")\n                    changes.values() handledBy userStore.saveUserWithName\n                }\n            }\n\n            hr(\"my-4\") { }\n\n            div(\"form-group\") {\n                button(\"btn btn-primary\") {\n                    +\"Load all users\"\n                    clicks handledBy userStore.loadAllUsers\n                }\n            }\n            div(\"card card-body\") {\n                h6(\"card-title\") {\n                    +\"User store data\"\n                }\n                pre(\"text-wrap\") {\n                    code {\n                        userStore.data.renderText()\n                    }\n                }\n            }\n        }\n    }\n}\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(508);\n"],"names":["root","factory","exports","module","define","amd","globalThis","baseClass","id","scope","content","ScopeContext","HtmlTag","name","value","trueValue","domNode","setAttribute","removeAttribute","<this>","into","target","MainScope","parentJob","launch","$this$launch","$completion","toCharArray","classes","element","joinToString","message","$scope","$targetElement","MountPointImpl","Job","this","$content","$mountPoint","process","WithJob$handledBy$o$collect$slambda","<init>","collector","events","$selector","$this_callbackFlow","$eventName","it","e","console","error","$listener","$capture","removeEventListener","values$o$collect$slambda","Mutex","Key","entries","current","$execute","$d","$it","$this$withContext","d","window","fritz2","initialData","job","MutableStateFlow","Channel","flow","$this$flow","RootStore$data$slambda","$this$transformLatest","RootStore$update$slambda","newValue","$name","$this_launch","$this$catch","$target","$flowArray","HtmlTag$classesStateFlow$delegate$lambda$slambda$o$collect$slambda","$this$combineInternal","listOfNotNull","tagName","document","createElement","className","lazy","AnnexContext","buildInit","reqHeader","Headers","h","k","v","set","o","url","method","headers","body","referrer","referrerPolicy","mode","credentials","cache","redirect","integrity","keepalive","reqWindow","middlewares","emptyMap","undefined","emptyList","response","request","propagate","ok","status","statusText","type","redirected","length","appendChild","equals","$this$callbackFlow","addEventListener","awaitClose","withContext","key","parent","t","emptyFlow","update","clear","createTextNode","joinClasses","parentElement","flowArray","eventName","capture","selector","fetch","Response","reversed","Request","subUrl","parameters","trimEnd","trimStart","params","URLSearchParams","append","text","execute","$executeJob","onEach","executeJob","launchIn","cause","printErrorIgnoreLensException","Listener","callbackFlow","handler","override","querySelector","targetElement","css","getElementById","sheet","head","getOrCreateGlobalStylesheet","insertRule","MountTargetNotFoundException","mountPoint","baseUrl","$userStore","userStore","render","$this$render","$this$div","$this$input","placeholder","values","$this$button","$this$pre","$this$code","RootStore","http","s","$this$label","$this$hr","$this$h6","trimIndent","log","LN2","a","b","O","len","relativeStart","end","relativeEnd","finalValue","TypedArray","x","asUint","context","initial","operation","index","separator","prefix","postfix","limit","truncated","transform","buffer","count","destination","item","minimumValue","maximumValue","n","other","ordinal","low","high","interfaces","maxSize","masks","i","currentSize","imask","iid","iidImask","numberIndex","intArray","numberWithSettledBit","activeBit","capacity","result","mask","array","initValue","$array","obj","code","startIndex","endIndex","ia","hash","descriptor","proto","typeOf","shiftNumber","MASK","bigNumber","hashCode","signum","chunk","hashCodeMap","symbol","cachedHashCode","str","obj1","obj2","instance","constructorFunction","constructor","this_","errorInfo","thisNeg","otherNeg","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","b00","numBits","radix","radixLong","div","rem","digitsPerTime","radixToPower","remDiv","digits","twoPwr32","kind","ctor","defaultConstructor","suspendArity","associatedObjectKey","associatedObjects","metadata","iface","possibleActiveBit","parentProto","propName","fromIndex","toIndex","newSize","source","defaultValue","collection","iterator","elements","destinationOffset","rangeSize","subrange","pair","initialCapacity","pairs","loadFactor","ArrayList_init_$Init$","rangeCheck","internalMap","HashMap_init_$Init$","original","backing","map","HashSet_init_$Init$","computeHashSize","computeShift","hashSize","checkForComodification","InternalHashMap_init_$Init$","<get-capacity>","<get-hashSize>","registerModification","ensureExtraCapacity","shouldCompact","extraCapacity","spareCapacity","gaps","ensureCapacity","minCapacity","src","dst","srcLen","dstLen","arr","newHashSize","allocateValuesArray","curValuesArray","newValuesArray","compact","updateHashArray","j","valuesArray","rehash","putRehash","probesLeft","findKey","addKey","tentativeMaxProbeDistance","probeDistance","putIndex","putEntry","entry","oldValue","keysArray","presenceArray","hashArray","maxProbeDistance","LinkedHashSet_init_$Init$","resultContinuation","receiver","completion","$receiver","$completion$1","Exception_init_$Init$","IllegalStateException_init_$Init$","UnsupportedOperationException_init_$Init$","RuntimeException_init_$Init$","NoSuchElementException_init_$Init$","NullPointerException_init_$Init$","ConcurrentModificationException_init_$Init$","NoWhenBranchMatchedException_init_$Init$","ClassCastException_init_$Init$","seed","seed1","seed2","jClass","givenSimpleName","isInstanceFunction","jClasses","kClass","StringBuilder_init_$Init$","uppercase","char","ch","diff","needle","bottom","top","middle","ignoreCase","n1","n2","min","thisChar","otherChar","toString","implFindEntry","ArrayDeque_init_$Init$","copyElements","newCapacity","newElements","positiveMod","negativeMod","incremented","decremented","nullifyNonEmpty","internalFromIndex","internalToIndex","isVarargs","acc","removed","interceptor","left","size","cur","contains","baseKey","safeCast","from","until","y","z","w","addend","line","string","initializer","exception","first","second","LinkedHashMap_init_$Init$","CancellationException_init_$Init$","IllegalArgumentException_init_$Init$","Error_init_$Init$","IndexOutOfBoundsException_init_$Init$","ArithmeticException_init_$Init$","UninitializedPropertyAccessException_init_$Init$","approx","res","approxDouble","approx2","log2","delta","approxRes","approxRem","bitCount","l","insertionRangeCheck","offset","increaseLength","amount","previous","sb","putAllEntries","updated","contentEquals","currentResult","currentException","outcome","intercepted","arity","$arity","oldCapacity","c","otherIterator","ourValue","internalLastIndex","internalIndex","decrementedInternalIndex","decrementedHead","tail","oldElement","reference","dest","collectionSize","removeRangeShiftPreceding","copyFromIndex","copyToIndex","copyCount","segmentLength","newHead","removeRangeShiftSucceeding","next","newLeft","containsAll","bits","rnd","v0","_delimiterLength","_delimiterStartIndex","idx","lastIndex","firstIndex","m","argument","random","list","midPoint","reverseIndex","tmp","wrappedCompletion","getter","setter","start","isNegative","firstChar","limitForMaxRadix","limitBeforeMul","digit","chars","newIndent","lines","default","minCommonIndent","indent","$indent","suppressed","that","trace","event","event1","event2","event3","event4","<set-?>","expect","parentContext","initParentJob","active","block","newContext","coroutine","uCont","handle","delegate","<get-parentHandle>","isReusable","callSegmentOnCancellation","segment","ex","installParentHandle","invokeOnCancellationImpl","multipleHandlersError","state","dispatchResume","tryResume","undispatched","dispatcher","eventLoop","resumedState","proposedUpdate","resumeMode","onCancellation","idempotent","alreadyResumedError","detachChildIfNonReusable","cancelHandler","idempotentResume","cancelCause","child","handled","continuation","reportException","originalException","thrownException","unconfined","invokeImmediately","JobNode$invoke$ref","JobNode$invoke$ref$lambda","isActive","<set-exceptionsHolder>","<get-exceptionsHolder>","allocateList","finalizeFinishingState","wasCancelling","proposedException","exceptions","finalCause","getFinalRootCause","addSuppressedExceptions","rootCause","seenExceptions","expectedSize","unwrappedCause","unwrapped","finalException","finalState","completeStateFinalization","notifyCancelling","cancelParent","isCancellation","startInternal","promoteEmptyToNodeList","promoteSingleToNodeList","createCauseException","getOrPromoteCancellingList","tryMakeCancelling","cancelling","tryMakeCompleting","tryMakeCompletingSlowPath","notifyRootCause","finishing","anotherChild","tryFinalizeSimpleState","tryWaitForChild","stateString","isCompleting","childJob","handlesException","cont","yieldContext","setElementLazy","prev","channel","pointers","onClosedHasNext","hasNextOnNoWaiterSuspend","r","cancellable","updCellResult","onClosedHasNextNoWaiterSuspend","<get-bufferEndCounter>","<get-isRendezvousOrUnlimited>","onClosedSend","sendOnNoWaiterSuspend","sendersAndCloseStatusCur","closed","onClosedSendOnNoWaiterSuspend","updateCellSend","waiter","updateCellSendSlow","bufferOrRendezvousSend","curSenders","BufferedChannel$onCancellationImplDoNotCall$ref","BufferedChannel$onCancellationImplDoNotCall$ref$lambda","onCancellationImplDoNotCall","receiveCatchingOnNoWaiterSuspend","onClosedReceiveCatchingOnNoWaiterSuspend","updateCellReceive","senders","updateCellReceiveSlow","helpExpandBuffer","trySelectResult","expandBuffer","updateCellExpandBuffer","updateCellExpandBufferSlow","incCompletedExpandBufferAttempts","nAttempts","incCompletedExpandBufferAttempts$default","<get-receiveException>","completeCloseOrCancel","completeClose","sendersCur","lastSegment","closeLinkedList","lastBufferedCellGlobalIndex","markAllEmptyCellsAsClosed","globalIndex","cancelSuspendedReceiveRequests","sendersCounter","suspendedReceivers","completeCancel","removeUnprocessedElements","onUndeliveredElement","undeliveredElementException","suspendedSenders","sender","isClosed","isClosedForReceive","isCellNonEmpty","findSegmentSend","startFrom","updateSendersCounterIfLower","curCounter","findSegmentReceive","updateReceiversCounterIfLower","findSegmentBufferEnd","currentBufferEndCounter","moveSegmentBufferEndToSpecifiedOrLast","BufferedChannel$onCancellationChannelResultImplDoNotCall$ref","BufferedChannel$onCancellationChannelResultImplDoNotCall$ref$lambda","onCancellationChannelResultImplDoNotCall","$element","select","$select","firstSegment","counter","pauseEB","closeStatus","createSegment$ref$lambda","holder","onBufferOverflow","_channel","trySendImpl","isSendOp","trySendDropLatest","awaitClose$lambda","consume","initialState","$collector","collectWithContextUndispatched","emitContext","countOrElement","$downstream","downstream","$resultChannel","$i","$flows","$nonClosed","$arrayFactory","$transform","$value","$previousFlow","$this_coroutineScope","currentContext","collectElement","collectJob","emissionParentJob","$previousKey","upstream","keySelector","areEquivalent","old","new","$action","$fromDownstream","onEach$o$collect$slambda","<get-aliveSegmentLeft>","<get-aliveSegmentRight>","$this","<get-nextOrClosed>","createNewSegment","newTail","runnable","propertyName","minValue","maxValue","parsed","alwaysRethrow","findClause","clauseObject","trySelectInternalResult","token","owner","$owner","locked","decPermits","p","coerceAvailablePermitsAtMaximum","addAcquireToQueue","curTail","enqIdx","tryResumeNextFromQueue","curHead","deqIdx","cellState","permits","acquiredPermits","combined","addedContext","collectContext","forbiddenElementsBitmask","fatalCompletion","trySuspend","takenState","cancelLater","dispatched","cancellationCause","caller","upd","tryResumeImpl","actualCompletion","task","queue","eh","continueCompleting","lastChild","waitChild","waitChildAgain","onCancelling","node","joinInternal","joinSuspend","cancelMakeCompleting","makeCancelling","causeExceptionCache","causeException","addedBeforeCompletion","latestState","main","immediate","to","isSender","shouldSendSuspend","curSendersAndCloseStatus","globalCellIndex","ebCompleted","ebCompletedAndBit","pauseExpandBuffers","cancel","markCancellationStarted","closedByThisOperation","markCancelled","markClosed","invokeCloseHandler","closeHandler","minElem","cellStateString","updateState","expectedState","newState","curSequence","curSlots","oldState","subscriptionCount","slot","slots","resumes","$this$coroutineScope","onCompletion","props","$this$flowScope","coroutineContext","fromDownstream","reason","internalResult","trySelectInternal","curState","clause","curOwner","timeout","expected","permissionsBitmask","forbiddenElementsBit","flows","arrayFactory","await$lambda","oldContext","action","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}